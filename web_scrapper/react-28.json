{"id": 28, "url": "https://react.dev/reference/react/createElement", "title": "createElement", "content": "'createElement – React', 'Stream React Conf on May 15-16.', 'Learn more.', 'React', 'Search', '⌘', 'Ctrl', 'K', 'Learn', 'Reference', 'Community', 'Blog', 'react@18.2.0', 'Overview', ' ', 'Hooks', ' ', 'use', ' ', ' - This feature is available in the latest Canary', 'useCallback', ' ', 'useContext', ' ', 'useDebugValue', ' ', 'useDeferredValue', ' ', 'useEffect', ' ', 'useId', ' ', 'useImperativeHandle', ' ', 'useInsertionEffect', ' ', 'useLayoutEffect', ' ', 'useMemo', ' ', 'useOptimistic', ' ', ' - This feature is available in the latest Canary', 'useReducer', ' ', 'useRef', ' ', 'useState', ' ', 'useSyncExternalStore', ' ', 'useTransition', ' ', 'Components', ' ', '<Fragment> (<>)', ' ', '<Profiler>', ' ', '<StrictMode>', ' ', '<Suspense>', ' ', 'APIs', ' ', 'cache', ' ', ' - This feature is available in the latest Canary', 'createContext', ' ', 'forwardRef', ' ', 'lazy', ' ', 'memo', ' ', 'startTransition', ' ', 'experimental_taintObjectReference', ' ', ' - This feature is available in the latest Canary', 'experimental_taintUniqueValue', ' ', ' - This feature is available in the latest Canary', 'Directives', ' ', ' - This feature is available in the latest Canary', \"'use client'\", ' ', ' - This feature is available in the latest Canary', \"'use server'\", ' ', ' - This feature is available in the latest Canary', 'react-dom@18.2.0', 'Hooks', ' ', 'useFormState', ' ', ' - This feature is available in the latest Canary', 'useFormStatus', ' ', ' - This feature is available in the latest Canary', 'Components', ' ', 'Common (e.g. <div>)', ' ', '<form>', ' ', ' - This feature is available in the latest Canary', '<input>', ' ', '<option>', ' ', '<progress>', ' ', '<select>', ' ', '<textarea>', ' ', '<link>', ' ', ' - This feature is available in the latest Canary', '<meta>', ' ', ' - This feature is available in the latest Canary', '<script>', ' ', ' - This feature is available in the latest Canary', '<style>', ' ', ' - This feature is available in the latest Canary', '<title>', ' ', ' - This feature is available in the latest Canary', 'APIs', ' ', 'createPortal', ' ', 'flushSync', ' ', 'findDOMNode', ' ', 'hydrate', ' ', 'preconnect', ' ', ' - This feature is available in the latest Canary', 'prefetchDNS', ' ', ' - This feature is available in the latest Canary', 'preinit', ' ', ' - This feature is available in the latest Canary', 'preinitModule', ' ', ' - This feature is available in the latest Canary', 'preload', ' ', ' - This feature is available in the latest Canary', 'preloadModule', ' ', ' - This feature is available in the latest Canary', 'render', ' ', 'unmountComponentAtNode', ' ', 'Client APIs', ' ', 'createRoot', ' ', 'hydrateRoot', ' ', 'Server APIs', ' ', 'renderToNodeStream', ' ', 'renderToPipeableStream', ' ', 'renderToReadableStream', ' ', 'renderToStaticMarkup', ' ', 'renderToStaticNodeStream', ' ', 'renderToString', ' ', 'Rules of React', 'Overview', ' ', 'Components and Hooks must be pure', ' ', 'React calls Components and Hooks', ' ', 'Rules of Hooks', ' ', 'Legacy APIs', 'Legacy React APIs', ' ', 'Children', ' ', 'cloneElement', ' ', 'Component', ' ', 'createElement', ' ', 'createFactory', ' ', 'createRef', ' ', 'isValidElement', ' ', 'PureComponent', ' ', 'Is this page useful?', 'API Reference', 'Legacy React APIs', 'createElement', 'createElement', ' lets you create a React element. It serves as an alternative to writing ', 'JSX.', 'const', ' ', 'element', ' = ', 'createElement', '(', 'type', ',', ' ', 'props', ',', ' ', '...', 'children', ')', '\\n', 'Reference ', 'createElement(type, props, ...children)', ' ', 'Usage ', 'Creating an element without JSX ', '\\n', '\\n', 'Reference ', '\\n', 'createElement(type, props, ...children)', ' ', '\\n', 'Call ', 'createElement', ' to create a React element with the given ', 'type', ', ', 'props', ', and ', 'children', '.', '\\n', 'import', ' ', '{', ' ', 'createElement', ' ', '}', ' ', 'from', ' ', \"'react'\", ';', 'function', ' ', 'Greeting', '(', '{', ' ', 'name', ' ', '}', ')', ' ', '{', '  ', 'return', ' ', 'createElement', '(', '    ', \"'h1'\", ',', '    ', '{', ' ', 'className', ':', ' ', \"'greeting'\", ' ', '}', ',', '    ', \"'Hello'\", '  ', ')', ';', '}', '\\n', 'See more examples below.', '\\n', 'Parameters ', '\\n', '\\n', '\\n', 'type', ': The ', 'type', ' argument must be a valid React component type. For example, it could be a tag name string (such as ', \"'div'\", ' or ', \"'span'\", '), or a React component (a function, a class, or a special component like ', 'Fragment', ').', '\\n', '\\n', '\\n', 'props', ': The ', 'props', ' argument must either be an object or ', 'null', '. If you pass ', 'null', ', it will be treated the same as an empty object. React will create an element with props matching the ', 'props', ' you have passed. Note that ', 'ref', ' and ', 'key', ' from your ', 'props', ' object are special and will ', 'not', ' be available as ', 'element.props.ref', ' and ', 'element.props.key', ' on the returned ', 'element', '. They will be available as ', 'element.ref', ' and ', 'element.key', '.', '\\n', '\\n', '\\n', 'optional', ' ', '...children', ': Zero or more child nodes. They can be any React nodes, including React elements, strings, numbers, ', 'portals', ', empty nodes (', 'null', ', ', 'undefined', ', ', 'true', ', and ', 'false', '), and arrays of React nodes.', '\\n', '\\n', '\\n', 'Returns ', '\\n', 'createElement', ' returns a React element object with a few properties:', '\\n', '\\n', 'type', ': The ', 'type', ' you have passed.', '\\n', 'props', ': The ', 'props', ' you have passed except for ', 'ref', ' and ', 'key', '. If the ', 'type', ' is a component with legacy ', 'type.defaultProps', ', then any missing or undefined ', 'props', ' will get the values from ', 'type.defaultProps', '.', '\\n', 'ref', ': The ', 'ref', ' you have passed. If missing, ', 'null', '.', '\\n', 'key', ': The ', 'key', ' you have passed, coerced to a string. If missing, ', 'null', '.', '\\n', '\\n', 'Usually, you’ll return the element from your component or make it a child of another element. Although you may read the element’s properties, it’s best to treat every element as opaque after it’s created, and only render it.', '\\n', 'Caveats ', '\\n', '\\n', '\\n', 'You must ', 'treat React elements and their props as ', 'immutable', ' and never change their contents after creation. In development, React will ', 'freeze', ' the returned element and its ', 'props', ' property shallowly to enforce this.', '\\n', '\\n', '\\n', 'When you use JSX, ', 'you must start a tag with a capital letter to render your own custom component.', ' In other words, ', '<Something />', ' is equivalent to ', 'createElement(Something)', ', but ', '<something />', ' (lowercase) is equivalent to ', \"createElement('something')\", ' (note it’s a string, so it will be treated as a built-in HTML tag).', '\\n', '\\n', '\\n', 'You should only ', 'pass children as multiple arguments to ', 'createElement', ' if they are all statically known,', ' like ', \"createElement('h1', {}, child1, child2, child3)\", '. If your children are dynamic, pass the entire array as the third argument: ', \"createElement('ul', {}, listItems)\", '. This ensures that React will ', 'warn you about missing ', 'key', 's', ' for any dynamic lists. For static lists this is not necessary because they never reorder.', '\\n', '\\n', '\\n', '\\n', 'Usage ', '\\n', 'Creating an element without JSX ', '\\n', 'If you don’t like ', 'JSX', ' or can’t use it in your project, you can use ', 'createElement', ' as an alternative.', '\\n', 'To create an element without JSX, call ', 'createElement', ' with some ', 'type', ', ', 'props', ', and ', 'children', ':', '\\n', 'import', ' ', '{', ' ', 'createElement', ' ', '}', ' ', 'from', ' ', \"'react'\", ';', 'function', ' ', 'Greeting', '(', '{', ' ', 'name', ' ', '}', ')', ' ', '{', '  ', 'return', ' ', 'createElement', '(', '    ', \"'h1'\", ',', '    ', \"{ className: 'greeting' }\", ',', '    ', \"'Hello ',\", '    ', \"createElement('i', null, name),\", '    ', \"'. Welcome!'\", '  ', ')', ';', '}', '\\n', 'The ', 'children', ' are optional, and you can pass as many as you need (the example above has three children). This code will display a ', '<h1>', ' header with a greeting. For comparison, here is the same example rewritten with JSX:', '\\n', 'function', ' ', 'Greeting', '(', '{', ' ', 'name', ' ', '}', ')', ' ', '{', '  ', 'return', ' ', '(', '    ', '<', 'h1', ' ', 'className=\"greeting\"', '>', '      ', 'Hello <i>{name}</i>. Welcome!', '    ', '</', 'h1', '>', '  ', ')', ';', '}', '\\n', 'To render your own React component, pass a function like ', 'Greeting', ' as the ', 'type', ' instead of a string like ', \"'h1'\", ':', '\\n', 'export', ' ', 'default', ' ', 'function', ' ', 'App', '(', ')', ' ', '{', '  ', 'return', ' ', 'createElement', '(', 'Greeting', ',', ' ', \"{ name: 'Taylor' }\", ')', ';', '}', '\\n', 'With JSX, it would look like this:', '\\n', 'export', ' ', 'default', ' ', 'function', ' ', 'App', '(', ')', ' ', '{', '  ', 'return', ' ', '<', 'Greeting', ' ', 'name=\"Taylor\"', ' ', '/>', ';', '}', '\\n', 'Here is a complete example written with ', 'createElement', ':', '\\n', 'App.js', 'App.js', ' Reset', 'Fork', 'import', ' ', '{', ' ', 'createElement', ' ', '}', ' ', 'from', ' ', \"'react'\", ';', '\\n\\n', 'function', ' ', 'Greeting', '(', '{', ' ', 'name', ' ', '}', ')', ' ', '{', '\\n  ', 'return', ' ', 'createElement', '(', '\\n    ', \"'h1'\", ',', '\\n    ', '{', ' ', 'className', ':', ' ', \"'greeting'\", ' ', '}', ',', '\\n    ', \"'Hello '\", ',', '\\n    ', 'createElement', '(', \"'i'\", ',', ' ', 'null', ',', ' ', 'name', ')', ',', '\\n    ', \"'. Welcome!'\", '\\n  ', ')', ';', '\\n', '}', '\\n\\n', 'export', ' ', 'default', ' ', 'function', ' ', 'App', '(', ')', ' ', '{', '\\n  ', 'return', ' ', 'createElement', '(', '\\n    ', 'Greeting', ',', '\\n    ', '{', ' ', 'name', ':', ' ', \"'Taylor'\", ' ', '}', '\\n  ', ')', ';', '\\n', '}', '\\n\\n', 'Show more', '\\n', 'And here is the same example written using JSX:', '\\n', 'App.js', 'App.js', ' Reset', 'Fork', 'function', ' ', 'Greeting', '(', '{', ' ', 'name', ' ', '}', ')', ' ', '{', '\\n  ', 'return', ' ', '(', '\\n    ', '<', 'h1', ' ', 'className', '=', '\"greeting\"', '>', '\\n      Hello ', '<', 'i', '>', '{', 'name', '}', '</', 'i', '>', '. Welcome!\\n    ', '</', 'h1', '>', '\\n  ', ')', ';', '\\n', '}', '\\n\\n', 'export', ' ', 'default', ' ', 'function', ' ', 'App', '(', ')', ' ', '{', '\\n  ', 'return', ' ', '<', 'Greeting', ' ', 'name', '=', '\"Taylor\"', ' ', '/>', ';', '\\n', '}', '\\n\\n', '\\n', 'Both coding styles are fine, so you can use whichever one you prefer for your project. The main benefit of using JSX compared to ', 'createElement', ' is that it’s easy to see which closing tag corresponds to which opening tag.', '\\n', 'Deep Dive', 'What is a React element, exactly? ', 'Show Details', 'An element is a lightweight description of a piece of the user interface. For example, both ', '<Greeting name=\"Taylor\" />', ' and ', \"createElement(Greeting, { name: 'Taylor' })\", ' produce an object like this:', '// Slightly simplified', '{', '  type', ':', ' ', 'Greeting', ',', '  ', 'props', ':', ' ', '{', '    name', ':', ' ', \"'Taylor'\", '  ', '}', ',', '  key', ':', ' ', 'null', ',', '  ', 'ref', ':', ' ', 'null', ',', '}', 'Note that creating this object does not render the ', 'Greeting', ' component or create any DOM elements.', 'A React element is more like a description—an instruction for React to later render the ', 'Greeting', ' component. By returning this object from your ', 'App', ' component, you tell React what to do next.', 'Creating elements is extremely cheap so you don’t need to try to optimize or avoid it.', 'Previous', 'Component', 'Next', 'createFactory', 'How do you like these docs?', 'Take our survey!', '©', '2024', 'Learn React', 'Quick Start', 'Installation', 'Describing the UI', 'Adding Interactivity', 'Managing State', 'Escape Hatches', 'API Reference', 'React APIs', 'React DOM APIs', 'Community', 'Code of Conduct', 'Meet the Team', 'Docs Contributors', 'Acknowledgements', 'More', 'Blog', 'React Native', 'Privacy', 'Terms', 'On this page', 'Overview', 'Reference ', 'createElement(type, props, ...children)', ' ', 'Usage ', 'Creating an element without JSX ', "}