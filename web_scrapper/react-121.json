{"id": 121, "url": "https://react.dev/learn/understanding-your-ui-as-a-tree", "title": "Understanding Your UI as a Tree", "content": "'Understanding Your UI as a Tree – React', 'Stream React Conf on May 15-16.', 'Learn more.', 'React', 'Search', '⌘', 'Ctrl', 'K', 'Learn', 'Reference', 'Community', 'Blog', 'GET STARTED', 'Quick Start', ' ', 'Tutorial: Tic-Tac-Toe', ' ', 'Thinking in React', ' ', 'Installation', ' ', 'Start a New React Project', ' ', 'Add React to an Existing Project', ' ', 'Editor Setup', ' ', 'Using TypeScript', ' ', 'React Developer Tools', ' ', 'LEARN REACT', 'Describing the UI', ' ', 'Your First Component', ' ', 'Importing and Exporting Components', ' ', 'Writing Markup with JSX', ' ', 'JavaScript in JSX with Curly Braces', ' ', 'Passing Props to a Component', ' ', 'Conditional Rendering', ' ', 'Rendering Lists', ' ', 'Keeping Components Pure', ' ', 'Your UI as a Tree', ' ', 'Adding Interactivity', ' ', 'Responding to Events', ' ', \"State: A Component's Memory\", ' ', 'Render and Commit', ' ', 'State as a Snapshot', ' ', 'Queueing a Series of State Updates', ' ', 'Updating Objects in State', ' ', 'Updating Arrays in State', ' ', 'Managing State', ' ', 'Reacting to Input with State', ' ', 'Choosing the State Structure', ' ', 'Sharing State Between Components', ' ', 'Preserving and Resetting State', ' ', 'Extracting State Logic into a Reducer', ' ', 'Passing Data Deeply with Context', ' ', 'Scaling Up with Reducer and Context', ' ', 'Escape Hatches', ' ', 'Referencing Values with Refs', ' ', 'Manipulating the DOM with Refs', ' ', 'Synchronizing with Effects', ' ', 'You Might Not Need an Effect', ' ', 'Lifecycle of Reactive Effects', ' ', 'Separating Events from Effects', ' ', 'Removing Effect Dependencies', ' ', 'Reusing Logic with Custom Hooks', ' ', 'Is this page useful?', 'Learn React', 'Describing the UI', 'Understanding Your UI as a Tree', 'Your React app is taking shape with many components being nested within each other. How does React keep track of your app’s component structure?', 'React, and many other UI libraries, model UI as a tree. Thinking of your app as a tree is useful for understanding the relationship between components. This understanding will help you debug future concepts like performance and state management.', '\\n', 'You will learn', '\\n', 'How React “sees” component structures', '\\n', 'What a render tree is and what it is useful for', '\\n', 'What a module dependency tree is and what it is useful for', '\\n', '\\n', 'Your UI as a tree ', '\\n', 'Trees are a relationship model between items and UI is often represented using tree structures. For example, browsers use tree structures to model HTML (', 'DOM', ') and CSS (', 'CSSOM', '). Mobile platforms also use trees to represent their view hierarchy.', '\\n', 'React creates a UI tree from your components. In this example, the UI tree is then used to render to the DOM.', '\\n', 'Like browsers and mobile platforms, React also uses tree structures to manage and model the relationship between components in a React app. These trees are useful tools to understand how data flows through a React app and how to optimize rendering and app size.', '\\n', 'The Render Tree ', '\\n', 'A major feature of components is the ability to compose components of other components. As we ', 'nest components', ', we have the concept of parent and child components, where each parent component may itself be a child of another component.', '\\n', 'When we render a React app, we can model this relationship in a tree, known as the render tree.', '\\n', 'Here is a React app that renders inspirational quotes.', '\\n', 'App.js', 'FancyText.js', 'InspirationGenerator.js', 'Copyright.js', 'quotes.js', 'App.js', ' Reset', 'Fork', 'import', ' ', 'FancyText', ' ', 'from', ' ', \"'./FancyText'\", ';', '\\n', 'import', ' ', 'InspirationGenerator', ' ', 'from', ' ', \"'./InspirationGenerator'\", ';', '\\n', 'import', ' ', 'Copyright', ' ', 'from', ' ', \"'./Copyright'\", ';', '\\n\\n', 'export', ' ', 'default', ' ', 'function', ' ', 'App', '(', ')', ' ', '{', '\\n  ', 'return', ' ', '(', '\\n    ', '<', '>', '\\n      ', '<', 'FancyText', ' ', 'title', ' ', 'text', '=', '\"Get Inspired App\"', ' ', '/>', '\\n      ', '<', 'InspirationGenerator', '>', '\\n        ', '<', 'Copyright', ' ', 'year', '=', '{', '2004', '}', ' ', '/>', '\\n      ', '</', 'InspirationGenerator', '>', '\\n    ', '</', '>', '\\n  ', ')', ';', '\\n', '}', '\\n\\n', '\\n', 'React creates a ', 'render tree', ', a UI tree, composed of the rendered components.', '\\n', 'From the example app, we can construct the above render tree.', '\\n', 'The tree is composed of nodes, each of which represents a component. ', 'App', ', ', 'FancyText', ', ', 'Copyright', ', to name a few, are all nodes in our tree.', '\\n', 'The root node in a React render tree is the ', 'root component', ' of the app. In this case, the root component is ', 'App', ' and it is the first component React renders. Each arrow in the tree points from a parent component to a child component.', '\\n', 'Deep Dive', 'Where are the HTML tags in the render tree? ', 'Show Details', 'You’ll notice in the above render tree, there is no mention of the HTML tags that each component renders. This is because the render tree is only composed of React ', 'components', '.', 'React, as a UI framework, is platform agnostic. On react.dev, we showcase examples that render to the web, which uses HTML markup as its UI primitives. But a React app could just as likely render to a mobile or desktop platform, which may use different UI primitives like ', 'UIView', ' or ', 'FrameworkElement', '.', 'These platform UI primitives are not a part of React. React render trees can provide insight to our React app regardless of what platform your app renders to.', '\\n', 'A render tree represents a single render pass of a React application. With ', 'conditional rendering', ', a parent component may render different children depending on the data passed.', '\\n', 'We can update the app to conditionally render either an inspirational quote or color.', '\\n', 'App.js', 'FancyText.js', 'Color.js', 'InspirationGenerator.js', 'Copyright.js', 'inspirations.js', 'App.js', ' Reset', 'Fork', 'import', ' ', 'FancyText', ' ', 'from', ' ', \"'./FancyText'\", ';', '\\n', 'import', ' ', 'InspirationGenerator', ' ', 'from', ' ', \"'./InspirationGenerator'\", ';', '\\n', 'import', ' ', 'Copyright', ' ', 'from', ' ', \"'./Copyright'\", ';', '\\n\\n', 'export', ' ', 'default', ' ', 'function', ' ', 'App', '(', ')', ' ', '{', '\\n  ', 'return', ' ', '(', '\\n    ', '<', '>', '\\n      ', '<', 'FancyText', ' ', 'title', ' ', 'text', '=', '\"Get Inspired App\"', ' ', '/>', '\\n      ', '<', 'InspirationGenerator', '>', '\\n        ', '<', 'Copyright', ' ', 'year', '=', '{', '2004', '}', ' ', '/>', '\\n      ', '</', 'InspirationGenerator', '>', '\\n    ', '</', '>', '\\n  ', ')', ';', '\\n', '}', '\\n\\n', '\\n', 'With conditional rendering, across different renders, the render tree may render different components.', '\\n', 'In this example, depending on what ', 'inspiration.type', ' is, we may render ', '<FancyText>', ' or ', '<Color>', '. The render tree may be different for each render pass.', '\\n', 'Although render trees may differ across render passes, these trees are generally helpful for identifying what the ', 'top-level', ' and ', 'leaf components', ' are in a React app. Top-level components are the components nearest to the root component and affect the rendering performance of all the components beneath them and often contain the most complexity. Leaf components are near the bottom of the tree and have no child components and are often frequently re-rendered.', '\\n', 'Identifying these categories of components are useful for understanding data flow and performance of your app.', '\\n', 'The Module Dependency Tree ', '\\n', 'Another relationship in a React app that can be modeled with a tree are an app’s module dependencies. As we ', 'break up our components', ' and logic into separate files, we create ', 'JS modules', ' where we may export components, functions, or constants.', '\\n', 'Each node in a module dependency tree is a module and each branch represents an ', 'import', ' statement in that module.', '\\n', 'If we take the previous Inspirations app, we can build a module dependency tree, or dependency tree for short.', '\\n', 'The module dependency tree for the Inspirations app.', '\\n', 'The root node of the tree is the root module, also known as the entrypoint file. It often is the module that contains the root component.', '\\n', 'Comparing to the render tree of the same app, there are similar structures but some notable differences:', '\\n', '\\n', 'The nodes that make-up the tree represent modules, not components.', '\\n', 'Non-component modules, like ', 'inspirations.js', ', are also represented in this tree. The render tree only encapsulates components.', '\\n', 'Copyright.js', ' appears under ', 'App.js', ' but in the render tree, ', 'Copyright', ', the component, appears as a child of ', 'InspirationGenerator', '. This is because ', 'InspirationGenerator', ' accepts JSX as ', 'children props', ', so it renders ', 'Copyright', ' as a child component but does not import the module.', '\\n', '\\n', 'Dependency trees are useful to determine what modules are necessary to run your React app. When building a React app for production, there is typically a build step that will bundle all the necessary JavaScript to ship to the client. The tool responsible for this is called a ', 'bundler', ', and bundlers will use the dependency tree to determine what modules should be included.', '\\n', 'As your app grows, often the bundle size does too. Large bundle sizes are expensive for a client to download and run. Large bundle sizes can delay the time for your UI to get drawn. Getting a sense of your app’s dependency tree may help with debugging these issues.', '\\n', 'Recap', '\\n', 'Trees are a common way to represent the relationship between entities. They are often used to model UI.', '\\n', 'Render trees represent the nested relationship between React components across a single render.', '\\n', 'With conditional rendering, the render tree may change across different renders. With different prop values, components may render different children components.', '\\n', 'Render trees help identify what the top-level and leaf components are. Top-level components affect the rendering performance of all components beneath them and leaf components are often re-rendered frequently. Identifying them is useful for understanding and debugging rendering performance.', '\\n', 'Dependency trees represent the module dependencies in a React app.', '\\n', 'Dependency trees are used by build tools to bundle the necessary code to ship an app.', '\\n', 'Dependency trees are useful for debugging large bundle sizes that slow time to paint and expose opportunities for optimizing what code is bundled.', '\\n', 'Previous', 'Keeping Components Pure', 'Next', 'Adding Interactivity', 'How do you like these docs?', 'Take our survey!', '©', '2024', 'Learn React', 'Quick Start', 'Installation', 'Describing the UI', 'Adding Interactivity', 'Managing State', 'Escape Hatches', 'API Reference', 'React APIs', 'React DOM APIs', 'Community', 'Code of Conduct', 'Meet the Team', 'Docs Contributors', 'Acknowledgements', 'More', 'Blog', 'React Native', 'Privacy', 'Terms', 'On this page', 'Overview', 'Your UI as a tree ', 'The Render Tree ', 'The Module Dependency Tree ', 'Recap', "}