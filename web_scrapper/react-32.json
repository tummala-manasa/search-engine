{"id": 32, "url": "https://react.dev/reference/react/Children", "title": "Children", "content": "'Children – React', 'Stream React Conf on May 15-16.', 'Learn more.', 'React', 'Search', '⌘', 'Ctrl', 'K', 'Learn', 'Reference', 'Community', 'Blog', 'react@18.2.0', 'Overview', ' ', 'Hooks', ' ', 'use', ' ', ' - This feature is available in the latest Canary', 'useCallback', ' ', 'useContext', ' ', 'useDebugValue', ' ', 'useDeferredValue', ' ', 'useEffect', ' ', 'useId', ' ', 'useImperativeHandle', ' ', 'useInsertionEffect', ' ', 'useLayoutEffect', ' ', 'useMemo', ' ', 'useOptimistic', ' ', ' - This feature is available in the latest Canary', 'useReducer', ' ', 'useRef', ' ', 'useState', ' ', 'useSyncExternalStore', ' ', 'useTransition', ' ', 'Components', ' ', '<Fragment> (<>)', ' ', '<Profiler>', ' ', '<StrictMode>', ' ', '<Suspense>', ' ', 'APIs', ' ', 'cache', ' ', ' - This feature is available in the latest Canary', 'createContext', ' ', 'forwardRef', ' ', 'lazy', ' ', 'memo', ' ', 'startTransition', ' ', 'experimental_taintObjectReference', ' ', ' - This feature is available in the latest Canary', 'experimental_taintUniqueValue', ' ', ' - This feature is available in the latest Canary', 'Directives', ' ', ' - This feature is available in the latest Canary', \"'use client'\", ' ', ' - This feature is available in the latest Canary', \"'use server'\", ' ', ' - This feature is available in the latest Canary', 'react-dom@18.2.0', 'Hooks', ' ', 'useFormState', ' ', ' - This feature is available in the latest Canary', 'useFormStatus', ' ', ' - This feature is available in the latest Canary', 'Components', ' ', 'Common (e.g. <div>)', ' ', '<form>', ' ', ' - This feature is available in the latest Canary', '<input>', ' ', '<option>', ' ', '<progress>', ' ', '<select>', ' ', '<textarea>', ' ', '<link>', ' ', ' - This feature is available in the latest Canary', '<meta>', ' ', ' - This feature is available in the latest Canary', '<script>', ' ', ' - This feature is available in the latest Canary', '<style>', ' ', ' - This feature is available in the latest Canary', '<title>', ' ', ' - This feature is available in the latest Canary', 'APIs', ' ', 'createPortal', ' ', 'flushSync', ' ', 'findDOMNode', ' ', 'hydrate', ' ', 'preconnect', ' ', ' - This feature is available in the latest Canary', 'prefetchDNS', ' ', ' - This feature is available in the latest Canary', 'preinit', ' ', ' - This feature is available in the latest Canary', 'preinitModule', ' ', ' - This feature is available in the latest Canary', 'preload', ' ', ' - This feature is available in the latest Canary', 'preloadModule', ' ', ' - This feature is available in the latest Canary', 'render', ' ', 'unmountComponentAtNode', ' ', 'Client APIs', ' ', 'createRoot', ' ', 'hydrateRoot', ' ', 'Server APIs', ' ', 'renderToNodeStream', ' ', 'renderToPipeableStream', ' ', 'renderToReadableStream', ' ', 'renderToStaticMarkup', ' ', 'renderToStaticNodeStream', ' ', 'renderToString', ' ', 'Rules of React', 'Overview', ' ', 'Components and Hooks must be pure', ' ', 'React calls Components and Hooks', ' ', 'Rules of Hooks', ' ', 'Legacy APIs', 'Legacy React APIs', ' ', 'Children', ' ', 'cloneElement', ' ', 'Component', ' ', 'createElement', ' ', 'createFactory', ' ', 'createRef', ' ', 'isValidElement', ' ', 'PureComponent', ' ', 'Is this page useful?', 'API Reference', 'Legacy React APIs', 'Children', 'Pitfall', 'Using ', 'Children', ' is uncommon and can lead to fragile code. ', 'See common alternatives.', '\\n', 'Children', ' lets you manipulate and transform the JSX you received as the ', 'children', ' prop.', 'const', ' ', 'mappedChildren', ' = ', 'Children', '.', 'map', '(', 'children', ',', ' ', 'child', ' ', '=>', '  ', '<', 'div', ' ', 'className', '=', '\"Row\"', '>', '    ', '{', 'child', '}', '  ', '</', 'div', '>', ')', ';', '\\n', 'Reference ', 'Children.count(children)', ' ', 'Children.forEach(children, fn, thisArg?)', ' ', 'Children.map(children, fn, thisArg?)', ' ', 'Children.only(children)', ' ', 'Children.toArray(children)', ' ', 'Usage ', 'Transforming children ', 'Running some code for each child ', 'Counting children ', 'Converting children to an array ', 'Alternatives ', 'Exposing multiple components ', 'Accepting an array of objects as a prop ', 'Calling a render prop to customize rendering ', 'Troubleshooting ', 'I pass a custom component, but the ', 'Children', ' methods don’t show its render result ', '\\n', '\\n', 'Reference ', '\\n', 'Children.count(children)', ' ', '\\n', 'Call ', 'Children.count(children)', ' to count the number of children in the ', 'children', ' data structure.', '\\n', 'import', ' ', '{', ' ', 'Children', ' ', '}', ' ', 'from', ' ', \"'react'\", ';', 'function', ' ', 'RowList', '(', '{', ' ', 'children', ' ', '}', ')', ' ', '{', '  ', 'return', ' ', '(', '    ', '<', '>', '      ', '<', 'h1', '>', 'Total rows: ', '{', 'Children', '.', 'count', '(', 'children', ')', '}', '</', 'h1', '>', '      ...', '    ', '</', '>', '  ', ')', ';', '}', '\\n', 'See more examples below.', '\\n', 'Parameters ', '\\n', '\\n', 'children', ': The value of the ', 'children', ' prop', ' received by your component.', '\\n', '\\n', 'Returns ', '\\n', 'The number of nodes inside these ', 'children', '.', '\\n', 'Caveats ', '\\n', '\\n', 'Empty nodes (', 'null', ', ', 'undefined', ', and Booleans), strings, numbers, and ', 'React elements', ' count as individual nodes. Arrays don’t count as individual nodes, but their children do. ', 'The traversal does not go deeper than React elements:', ' they don’t get rendered, and their children aren’t traversed. ', 'Fragments', ' don’t get traversed.', '\\n', '\\n', '\\n', 'Children.forEach(children, fn, thisArg?)', ' ', '\\n', 'Call ', 'Children.forEach(children, fn, thisArg?)', ' to run some code for each child in the ', 'children', ' data structure.', '\\n', 'import', ' ', '{', ' ', 'Children', ' ', '}', ' ', 'from', ' ', \"'react'\", ';', 'function', ' ', 'SeparatorList', '(', '{', ' ', 'children', ' ', '}', ')', ' ', '{', '  ', 'const', ' ', 'result', ' = ', '[', ']', ';', '  ', 'Children', '.', 'forEach', '(', 'children', ',', ' ', '(', 'child', ',', ' ', 'index', ')', ' ', '=>', ' ', '{', '    ', 'result', '.', 'push', '(', 'child', ')', ';', '    ', 'result', '.', 'push', '(', '<', 'hr', ' ', 'key', '=', '{', 'index', '}', ' ', '/>', ')', ';', '  ', '}', ')', ';', '  ', '// ...', '\\n', 'See more examples below.', '\\n', 'Parameters ', '\\n', '\\n', 'children', ': The value of the ', 'children', ' prop', ' received by your component.', '\\n', 'fn', ': The function you want to run for each child, similar to the ', 'array ', 'forEach', ' method', ' callback. It will be called with the child as the first argument and its index as the second argument. The index starts at ', '0', ' and increments on each call.', '\\n', 'optional', ' ', 'thisArg', ': The ', 'this', ' value', ' with which the ', 'fn', ' function should be called. If omitted, it’s ', 'undefined', '.', '\\n', '\\n', 'Returns ', '\\n', 'Children.forEach', ' returns ', 'undefined', '.', '\\n', 'Caveats ', '\\n', '\\n', 'Empty nodes (', 'null', ', ', 'undefined', ', and Booleans), strings, numbers, and ', 'React elements', ' count as individual nodes. Arrays don’t count as individual nodes, but their children do. ', 'The traversal does not go deeper than React elements:', ' they don’t get rendered, and their children aren’t traversed. ', 'Fragments', ' don’t get traversed.', '\\n', '\\n', '\\n', 'Children.map(children, fn, thisArg?)', ' ', '\\n', 'Call ', 'Children.map(children, fn, thisArg?)', ' to map or transform each child in the ', 'children', ' data structure.', '\\n', 'import', ' ', '{', ' ', 'Children', ' ', '}', ' ', 'from', ' ', \"'react'\", ';', 'function', ' ', 'RowList', '(', '{', ' ', 'children', ' ', '}', ')', ' ', '{', '  ', 'return', ' ', '(', '    ', '<', 'div', ' ', 'className', '=', '\"RowList\"', '>', '      ', '{', 'Children', '.', 'map', '(', 'children', ',', ' ', 'child', ' ', '=>', '        ', '<', 'div', ' ', 'className', '=', '\"Row\"', '>', '          ', '{', 'child', '}', '        ', '</', 'div', '>', '      ', ')', '}', '    ', '</', 'div', '>', '  ', ')', ';', '}', '\\n', 'See more examples below.', '\\n', 'Parameters ', '\\n', '\\n', 'children', ': The value of the ', 'children', ' prop', ' received by your component.', '\\n', 'fn', ': The mapping function, similar to the ', 'array ', 'map', ' method', ' callback. It will be called with the child as the first argument and its index as the second argument. The index starts at ', '0', ' and increments on each call. You need to return a React node from this function. This may be an empty node (', 'null', ', ', 'undefined', ', or a Boolean), a string, a number, a React element, or an array of other React nodes.', '\\n', 'optional', ' ', 'thisArg', ': The ', 'this', ' value', ' with which the ', 'fn', ' function should be called. If omitted, it’s ', 'undefined', '.', '\\n', '\\n', 'Returns ', '\\n', 'If ', 'children', ' is ', 'null', ' or ', 'undefined', ', returns the same value.', '\\n', 'Otherwise, returns a flat array consisting of the nodes you’ve returned from the ', 'fn', ' function. The returned array will contain all nodes you returned except for ', 'null', ' and ', 'undefined', '.', '\\n', 'Caveats ', '\\n', '\\n', '\\n', 'Empty nodes (', 'null', ', ', 'undefined', ', and Booleans), strings, numbers, and ', 'React elements', ' count as individual nodes. Arrays don’t count as individual nodes, but their children do. ', 'The traversal does not go deeper than React elements:', ' they don’t get rendered, and their children aren’t traversed. ', 'Fragments', ' don’t get traversed.', '\\n', '\\n', '\\n', 'If you return an element or an array of elements with keys from ', 'fn', ', ', 'the returned elements’ keys will be automatically combined with the key of the corresponding original item from ', 'children', '.', ' When you return multiple elements from ', 'fn', ' in an array, their keys only need to be unique locally amongst each other.', '\\n', '\\n', '\\n', '\\n', 'Children.only(children)', ' ', '\\n', 'Call ', 'Children.only(children)', ' to assert that ', 'children', ' represent a single React element.', '\\n', 'function', ' ', 'Box', '(', '{', ' ', 'children', ' ', '}', ')', ' ', '{', '  ', 'const', ' ', 'element', ' = ', 'Children', '.', 'only', '(', 'children', ')', ';', '  ', '// ...', '\\n', 'Parameters ', '\\n', '\\n', 'children', ': The value of the ', 'children', ' prop', ' received by your component.', '\\n', '\\n', 'Returns ', '\\n', 'If ', 'children', ' ', 'is a valid element,', ' returns that element.', '\\n', 'Otherwise, throws an error.', '\\n', 'Caveats ', '\\n', '\\n', 'This method always ', 'throws if you pass an array (such as the return value of ', 'Children.map', ') as ', 'children', '.', ' In other words, it enforces that ', 'children', ' is a single React element, not that it’s an array with a single element.', '\\n', '\\n', '\\n', 'Children.toArray(children)', ' ', '\\n', 'Call ', 'Children.toArray(children)', ' to create an array out of the ', 'children', ' data structure.', '\\n', 'import', ' ', '{', ' ', 'Children', ' ', '}', ' ', 'from', ' ', \"'react'\", ';', 'export', ' ', 'default', ' ', 'function', ' ', 'ReversedList', '(', '{', ' ', 'children', ' ', '}', ')', ' ', '{', '  ', 'const', ' ', 'result', ' = ', 'Children', '.', 'toArray', '(', 'children', ')', ';', '  ', 'result', '.', 'reverse', '(', ')', ';', '  ', '// ...', '\\n', 'Parameters ', '\\n', '\\n', 'children', ': The value of the ', 'children', ' prop', ' received by your component.', '\\n', '\\n', 'Returns ', '\\n', 'Returns a flat array of elements in ', 'children', '.', '\\n', 'Caveats ', '\\n', '\\n', 'Empty nodes (', 'null', ', ', 'undefined', ', and Booleans) will be omitted in the returned array. ', 'The returned elements’ keys will be calculated from the original elements’ keys and their level of nesting and position.', ' This ensures that flattening the array does not introduce changes in behavior.', '\\n', '\\n', '\\n', 'Usage ', '\\n', 'Transforming children ', '\\n', 'To transform the children JSX that your component ', 'receives as the ', 'children', ' prop,', ' call ', 'Children.map', ':', '\\n', 'import', ' ', '{', ' ', 'Children', ' ', '}', ' ', 'from', ' ', \"'react'\", ';', 'function', ' ', 'RowList', '(', '{', ' ', 'children', ' ', '}', ')', ' ', '{', '  ', 'return', ' ', '(', '    ', '<', 'div', ' ', 'className', '=', '\"RowList\"', '>', '      ', '{', 'Children', '.', 'map', '(', 'children', ',', ' ', 'child', ' ', '=>', '        ', '<', 'div', ' ', 'className', '=', '\"Row\"', '>', '          ', '{', 'child', '}', '        ', '</', 'div', '>', '      ', ')', '}', '    ', '</', 'div', '>', '  ', ')', ';', '}', '\\n', 'In the example above, the ', 'RowList', ' wraps every child it receives into a ', '<div className=\"Row\">', ' container. For example, let’s say the parent component passes three ', '<p>', ' tags as the ', 'children', ' prop to ', 'RowList', ':', '\\n', '<', 'RowList', '>', '  ', '<', 'p', '>', 'This is the first item.', '</', 'p', '>', '  ', '<', 'p', '>', 'This is the second item.', '</', 'p', '>', '  ', '<', 'p', '>', 'This is the third item.', '</', 'p', '>', '</', 'RowList', '>', '\\n', 'Then, with the ', 'RowList', ' implementation above, the final rendered result will look like this:', '\\n', '<', 'div', ' ', 'className', '=', '\"RowList\"', '>', '  ', '<', 'div', ' ', 'className', '=', '\"Row\"', '>', '    ', '<', 'p', '>', 'This is the first item.', '</', 'p', '>', '  ', '</', 'div', '>', '  ', '<', 'div', ' ', 'className', '=', '\"Row\"', '>', '    ', '<', 'p', '>', 'This is the second item.', '</', 'p', '>', '  ', '</', 'div', '>', '  ', '<', 'div', ' ', 'className', '=', '\"Row\"', '>', '    ', '<', 'p', '>', 'This is the third item.', '</', 'p', '>', '  ', '</', 'div', '>', '</', 'div', '>', '\\n', 'Children.map', ' is similar to ', 'to transforming arrays with ', 'map()', '.', ' The difference is that the ', 'children', ' data structure is considered ', 'opaque.', ' This means that even if it’s sometimes an array, you should not assume it’s an array or any other particular data type. This is why you should use ', 'Children.map', ' if you need to transform it.', '\\n', 'App.js', 'RowList.js', 'RowList.js', ' Reset', 'Fork', 'import', ' ', '{', ' ', 'Children', ' ', '}', ' ', 'from', ' ', \"'react'\", ';', '\\n\\n', 'export', ' ', 'default', ' ', 'function', ' ', 'RowList', '(', '{', ' ', 'children', ' ', '}', ')', ' ', '{', '\\n  ', 'return', ' ', '(', '\\n    ', '<', 'div', ' ', 'className', '=', '\"RowList\"', '>', '\\n      ', '{', 'Children', '.', 'map', '(', 'children', ',', ' ', 'child', ' ', '=>', '\\n        ', '<', 'div', ' ', 'className', '=', '\"Row\"', '>', '\\n          ', '{', 'child', '}', '\\n        ', '</', 'div', '>', '\\n      ', ')', '}', '\\n    ', '</', 'div', '>', '\\n  ', ')', ';', '\\n', '}', '\\n\\n', '\\n', 'Deep Dive', 'Why is the children prop not always an array? ', 'Show Details', 'In React, the ', 'children', ' prop is considered an ', 'opaque', ' data structure. This means that you shouldn’t rely on how it is structured. To transform, filter, or count children, you should use the ', 'Children', ' methods.', 'In practice, the ', 'children', ' data structure is often represented as an array internally. However, if there is only a single child, then React won’t create an extra array since this would lead to unnecessary memory overhead. As long as you use the ', 'Children', ' methods instead of directly introspecting the ', 'children', ' prop, your code will not break even if React changes how the data structure is actually implemented.', 'Even when ', 'children', ' is an array, ', 'Children.map', ' has useful special behavior. For example, ', 'Children.map', ' combines the ', 'keys', ' on the returned elements with the keys on the ', 'children', ' you’ve passed to it. This ensures the original JSX children don’t “lose” keys even if they get wrapped like in the example above.', '\\n', 'Pitfall', 'The ', 'children', ' data structure ', 'does not include rendered output', ' of the components you pass as JSX. In the example below, the ', 'children', ' received by the ', 'RowList', ' only contains two items rather than three:', '\\n', '<p>This is the first item.</p>', '\\n', '<MoreRows />', '\\n', 'This is why only two row wrappers are generated in this example:', 'App.js', 'RowList.js', 'App.js', ' Reset', 'Fork', 'import', ' ', 'RowList', ' ', 'from', ' ', \"'./RowList.js'\", ';', '\\n\\n', 'export', ' ', 'default', ' ', 'function', ' ', 'App', '(', ')', ' ', '{', '\\n  ', 'return', ' ', '(', '\\n    ', '<', 'RowList', '>', '\\n      ', '<', 'p', '>', 'This is the first item.', '</', 'p', '>', '\\n      ', '<', 'MoreRows', ' ', '/>', '\\n    ', '</', 'RowList', '>', '\\n  ', ')', ';', '\\n', '}', '\\n\\n', 'function', ' ', 'MoreRows', '(', ')', ' ', '{', '\\n  ', 'return', ' ', '(', '\\n    ', '<', '>', '\\n      ', '<', 'p', '>', 'This is the second item.', '</', 'p', '>', '\\n      ', '<', 'p', '>', 'This is the third item.', '</', 'p', '>', '\\n    ', '</', '>', '\\n  ', ')', ';', '\\n', '}', '\\n\\n', 'Show more', 'There is no way to get the rendered output of an inner component', ' like ', '<MoreRows />', ' when manipulating ', 'children', '. This is why ', 'it’s usually better to use one of the alternative solutions.', '\\n', '\\n', 'Running some code for each child ', '\\n', 'Call ', 'Children.forEach', ' to iterate over each child in the ', 'children', ' data structure. It does not return any value and is similar to the ', 'array ', 'forEach', ' method.', ' You can use it to run custom logic like constructing your own array.', '\\n', 'App.js', 'SeparatorList.js', 'SeparatorList.js', ' Reset', 'Fork', 'import', ' ', '{', ' ', 'Children', ' ', '}', ' ', 'from', ' ', \"'react'\", ';', '\\n\\n', 'export', ' ', 'default', ' ', 'function', ' ', 'SeparatorList', '(', '{', ' ', 'children', ' ', '}', ')', ' ', '{', '\\n  ', 'const', ' ', 'result', ' = ', '[', ']', ';', '\\n  ', 'Children', '.', 'forEach', '(', 'children', ',', ' ', '(', 'child', ',', ' ', 'index', ')', ' ', '=>', ' ', '{', '\\n    ', 'result', '.', 'push', '(', 'child', ')', ';', '\\n    ', 'result', '.', 'push', '(', '<', 'hr', ' ', 'key', '=', '{', 'index', '}', ' ', '/>', ')', ';', '\\n  ', '}', ')', ';', '\\n  ', 'result', '.', 'pop', '(', ')', ';', ' ', '// Remove the last separator', '\\n  ', 'return', ' ', 'result', ';', '\\n', '}', '\\n\\n', '\\n', 'Pitfall', 'As mentioned earlier, there is no way to get the rendered output of an inner component when manipulating ', 'children', '. This is why ', 'it’s usually better to use one of the alternative solutions.', '\\n', '\\n', 'Counting children ', '\\n', 'Call ', 'Children.count(children)', ' to calculate the number of children.', '\\n', 'App.js', 'RowList.js', 'RowList.js', ' Reset', 'Fork', 'import', ' ', '{', ' ', 'Children', ' ', '}', ' ', 'from', ' ', \"'react'\", ';', '\\n\\n', 'export', ' ', 'default', ' ', 'function', ' ', 'RowList', '(', '{', ' ', 'children', ' ', '}', ')', ' ', '{', '\\n  ', 'return', ' ', '(', '\\n    ', '<', 'div', ' ', 'className', '=', '\"RowList\"', '>', '\\n      ', '<', 'h1', ' ', 'className', '=', '\"RowListHeader\"', '>', '\\n        Total rows: ', '{', 'Children', '.', 'count', '(', 'children', ')', '}', '\\n      ', '</', 'h1', '>', '\\n      ', '{', 'Children', '.', 'map', '(', 'children', ',', ' ', 'child', ' ', '=>', '\\n        ', '<', 'div', ' ', 'className', '=', '\"Row\"', '>', '\\n          ', '{', 'child', '}', '\\n        ', '</', 'div', '>', '\\n      ', ')', '}', '\\n    ', '</', 'div', '>', '\\n  ', ')', ';', '\\n', '}', '\\n\\n', 'Show more', '\\n', 'Pitfall', 'As mentioned earlier, there is no way to get the rendered output of an inner component when manipulating ', 'children', '. This is why ', 'it’s usually better to use one of the alternative solutions.', '\\n', '\\n', 'Converting children to an array ', '\\n', 'Call ', 'Children.toArray(children)', ' to turn the ', 'children', ' data structure into a regular JavaScript array. This lets you manipulate the array with built-in array methods like ', 'filter', ', ', 'sort', ', or ', 'reverse', '.', '\\n', 'App.js', 'ReversedList.js', 'ReversedList.js', ' Reset', 'Fork', 'import', ' ', '{', ' ', 'Children', ' ', '}', ' ', 'from', ' ', \"'react'\", ';', '\\n\\n', 'export', ' ', 'default', ' ', 'function', ' ', 'ReversedList', '(', '{', ' ', 'children', ' ', '}', ')', ' ', '{', '\\n  ', 'const', ' ', 'result', ' = ', 'Children', '.', 'toArray', '(', 'children', ')', ';', '\\n  ', 'result', '.', 'reverse', '(', ')', ';', '\\n  ', 'return', ' ', 'result', ';', '\\n', '}', '\\n\\n', '\\n', 'Pitfall', 'As mentioned earlier, there is no way to get the rendered output of an inner component when manipulating ', 'children', '. This is why ', 'it’s usually better to use one of the alternative solutions.', '\\n', '\\n', 'Alternatives ', '\\n', 'Note', 'This section describes alternatives to the ', 'Children', ' API (with capital ', 'C', ') that’s imported like this:', 'import', ' ', '{', ' ', 'Children', ' ', '}', ' ', 'from', ' ', \"'react'\", ';', 'Don’t confuse it with ', 'using the ', 'children', ' prop', ' (lowercase ', 'c', '), which is good and encouraged.', '\\n', 'Exposing multiple components ', '\\n', 'Manipulating children with the ', 'Children', ' methods often leads to fragile code. When you pass children to a component in JSX, you don’t usually expect the component to manipulate or transform the individual children.', '\\n', 'When you can, try to avoid using the ', 'Children', ' methods. For example, if you want every child of ', 'RowList', ' to be wrapped in ', '<div className=\"Row\">', ', export a ', 'Row', ' component, and manually wrap every row into it like this:', '\\n', 'App.js', 'RowList.js', 'App.js', ' Reset', 'Fork', 'import', ' ', '{', ' ', 'RowList', ',', ' ', 'Row', ' ', '}', ' ', 'from', ' ', \"'./RowList.js'\", ';', '\\n\\n', 'export', ' ', 'default', ' ', 'function', ' ', 'App', '(', ')', ' ', '{', '\\n  ', 'return', ' ', '(', '\\n    ', '<', 'RowList', '>', '\\n      ', '<', 'Row', '>', '\\n        ', '<', 'p', '>', 'This is the first item.', '</', 'p', '>', '\\n      ', '</', 'Row', '>', '\\n      ', '<', 'Row', '>', '\\n        ', '<', 'p', '>', 'This is the second item.', '</', 'p', '>', '\\n      ', '</', 'Row', '>', '\\n      ', '<', 'Row', '>', '\\n        ', '<', 'p', '>', 'This is the third item.', '</', 'p', '>', '\\n      ', '</', 'Row', '>', '\\n    ', '</', 'RowList', '>', '\\n  ', ')', ';', '\\n', '}', '\\n\\n', 'Show more', '\\n', 'Unlike using ', 'Children.map', ', this approach does not wrap every child automatically. ', 'However, this approach has a significant benefit compared to the ', 'earlier example with ', 'Children.map', ' because it works even if you keep extracting more components.', ' For example, it still works if you extract your own ', 'MoreRows', ' component:', '\\n', 'App.js', 'RowList.js', 'App.js', ' Reset', 'Fork', 'import', ' ', '{', ' ', 'RowList', ',', ' ', 'Row', ' ', '}', ' ', 'from', ' ', \"'./RowList.js'\", ';', '\\n\\n', 'export', ' ', 'default', ' ', 'function', ' ', 'App', '(', ')', ' ', '{', '\\n  ', 'return', ' ', '(', '\\n    ', '<', 'RowList', '>', '\\n      ', '<', 'Row', '>', '\\n        ', '<', 'p', '>', 'This is the first item.', '</', 'p', '>', '\\n      ', '</', 'Row', '>', '\\n      ', '<', 'MoreRows', ' ', '/>', '\\n    ', '</', 'RowList', '>', '\\n  ', ')', ';', '\\n', '}', '\\n\\n', 'function', ' ', 'MoreRows', '(', ')', ' ', '{', '\\n  ', 'return', ' ', '(', '\\n    ', '<', '>', '\\n      ', '<', 'Row', '>', '\\n        ', '<', 'p', '>', 'This is the second item.', '</', 'p', '>', '\\n      ', '</', 'Row', '>', '\\n      ', '<', 'Row', '>', '\\n        ', '<', 'p', '>', 'This is the third item.', '</', 'p', '>', '\\n      ', '</', 'Row', '>', '\\n    ', '</', '>', '\\n  ', ')', ';', '\\n', '}', '\\n\\n', 'Show more', '\\n', 'This wouldn’t work with ', 'Children.map', ' because it would “see” ', '<MoreRows />', ' as a single child (and a single row).', '\\n', '\\n', 'Accepting an array of objects as a prop ', '\\n', 'You can also explicitly pass an array as a prop. For example, this ', 'RowList', ' accepts a ', 'rows', ' array as a prop:', '\\n', 'App.js', 'RowList.js', 'App.js', ' Reset', 'Fork', 'import', ' ', '{', ' ', 'RowList', ',', ' ', 'Row', ' ', '}', ' ', 'from', ' ', \"'./RowList.js'\", ';', '\\n\\n', 'export', ' ', 'default', ' ', 'function', ' ', 'App', '(', ')', ' ', '{', '\\n  ', 'return', ' ', '(', '\\n    ', '<', 'RowList', ' ', 'rows', '=', '{', '[', '\\n      ', '{', ' ', 'id', ':', ' ', \"'first'\", ',', ' ', 'content', ':', ' ', '<', 'p', '>', 'This is the first item.', '</', 'p', '>', ' ', '}', ',', '\\n      ', '{', ' ', 'id', ':', ' ', \"'second'\", ',', ' ', 'content', ':', ' ', '<', 'p', '>', 'This is the second item.', '</', 'p', '>', ' ', '}', ',', '\\n      ', '{', ' ', 'id', ':', ' ', \"'third'\", ',', ' ', 'content', ':', ' ', '<', 'p', '>', 'This is the third item.', '</', 'p', '>', ' ', '}', '\\n    ', ']', '}', ' ', '/>', '\\n  ', ')', ';', '\\n', '}', '\\n\\n', '\\n', 'Since ', 'rows', ' is a regular JavaScript array, the ', 'RowList', ' component can use built-in array methods like ', 'map', ' on it.', '\\n', 'This pattern is especially useful when you want to be able to pass more information as structured data together with children. In the below example, the ', 'TabSwitcher', ' component receives an array of objects as the ', 'tabs', ' prop:', '\\n', 'App.js', 'TabSwitcher.js', 'App.js', ' Reset', 'Fork', 'import', ' ', 'TabSwitcher', ' ', 'from', ' ', \"'./TabSwitcher.js'\", ';', '\\n\\n', 'export', ' ', 'default', ' ', 'function', ' ', 'App', '(', ')', ' ', '{', '\\n  ', 'return', ' ', '(', '\\n    ', '<', 'TabSwitcher', ' ', 'tabs', '=', '{', '[', '\\n      ', '{', '\\n        ', 'id', ':', ' ', \"'first'\", ',', '\\n        ', 'header', ':', ' ', \"'First'\", ',', '\\n        ', 'content', ':', ' ', '<', 'p', '>', 'This is the first item.', '</', 'p', '>', '\\n      ', '}', ',', '\\n      ', '{', '\\n        ', 'id', ':', ' ', \"'second'\", ',', '\\n        ', 'header', ':', ' ', \"'Second'\", ',', '\\n        ', 'content', ':', ' ', '<', 'p', '>', 'This is the second item.', '</', 'p', '>', '\\n      ', '}', ',', '\\n      ', '{', '\\n        ', 'id', ':', ' ', \"'third'\", ',', '\\n        ', 'header', ':', ' ', \"'Third'\", ',', '\\n        ', 'content', ':', ' ', '<', 'p', '>', 'This is the third item.', '</', 'p', '>', '\\n      ', '}', '\\n    ', ']', '}', ' ', '/>', '\\n  ', ')', ';', '\\n', '}', '\\n\\n', 'Show more', '\\n', 'Unlike passing the children as JSX, this approach lets you associate some extra data like ', 'header', ' with each item. Because you are working with the ', 'tabs', ' directly, and it is an array, you do not need the ', 'Children', ' methods.', '\\n', '\\n', 'Calling a render prop to customize rendering ', '\\n', 'Instead of producing JSX for every single item, you can also pass a function that returns JSX, and call that function when necessary. In this example, the ', 'App', ' component passes a ', 'renderContent', ' function to the ', 'TabSwitcher', ' component. The ', 'TabSwitcher', ' component calls ', 'renderContent', ' only for the selected tab:', '\\n', 'App.js', 'TabSwitcher.js', 'App.js', ' Reset', 'Fork', 'import', ' ', 'TabSwitcher', ' ', 'from', ' ', \"'./TabSwitcher.js'\", ';', '\\n\\n', 'export', ' ', 'default', ' ', 'function', ' ', 'App', '(', ')', ' ', '{', '\\n  ', 'return', ' ', '(', '\\n    ', '<', 'TabSwitcher', '\\n      ', 'tabIds', '=', '{', '[', \"'first'\", ',', ' ', \"'second'\", ',', ' ', \"'third'\", ']', '}', '\\n      ', 'getHeader', '=', '{', 'tabId', ' ', '=>', ' ', '{', '\\n        ', 'return', ' ', 'tabId', '[', '0', ']', '.', 'toUpperCase', '(', ')', ' + ', 'tabId', '.', 'slice', '(', '1', ')', ';', '\\n      ', '}', '}', '\\n      ', 'renderContent', '=', '{', 'tabId', ' ', '=>', ' ', '{', '\\n        ', 'return', ' ', '<', 'p', '>', 'This is the ', '{', 'tabId', '}', ' item.', '</', 'p', '>', ';', '\\n      ', '}', '}', '\\n    ', '/>', '\\n  ', ')', ';', '\\n', '}', '\\n\\n', '\\n', 'A prop like ', 'renderContent', ' is called a ', 'render prop', ' because it is a prop that specifies how to render a piece of the user interface. However, there is nothing special about it: it is a regular prop which happens to be a function.', '\\n', 'Render props are functions, so you can pass information to them. For example, this ', 'RowList', ' component passes the ', 'id', ' and the ', 'index', ' of each row to the ', 'renderRow', ' render prop, which uses ', 'index', ' to highlight even rows:', '\\n', 'App.js', 'RowList.js', 'App.js', ' Reset', 'Fork', 'import', ' ', '{', ' ', 'RowList', ',', ' ', 'Row', ' ', '}', ' ', 'from', ' ', \"'./RowList.js'\", ';', '\\n\\n', 'export', ' ', 'default', ' ', 'function', ' ', 'App', '(', ')', ' ', '{', '\\n  ', 'return', ' ', '(', '\\n    ', '<', 'RowList', '\\n      ', 'rowIds', '=', '{', '[', \"'first'\", ',', ' ', \"'second'\", ',', ' ', \"'third'\", ']', '}', '\\n      ', 'renderRow', '=', '{', '(', 'id', ',', ' ', 'index', ')', ' ', '=>', ' ', '{', '\\n        ', 'return', ' ', '(', '\\n          ', '<', 'Row', ' ', 'isHighlighted', '=', '{', 'index', ' % ', '2', ' === ', '0', '}', '>', '\\n            ', '<', 'p', '>', 'This is the ', '{', 'id', '}', ' item.', '</', 'p', '>', '\\n          ', '</', 'Row', '>', ' \\n        ', ')', ';', '\\n      ', '}', '}', '\\n    ', '/>', '\\n  ', ')', ';', '\\n', '}', '\\n\\n', 'Show more', '\\n', 'This is another example of how parent and child components can cooperate without manipulating the children.', '\\n', '\\n', 'Troubleshooting ', '\\n', 'I pass a custom component, but the ', 'Children', ' methods don’t show its render result ', '\\n', 'Suppose you pass two children to ', 'RowList', ' like this:', '\\n', '<', 'RowList', '>', '  ', '<', 'p', '>', 'First item', '</', 'p', '>', '  ', '<', 'MoreRows', ' ', '/>', '</', 'RowList', '>', '\\n', 'If you do ', 'Children.count(children)', ' inside ', 'RowList', ', you will get ', '2', '. Even if ', 'MoreRows', ' renders 10 different items, or if it returns ', 'null', ', ', 'Children.count(children)', ' will still be ', '2', '. From the ', 'RowList', '’s perspective, it only “sees” the JSX it has received. It does not “see” the internals of the ', 'MoreRows', ' component.', '\\n', 'The limitation makes it hard to extract a component. This is why ', 'alternatives', ' are preferred to using ', 'Children', '.', 'Previous', 'Legacy React APIs', 'Next', 'cloneElement', 'How do you like these docs?', 'Take our survey!', '©', '2024', 'Learn React', 'Quick Start', 'Installation', 'Describing the UI', 'Adding Interactivity', 'Managing State', 'Escape Hatches', 'API Reference', 'React APIs', 'React DOM APIs', 'Community', 'Code of Conduct', 'Meet the Team', 'Docs Contributors', 'Acknowledgements', 'More', 'Blog', 'React Native', 'Privacy', 'Terms', 'On this page', 'Overview', 'Reference ', 'Children.count(children)', ' ', 'Children.forEach(children, fn, thisArg?)', ' ', 'Children.map(children, fn, thisArg?)', ' ', 'Children.only(children)', ' ', 'Children.toArray(children)', ' ', 'Usage ', 'Transforming children ', 'Running some code for each child ', 'Counting children ', 'Converting children to an array ', 'Alternatives ', 'Exposing multiple components ', 'Accepting an array of objects as a prop ', 'Calling a render prop to customize rendering ', 'Troubleshooting ', 'I pass a custom component, but the ', 'Children', ' methods don’t show its render result ', "}