{"id": 107, "url": "https://react.dev/reference/react/use", "title": "use", "content": "'use – React', 'Stream React Conf on May 15-16.', 'Learn more.', 'React', 'Search', '⌘', 'Ctrl', 'K', 'Learn', 'Reference', 'Community', 'Blog', 'react@18.2.0', 'Overview', ' ', 'Hooks', ' ', 'use', ' ', ' - This feature is available in the latest Canary', 'useCallback', ' ', 'useContext', ' ', 'useDebugValue', ' ', 'useDeferredValue', ' ', 'useEffect', ' ', 'useId', ' ', 'useImperativeHandle', ' ', 'useInsertionEffect', ' ', 'useLayoutEffect', ' ', 'useMemo', ' ', 'useOptimistic', ' ', ' - This feature is available in the latest Canary', 'useReducer', ' ', 'useRef', ' ', 'useState', ' ', 'useSyncExternalStore', ' ', 'useTransition', ' ', 'Components', ' ', '<Fragment> (<>)', ' ', '<Profiler>', ' ', '<StrictMode>', ' ', '<Suspense>', ' ', 'APIs', ' ', 'cache', ' ', ' - This feature is available in the latest Canary', 'createContext', ' ', 'forwardRef', ' ', 'lazy', ' ', 'memo', ' ', 'startTransition', ' ', 'experimental_taintObjectReference', ' ', ' - This feature is available in the latest Canary', 'experimental_taintUniqueValue', ' ', ' - This feature is available in the latest Canary', 'Directives', ' ', ' - This feature is available in the latest Canary', \"'use client'\", ' ', ' - This feature is available in the latest Canary', \"'use server'\", ' ', ' - This feature is available in the latest Canary', 'react-dom@18.2.0', 'Hooks', ' ', 'useFormState', ' ', ' - This feature is available in the latest Canary', 'useFormStatus', ' ', ' - This feature is available in the latest Canary', 'Components', ' ', 'Common (e.g. <div>)', ' ', '<form>', ' ', ' - This feature is available in the latest Canary', '<input>', ' ', '<option>', ' ', '<progress>', ' ', '<select>', ' ', '<textarea>', ' ', '<link>', ' ', ' - This feature is available in the latest Canary', '<meta>', ' ', ' - This feature is available in the latest Canary', '<script>', ' ', ' - This feature is available in the latest Canary', '<style>', ' ', ' - This feature is available in the latest Canary', '<title>', ' ', ' - This feature is available in the latest Canary', 'APIs', ' ', 'createPortal', ' ', 'flushSync', ' ', 'findDOMNode', ' ', 'hydrate', ' ', 'preconnect', ' ', ' - This feature is available in the latest Canary', 'prefetchDNS', ' ', ' - This feature is available in the latest Canary', 'preinit', ' ', ' - This feature is available in the latest Canary', 'preinitModule', ' ', ' - This feature is available in the latest Canary', 'preload', ' ', ' - This feature is available in the latest Canary', 'preloadModule', ' ', ' - This feature is available in the latest Canary', 'render', ' ', 'unmountComponentAtNode', ' ', 'Client APIs', ' ', 'createRoot', ' ', 'hydrateRoot', ' ', 'Server APIs', ' ', 'renderToNodeStream', ' ', 'renderToPipeableStream', ' ', 'renderToReadableStream', ' ', 'renderToStaticMarkup', ' ', 'renderToStaticNodeStream', ' ', 'renderToString', ' ', 'Rules of React', 'Overview', ' ', 'Components and Hooks must be pure', ' ', 'React calls Components and Hooks', ' ', 'Rules of Hooks', ' ', 'Legacy APIs', 'Legacy React APIs', ' ', 'Children', ' ', 'cloneElement', ' ', 'Component', ' ', 'createElement', ' ', 'createFactory', ' ', 'createRef', ' ', 'isValidElement', ' ', 'PureComponent', ' ', 'Is this page useful?', 'API Reference', 'Hooks', 'use', ' - This feature is available in the latest Canary', 'Canary', 'The ', 'use', ' Hook is currently only available in React’s Canary and experimental channels. Learn more about ', 'React’s release channels here', '.', '\\n', 'use', ' is a React Hook that lets you read the value of a resource like a ', 'Promise', ' or ', 'context', '.', 'const', ' ', 'value', ' = ', 'use', '(', 'resource', ')', ';', '\\n', 'Reference ', 'use(resource)', ' ', 'Usage ', 'Reading context with ', 'use', ' ', 'Streaming data from the server to the client ', 'Dealing with rejected Promises ', 'Troubleshooting ', '“Suspense Exception: This is not a real error!” ', '\\n', '\\n', 'Reference ', '\\n', 'use(resource)', ' ', '\\n', 'Call ', 'use', ' in your component to read the value of a resource like a ', 'Promise', ' or ', 'context', '.', '\\n', 'import', ' ', '{', ' ', 'use', ' ', '}', ' ', 'from', ' ', \"'react'\", ';', 'function', ' ', 'MessageComponent', '(', '{', ' ', 'messagePromise', ' ', '}', ')', ' ', '{', '  ', 'const', ' ', 'message', ' = ', 'use', '(', 'messagePromise', ')', ';', '  ', 'const', ' ', 'theme', ' = ', 'use', '(', 'ThemeContext', ')', ';', '  ', '// ...', '\\n', 'Unlike all other React Hooks, ', 'use', ' can be called within loops and conditional statements like ', 'if', '. Like other React Hooks, the function that calls ', 'use', ' must be a Component or Hook.', '\\n', 'When called with a Promise, the ', 'use', ' Hook integrates with ', 'Suspense', ' and ', 'error boundaries', '. The component calling ', 'use', ' ', 'suspends', ' while the Promise passed to ', 'use', ' is pending. If the component that calls ', 'use', ' is wrapped in a Suspense boundary, the fallback will be displayed.  Once the Promise is resolved, the Suspense fallback is replaced by the rendered components using the data returned by the ', 'use', ' Hook. If the Promise passed to ', 'use', ' is rejected, the fallback of the nearest Error Boundary will be displayed.', '\\n', 'See more examples below.', '\\n', 'Parameters ', '\\n', '\\n', 'resource', ': this is the source of the data you want to read a value from. A resource can be a ', 'Promise', ' or a ', 'context', '.', '\\n', '\\n', 'Returns ', '\\n', 'The ', 'use', ' Hook returns the value that was read from the resource like the resolved value of a ', 'Promise', ' or ', 'context', '.', '\\n', 'Caveats ', '\\n', '\\n', 'The ', 'use', ' Hook must be called inside a Component or a Hook.', '\\n', 'When fetching data in a ', 'Server Component', ', prefer ', 'async', ' and ', 'await', ' over ', 'use', '. ', 'async', ' and ', 'await', ' pick up rendering from the point where ', 'await', ' was invoked, whereas ', 'use', ' re-renders the component after the data is resolved.', '\\n', 'Prefer creating Promises in ', 'Server Components', ' and passing them to ', 'Client Components', ' over creating Promises in Client Components. Promises created in Client Components are recreated on every render. Promises passed from a Server Component to a Client Component are stable across re-renders. ', 'See this example', '.', '\\n', '\\n', '\\n', 'Usage ', '\\n', 'Reading context with ', 'use', ' ', '\\n', 'When a ', 'context', ' is passed to ', 'use', ', it works similarly to ', 'useContext', '. While ', 'useContext', ' must be called at the top level of your component, ', 'use', ' can be called inside conditionals like ', 'if', ' and loops like ', 'for', '. ', 'use', ' is preferred over ', 'useContext', ' because it is more flexible.', '\\n', 'import', ' ', '{', ' ', 'use', ' ', '}', ' ', 'from', ' ', \"'react'\", ';', 'function', ' ', 'Button', '(', ')', ' ', '{', '  ', 'const', ' ', 'theme', ' = ', 'use', '(', 'ThemeContext', ')', ';', '  ', '// ...', '\\n', 'use', ' returns the ', 'context value', ' for the ', 'context', ' you passed. To determine the context value, React searches the component tree and finds ', 'the closest context provider above', ' for that particular context.', '\\n', 'To pass context to a ', 'Button', ', wrap it or one of its parent components into the corresponding context provider.', '\\n', 'function', ' ', 'MyPage', '(', ')', ' ', '{', '  ', 'return', ' ', '(', '    ', '<', 'ThemeContext', '.', 'Provider', ' ', 'value', '=', '\"dark\"', '>', '      ', '<', 'Form', ' ', '/>', '    ', '</', 'ThemeContext', '.', 'Provider', '>', '  ', ')', ';', '}', 'function', ' ', 'Form', '(', ')', ' ', '{', '  ', '// ... renders buttons inside ...', '}', '\\n', 'It doesn’t matter how many layers of components there are between the provider and the ', 'Button', '. When a ', 'Button', ' ', 'anywhere', ' inside of ', 'Form', ' calls ', 'use(ThemeContext)', ', it will receive ', '\"dark\"', ' as the value.', '\\n', 'Unlike ', 'useContext', ', ', 'use', ' can be called in conditionals and loops like ', 'if', '.', '\\n', 'function', ' ', 'HorizontalRule', '(', '{', ' ', 'show', ' ', '}', ')', ' ', '{', '  ', 'if', ' ', '(', 'show', ')', ' ', '{', '    ', 'const', ' ', 'theme', ' = ', 'use', '(', 'ThemeContext', ')', ';', '    ', 'return', ' ', '<', 'hr', ' ', 'className', '=', '{', 'theme', '}', ' ', '/>', ';', '  ', '}', '  ', 'return', ' ', 'false', ';', '}', '\\n', 'use', ' is called from inside a ', 'if', ' statement, allowing you to conditionally read values from a Context.', '\\n', 'Pitfall', 'Like ', 'useContext', ', ', 'use(context)', ' always looks for the closest context provider ', 'above', ' the component that calls it. It searches upwards and ', 'does not', ' consider context providers in the component from which you’re calling ', 'use(context)', '.', '\\n', 'App.js', 'App.js', ' Reset', 'Fork', 'import', ' ', '{', ' ', 'createContext', ',', ' ', 'use', ' ', '}', ' ', 'from', ' ', \"'react'\", ';', '\\n\\n', 'const', ' ', 'ThemeContext', ' = ', 'createContext', '(', 'null', ')', ';', '\\n\\n', 'export', ' ', 'default', ' ', 'function', ' ', 'MyApp', '(', ')', ' ', '{', '\\n  ', 'return', ' ', '(', '\\n    ', '<', 'ThemeContext', '.', 'Provider', ' ', 'value', '=', '\"dark\"', '>', '\\n      ', '<', 'Form', ' ', '/>', '\\n    ', '</', 'ThemeContext', '.', 'Provider', '>', '\\n  ', ')', '\\n', '}', '\\n\\n', 'function', ' ', 'Form', '(', ')', ' ', '{', '\\n  ', 'return', ' ', '(', '\\n    ', '<', 'Panel', ' ', 'title', '=', '\"Welcome\"', '>', '\\n      ', '<', 'Button', ' ', 'show', '=', '{', 'true', '}', '>', 'Sign up', '</', 'Button', '>', '\\n      ', '<', 'Button', ' ', 'show', '=', '{', 'false', '}', '>', 'Log in', '</', 'Button', '>', '\\n    ', '</', 'Panel', '>', '\\n  ', ')', ';', '\\n', '}', '\\n\\n', 'function', ' ', 'Panel', '(', '{', ' ', 'title', ',', ' ', 'children', ' ', '}', ')', ' ', '{', '\\n  ', 'const', ' ', 'theme', ' = ', 'use', '(', 'ThemeContext', ')', ';', '\\n  ', 'const', ' ', 'className', ' = ', \"'panel-'\", ' + ', 'theme', ';', '\\n  ', 'return', ' ', '(', '\\n    ', '<', 'section', ' ', 'className', '=', '{', 'className', '}', '>', '\\n      ', '<', 'h1', '>', '{', 'title', '}', '</', 'h1', '>', '\\n      ', '{', 'children', '}', '\\n    ', '</', 'section', '>', '\\n  ', ')', '\\n', '}', '\\n\\n', 'function', ' ', 'Button', '(', '{', ' ', 'show', ',', ' ', 'children', ' ', '}', ')', ' ', '{', '\\n  ', 'if', ' ', '(', 'show', ')', ' ', '{', '\\n    ', 'const', ' ', 'theme', ' = ', 'use', '(', 'ThemeContext', ')', ';', '\\n    ', 'const', ' ', 'className', ' = ', \"'button-'\", ' + ', 'theme', ';', '\\n    ', 'return', ' ', '(', '\\n      ', '<', 'button', ' ', 'className', '=', '{', 'className', '}', '>', '\\n        ', '{', 'children', '}', '\\n      ', '</', 'button', '>', '\\n    ', ')', ';', '\\n  ', '}', '\\n  ', 'return', ' ', 'false', '\\n', '}', '\\n\\n', 'Show more', '\\n', 'Streaming data from the server to the client ', '\\n', 'Data can be streamed from the server to the client by passing a Promise as a prop from a ', 'Server Component', ' to a ', 'Client Component', '.', '\\n', 'import', ' ', '{', ' ', 'fetchMessage', ' ', '}', ' ', 'from', ' ', \"'./lib.js'\", ';', 'import', ' ', '{', ' ', 'Message', ' ', '}', ' ', 'from', ' ', \"'./message.js'\", ';', 'export', ' ', 'default', ' ', 'function', ' ', 'App', '(', ')', ' ', '{', '  ', 'const', ' ', 'messagePromise', ' = ', 'fetchMessage', '(', ')', ';', '  ', 'return', ' ', '(', '    ', '<', 'Suspense', ' ', 'fallback', '=', '{', '<', 'p', '>', 'waiting for message...', '</', 'p', '>', '}', '>', '      ', '<', 'Message', ' ', 'messagePromise', '=', '{', 'messagePromise', '}', ' ', '/>', '    ', '</', 'Suspense', '>', '  ', ')', ';', '}', '\\n', 'The ', 'Client Component', ' then takes ', 'the Promise it received as a prop', ' and passes it to the ', 'use', ' Hook. This allows the ', 'Client Component', ' to read the value from ', 'the Promise', ' that was initially created by the Server Component.', '\\n', '// message.js', \"'use client'\", ';', 'import', ' ', '{', ' ', 'use', ' ', '}', ' ', 'from', ' ', \"'react'\", ';', 'export', ' ', 'function', ' ', 'Message', '(', '{', ' ', 'messagePromise', ' ', '}', ')', ' ', '{', '  ', 'const', ' ', 'messageContent', ' = ', 'use', '(', 'messagePromise', ')', ';', '  ', 'return', ' ', '<', 'p', '>', 'Here is the message: ', '{', 'messageContent', '}', '</', 'p', '>', ';', '}', '\\n', 'Because ', 'Message', ' is wrapped in ', 'Suspense', ', the fallback will be displayed until the Promise is resolved. When the Promise is resolved, the value will be read by the ', 'use', ' Hook and the ', 'Message', ' component will replace the Suspense fallback.', '\\n', 'message.js', 'message.js', ' Reset', 'Fork', '\"use client\"', ';', '\\n\\n', 'import', ' ', '{', ' ', 'use', ',', ' ', 'Suspense', ' ', '}', ' ', 'from', ' ', '\"react\"', ';', '\\n\\n', 'function', ' ', 'Message', '(', '{', ' ', 'messagePromise', ' ', '}', ')', ' ', '{', '\\n  ', 'const', ' ', 'messageContent', ' = ', 'use', '(', 'messagePromise', ')', ';', '\\n  ', 'return', ' ', '<', 'p', '>', 'Here is the message: ', '{', 'messageContent', '}', '</', 'p', '>', ';', '\\n', '}', '\\n\\n', 'export', ' ', 'function', ' ', 'MessageContainer', '(', '{', ' ', 'messagePromise', ' ', '}', ')', ' ', '{', '\\n  ', 'return', ' ', '(', '\\n    ', '<', 'Suspense', ' ', 'fallback', '=', '{', '<', 'p', '>', '⌛Downloading message...', '</', 'p', '>', '}', '>', '\\n      ', '<', 'Message', ' ', 'messagePromise', '=', '{', 'messagePromise', '}', ' ', '/>', '\\n    ', '</', 'Suspense', '>', '\\n  ', ')', ';', '\\n', '}', '\\n\\n', 'Show more', '\\n', 'Note', 'When passing a Promise from a Server Component to a Client Component, its resolved value must be serializable to pass between server and client. Data types like functions aren’t serializable and cannot be the resolved value of such a Promise.', '\\n', 'Deep Dive', 'Should I resolve a Promise in a Server or Client Component? ', 'Show Details', 'A Promise can be passed from a Server Component to a Client Component and resolved in the Client Component with the ', 'use', ' Hook. You can also resolve the Promise in a Server Component with ', 'await', ' and pass the required data to the Client Component as a prop.', 'export', ' ', 'default', ' ', 'async', ' ', 'function', ' ', 'App', '(', ')', ' ', '{', '  ', 'const', ' ', 'messageContent', ' = ', 'await', ' ', 'fetchMessage', '(', ')', ';', '  ', 'return', ' ', '<', 'Message', ' ', 'messageContent', '=', '{', 'messageContent', '}', ' ', '/>', '}', 'But using ', 'await', ' in a ', 'Server Component', ' will block its rendering until the ', 'await', ' statement is finished. Passing a Promise from a Server Component to a Client Component prevents the Promise from blocking the rendering of the Server Component.', '\\n', 'Dealing with rejected Promises ', '\\n', 'In some cases a Promise passed to ', 'use', ' could be rejected. You can handle rejected Promises by either:', '\\n', '\\n', 'Displaying an error to users with an error boundary.', '\\n', 'Providing an alternative value with ', 'Promise.catch', '\\n', '\\n', 'Pitfall', 'use', ' cannot be called in a try-catch block. Instead of a try-catch block ', 'wrap your component in an Error Boundary', ', or ', 'provide an alternative value to use with the Promise’s ', '.catch', ' method', '.', '\\n', 'Displaying an error to users with an error boundary ', '\\n', 'If you’d like to display an error to your users when a Promise is rejected, you can use an ', 'error boundary', '. To use an error boundary, wrap the component where you are calling the ', 'use', ' Hook in an error boundary. If the Promise passed to ', 'use', ' is rejected the fallback for the error boundary will be displayed.', '\\n', 'message.js', 'message.js', ' Reset', 'Fork', '\"use client\"', ';', '\\n\\n', 'import', ' ', '{', ' ', 'use', ',', ' ', 'Suspense', ' ', '}', ' ', 'from', ' ', '\"react\"', ';', '\\n', 'import', ' ', '{', ' ', 'ErrorBoundary', ' ', '}', ' ', 'from', ' ', '\"react-error-boundary\"', ';', '\\n\\n', 'export', ' ', 'function', ' ', 'MessageContainer', '(', '{', ' ', 'messagePromise', ' ', '}', ')', ' ', '{', '\\n  ', 'return', ' ', '(', '\\n    ', '<', 'ErrorBoundary', ' ', 'fallback', '=', '{', '<', 'p', '>', '⚠️Something went wrong', '</', 'p', '>', '}', '>', '\\n      ', '<', 'Suspense', ' ', 'fallback', '=', '{', '<', 'p', '>', '⌛Downloading message...', '</', 'p', '>', '}', '>', '\\n        ', '<', 'Message', ' ', 'messagePromise', '=', '{', 'messagePromise', '}', ' ', '/>', '\\n      ', '</', 'Suspense', '>', '\\n    ', '</', 'ErrorBoundary', '>', '\\n  ', ')', ';', '\\n', '}', '\\n\\n', 'function', ' ', 'Message', '(', '{', ' ', 'messagePromise', ' ', '}', ')', ' ', '{', '\\n  ', 'const', ' ', 'content', ' = ', 'use', '(', 'messagePromise', ')', ';', '\\n  ', 'return', ' ', '<', 'p', '>', 'Here is the message: ', '{', 'content', '}', '</', 'p', '>', ';', '\\n', '}', '\\n\\n', 'Show more', '\\n', 'Providing an alternative value with ', 'Promise.catch', ' ', '\\n', 'If you’d like to provide an alternative value when the Promise passed to ', 'use', ' is rejected you can use the Promise’s ', 'catch', ' method.', '\\n', 'import', ' ', '{', ' ', 'Message', ' ', '}', ' ', 'from', ' ', \"'./message.js'\", ';', 'export', ' ', 'default', ' ', 'function', ' ', 'App', '(', ')', ' ', '{', '  ', 'const', ' ', 'messagePromise', ' = ', 'new', ' ', 'Promise', '(', '(', 'resolve', ',', ' ', 'reject', ')', ' ', '=>', ' ', '{', '    ', 'reject', '(', ')', ';', '  ', '}', ')', '.', 'catch', '(', '(', ')', ' ', '=>', ' ', '{', '    ', 'return', ' ', '\"no new message found.\"', ';', '  ', '}', ')', ';', '  ', 'return', ' ', '(', '    ', '<', 'Suspense', ' ', 'fallback', '=', '{', '<', 'p', '>', 'waiting for message...', '</', 'p', '>', '}', '>', '      ', '<', 'Message', ' ', 'messagePromise', '=', '{', 'messagePromise', '}', ' ', '/>', '    ', '</', 'Suspense', '>', '  ', ')', ';', '}', '\\n', 'To use the Promise’s ', 'catch', ' method, call ', 'catch', ' on the Promise object. ', 'catch', ' takes a single argument: a function that takes an error message as an argument. Whatever is ', 'returned', ' by the function passed to ', 'catch', ' will be used as the resolved value of the Promise.', '\\n', '\\n', 'Troubleshooting ', '\\n', '“Suspense Exception: This is not a real error!” ', '\\n', 'You are either calling ', 'use', ' outside of a React component or Hook function, or calling ', 'use', ' in a try–catch block. If you are calling ', 'use', ' inside a try–catch block, wrap your component in an error boundary, or call the Promise’s ', 'catch', ' to catch the error and resolve the Promise with another value. ', 'See these examples', '.', '\\n', 'If you are calling ', 'use', ' outside a React component or Hook function, move the ', 'use', ' call to a React component or Hook function.', '\\n', 'function', ' ', 'MessageComponent', '(', '{', 'messagePromise', '}', ')', ' ', '{', '  ', 'function', ' ', 'download', '(', ')', ' ', '{', '    ', '// ❌ the function calling `use` is not a Component or Hook', '    ', 'const', ' ', 'message', ' = ', 'use', '(', 'messagePromise', ')', ';', '    ', '// ...', '\\n', 'Instead, call ', 'use', ' outside any component closures, where the function that calls ', 'use', ' is a component or Hook.', '\\n', 'function', ' ', 'MessageComponent', '(', '{', 'messagePromise', '}', ')', ' ', '{', '  ', '// ✅ `use` is being called from a component. ', '  ', 'const', ' ', 'message', ' = ', 'use', '(', 'messagePromise', ')', ';', '  ', '// ...', 'Previous', 'Hooks', 'Next', 'useCallback', 'How do you like these docs?', 'Take our survey!', '©', '2024', 'Learn React', 'Quick Start', 'Installation', 'Describing the UI', 'Adding Interactivity', 'Managing State', 'Escape Hatches', 'API Reference', 'React APIs', 'React DOM APIs', 'Community', 'Code of Conduct', 'Meet the Team', 'Docs Contributors', 'Acknowledgements', 'More', 'Blog', 'React Native', 'Privacy', 'Terms', 'On this page', 'Overview', 'Reference ', 'use(resource)', ' ', 'Usage ', 'Reading context with ', 'use', ' ', 'Streaming data from the server to the client ', 'Dealing with rejected Promises ', 'Troubleshooting ', '“Suspense Exception: This is not a real error!” ', "}