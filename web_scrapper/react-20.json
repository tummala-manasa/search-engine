{"id": 20, "url": "https://react.dev/learn/preserving-and-resetting-state", "title": "Preserving and Resetting State", "content": "'Preserving and Resetting State – React', 'Stream React Conf on May 15-16.', 'Learn more.', 'React', 'Search', '⌘', 'Ctrl', 'K', 'Learn', 'Reference', 'Community', 'Blog', 'GET STARTED', 'Quick Start', ' ', 'Tutorial: Tic-Tac-Toe', ' ', 'Thinking in React', ' ', 'Installation', ' ', 'Start a New React Project', ' ', 'Add React to an Existing Project', ' ', 'Editor Setup', ' ', 'Using TypeScript', ' ', 'React Developer Tools', ' ', 'LEARN REACT', 'Describing the UI', ' ', 'Your First Component', ' ', 'Importing and Exporting Components', ' ', 'Writing Markup with JSX', ' ', 'JavaScript in JSX with Curly Braces', ' ', 'Passing Props to a Component', ' ', 'Conditional Rendering', ' ', 'Rendering Lists', ' ', 'Keeping Components Pure', ' ', 'Your UI as a Tree', ' ', 'Adding Interactivity', ' ', 'Responding to Events', ' ', \"State: A Component's Memory\", ' ', 'Render and Commit', ' ', 'State as a Snapshot', ' ', 'Queueing a Series of State Updates', ' ', 'Updating Objects in State', ' ', 'Updating Arrays in State', ' ', 'Managing State', ' ', 'Reacting to Input with State', ' ', 'Choosing the State Structure', ' ', 'Sharing State Between Components', ' ', 'Preserving and Resetting State', ' ', 'Extracting State Logic into a Reducer', ' ', 'Passing Data Deeply with Context', ' ', 'Scaling Up with Reducer and Context', ' ', 'Escape Hatches', ' ', 'Referencing Values with Refs', ' ', 'Manipulating the DOM with Refs', ' ', 'Synchronizing with Effects', ' ', 'You Might Not Need an Effect', ' ', 'Lifecycle of Reactive Effects', ' ', 'Separating Events from Effects', ' ', 'Removing Effect Dependencies', ' ', 'Reusing Logic with Custom Hooks', ' ', 'Is this page useful?', 'Learn React', 'Managing State', 'Preserving and Resetting State', 'State is isolated between components. React keeps track of which state belongs to which component based on their place in the UI tree. You can control when to preserve state and when to reset it between re-renders.', '\\n', 'You will learn', '\\n', 'When React chooses to preserve or reset the state', '\\n', 'How to force React to reset component’s state', '\\n', 'How keys and types affect whether the state is preserved', '\\n', '\\n', 'State is tied to a position in the render tree ', '\\n', 'React builds ', 'render trees', ' for the component structure in your UI.', '\\n', 'When you give a component state, you might think the state “lives” inside the component. But the state is actually held inside React. React associates each piece of state it’s holding with the correct component by where that component sits in the render tree.', '\\n', 'Here, there is only one ', '<Counter />', ' JSX tag, but it’s rendered at two different positions:', '\\n', 'App.js', 'App.js', ' Reset', 'Fork', 'import', ' ', '{', ' ', 'useState', ' ', '}', ' ', 'from', ' ', \"'react'\", ';', '\\n\\n', 'export', ' ', 'default', ' ', 'function', ' ', 'App', '(', ')', ' ', '{', '\\n  ', 'const', ' ', 'counter', ' = ', '<', 'Counter', ' ', '/>', ';', '\\n  ', 'return', ' ', '(', '\\n    ', '<', 'div', '>', '\\n      ', '{', 'counter', '}', '\\n      ', '{', 'counter', '}', '\\n    ', '</', 'div', '>', '\\n  ', ')', ';', '\\n', '}', '\\n\\n', 'function', ' ', 'Counter', '(', ')', ' ', '{', '\\n  ', 'const', ' ', '[', 'score', ',', ' ', 'setScore', ']', ' = ', 'useState', '(', '0', ')', ';', '\\n  ', 'const', ' ', '[', 'hover', ',', ' ', 'setHover', ']', ' = ', 'useState', '(', 'false', ')', ';', '\\n\\n  ', 'let', ' ', 'className', ' = ', \"'counter'\", ';', '\\n  ', 'if', ' ', '(', 'hover', ')', ' ', '{', '\\n    ', 'className', ' += ', \"' hover'\", ';', '\\n  ', '}', '\\n\\n  ', 'return', ' ', '(', '\\n    ', '<', 'div', '\\n      ', 'className', '=', '{', 'className', '}', '\\n      ', 'onPointerEnter', '=', '{', '(', ')', ' ', '=>', ' ', 'setHover', '(', 'true', ')', '}', '\\n      ', 'onPointerLeave', '=', '{', '(', ')', ' ', '=>', ' ', 'setHover', '(', 'false', ')', '}', '\\n    ', '>', '\\n      ', '<', 'h1', '>', '{', 'score', '}', '</', 'h1', '>', '\\n      ', '<', 'button', ' ', 'onClick', '=', '{', '(', ')', ' ', '=>', ' ', 'setScore', '(', 'score', ' + ', '1', ')', '}', '>', '\\n        Add one\\n      ', '</', 'button', '>', '\\n    ', '</', 'div', '>', '\\n  ', ')', ';', '\\n', '}', '\\n\\n', 'Show more', '\\n', 'Here’s how these look as a tree:', '\\n', 'React tree', '\\n', 'These are two separate counters because each is rendered at its own position in the tree.', ' You don’t usually have to think about these positions to use React, but it can be useful to understand how it works.', '\\n', 'In React, each component on the screen has fully isolated state. For example, if you render two ', 'Counter', ' components side by side, each of them will get its own, independent, ', 'score', ' and ', 'hover', ' states.', '\\n', 'Try clicking both counters and notice they don’t affect each other:', '\\n', 'App.js', 'App.js', ' Reset', 'Fork', 'import', ' ', '{', ' ', 'useState', ' ', '}', ' ', 'from', ' ', \"'react'\", ';', '\\n\\n', 'export', ' ', 'default', ' ', 'function', ' ', 'App', '(', ')', ' ', '{', '\\n  ', 'return', ' ', '(', '\\n    ', '<', 'div', '>', '\\n      ', '<', 'Counter', ' ', '/>', '\\n      ', '<', 'Counter', ' ', '/>', '\\n    ', '</', 'div', '>', '\\n  ', ')', ';', '\\n', '}', '\\n\\n', 'function', ' ', 'Counter', '(', ')', ' ', '{', '\\n  ', 'const', ' ', '[', 'score', ',', ' ', 'setScore', ']', ' = ', 'useState', '(', '0', ')', ';', '\\n  ', 'const', ' ', '[', 'hover', ',', ' ', 'setHover', ']', ' = ', 'useState', '(', 'false', ')', ';', '\\n\\n  ', 'let', ' ', 'className', ' = ', \"'counter'\", ';', '\\n  ', 'if', ' ', '(', 'hover', ')', ' ', '{', '\\n    ', 'className', ' += ', \"' hover'\", ';', '\\n  ', '}', '\\n\\n  ', 'return', ' ', '(', '\\n    ', '<', 'div', '\\n      ', 'className', '=', '{', 'className', '}', '\\n      ', 'onPointerEnter', '=', '{', '(', ')', ' ', '=>', ' ', 'setHover', '(', 'true', ')', '}', '\\n      ', 'onPointerLeave', '=', '{', '(', ')', ' ', '=>', ' ', 'setHover', '(', 'false', ')', '}', '\\n    ', '>', '\\n      ', '<', 'h1', '>', '{', 'score', '}', '</', 'h1', '>', '\\n      ', '<', 'button', ' ', 'onClick', '=', '{', '(', ')', ' ', '=>', ' ', 'setScore', '(', 'score', ' + ', '1', ')', '}', '>', '\\n        Add one\\n      ', '</', 'button', '>', '\\n    ', '</', 'div', '>', '\\n  ', ')', ';', '\\n', '}', '\\n\\n', 'Show more', '\\n', 'As you can see, when one counter is updated, only the state for that component is updated:', '\\n', 'Updating state', '\\n', 'React will keep the state around for as long as you render the same component at the same position in the tree. To see this, increment both counters, then remove the second component by unchecking “Render the second counter” checkbox, and then add it back by ticking it again:', '\\n', 'App.js', 'App.js', ' Reset', 'Fork', 'import', ' ', '{', ' ', 'useState', ' ', '}', ' ', 'from', ' ', \"'react'\", ';', '\\n\\n', 'export', ' ', 'default', ' ', 'function', ' ', 'App', '(', ')', ' ', '{', '\\n  ', 'const', ' ', '[', 'showB', ',', ' ', 'setShowB', ']', ' = ', 'useState', '(', 'true', ')', ';', '\\n  ', 'return', ' ', '(', '\\n    ', '<', 'div', '>', '\\n      ', '<', 'Counter', ' ', '/>', '\\n      ', '{', 'showB', ' && ', '<', 'Counter', ' ', '/>', '}', ' \\n      ', '<', 'label', '>', '\\n        ', '<', 'input', '\\n          ', 'type', '=', '\"checkbox\"', '\\n          ', 'checked', '=', '{', 'showB', '}', '\\n          ', 'onChange', '=', '{', 'e', ' ', '=>', ' ', '{', '\\n            ', 'setShowB', '(', 'e', '.', 'target', '.', 'checked', ')', '\\n          ', '}', '}', '\\n        ', '/>', '\\n        Render the second counter\\n      ', '</', 'label', '>', '\\n    ', '</', 'div', '>', '\\n  ', ')', ';', '\\n', '}', '\\n\\n', 'function', ' ', 'Counter', '(', ')', ' ', '{', '\\n  ', 'const', ' ', '[', 'score', ',', ' ', 'setScore', ']', ' = ', 'useState', '(', '0', ')', ';', '\\n  ', 'const', ' ', '[', 'hover', ',', ' ', 'setHover', ']', ' = ', 'useState', '(', 'false', ')', ';', '\\n\\n  ', 'let', ' ', 'className', ' = ', \"'counter'\", ';', '\\n  ', 'if', ' ', '(', 'hover', ')', ' ', '{', '\\n    ', 'className', ' += ', \"' hover'\", ';', '\\n  ', '}', '\\n\\n  ', 'return', ' ', '(', '\\n    ', '<', 'div', '\\n      ', 'className', '=', '{', 'className', '}', '\\n      ', 'onPointerEnter', '=', '{', '(', ')', ' ', '=>', ' ', 'setHover', '(', 'true', ')', '}', '\\n      ', 'onPointerLeave', '=', '{', '(', ')', ' ', '=>', ' ', 'setHover', '(', 'false', ')', '}', '\\n    ', '>', '\\n      ', '<', 'h1', '>', '{', 'score', '}', '</', 'h1', '>', '\\n      ', '<', 'button', ' ', 'onClick', '=', '{', '(', ')', ' ', '=>', ' ', 'setScore', '(', 'score', ' + ', '1', ')', '}', '>', '\\n        Add one\\n      ', '</', 'button', '>', '\\n    ', '</', 'div', '>', '\\n  ', ')', ';', '\\n', '}', '\\n\\n', 'Show more', '\\n', 'Notice how the moment you stop rendering the second counter, its state disappears completely. That’s because when React removes a component, it destroys its state.', '\\n', 'Deleting a component', '\\n', 'When you tick “Render the second counter”, a second ', 'Counter', ' and its state are initialized from scratch (', 'score = 0', ') and added to the DOM.', '\\n', 'Adding a component', '\\n', 'React preserves a component’s state for as long as it’s being rendered at its position in the UI tree.', ' If it gets removed, or a different component gets rendered at the same position, React discards its state.', '\\n', 'Same component at the same position preserves state ', '\\n', 'In this example, there are two different ', '<Counter />', ' tags:', '\\n', 'App.js', 'App.js', ' Reset', 'Fork', 'import', ' ', '{', ' ', 'useState', ' ', '}', ' ', 'from', ' ', \"'react'\", ';', '\\n\\n', 'export', ' ', 'default', ' ', 'function', ' ', 'App', '(', ')', ' ', '{', '\\n  ', 'const', ' ', '[', 'isFancy', ',', ' ', 'setIsFancy', ']', ' = ', 'useState', '(', 'false', ')', ';', '\\n  ', 'return', ' ', '(', '\\n    ', '<', 'div', '>', '\\n      ', '{', 'isFancy', ' ? ', '(', '\\n        ', '<', 'Counter', ' ', 'isFancy', '=', '{', 'true', '}', ' ', '/>', ' \\n      ', ')', ' : ', '(', '\\n        ', '<', 'Counter', ' ', 'isFancy', '=', '{', 'false', '}', ' ', '/>', ' \\n      ', ')', '}', '\\n      ', '<', 'label', '>', '\\n        ', '<', 'input', '\\n          ', 'type', '=', '\"checkbox\"', '\\n          ', 'checked', '=', '{', 'isFancy', '}', '\\n          ', 'onChange', '=', '{', 'e', ' ', '=>', ' ', '{', '\\n            ', 'setIsFancy', '(', 'e', '.', 'target', '.', 'checked', ')', '\\n          ', '}', '}', '\\n        ', '/>', '\\n        Use fancy styling\\n      ', '</', 'label', '>', '\\n    ', '</', 'div', '>', '\\n  ', ')', ';', '\\n', '}', '\\n\\n', 'function', ' ', 'Counter', '(', '{', ' ', 'isFancy', ' ', '}', ')', ' ', '{', '\\n  ', 'const', ' ', '[', 'score', ',', ' ', 'setScore', ']', ' = ', 'useState', '(', '0', ')', ';', '\\n  ', 'const', ' ', '[', 'hover', ',', ' ', 'setHover', ']', ' = ', 'useState', '(', 'false', ')', ';', '\\n\\n  ', 'let', ' ', 'className', ' = ', \"'counter'\", ';', '\\n  ', 'if', ' ', '(', 'hover', ')', ' ', '{', '\\n    ', 'className', ' += ', \"' hover'\", ';', '\\n  ', '}', '\\n  ', 'if', ' ', '(', 'isFancy', ')', ' ', '{', '\\n    ', 'className', ' += ', \"' fancy'\", ';', '\\n  ', '}', '\\n\\n  ', 'return', ' ', '(', '\\n    ', '<', 'div', '\\n      ', 'className', '=', '{', 'className', '}', '\\n      ', 'onPointerEnter', '=', '{', '(', ')', ' ', '=>', ' ', 'setHover', '(', 'true', ')', '}', '\\n      ', 'onPointerLeave', '=', '{', '(', ')', ' ', '=>', ' ', 'setHover', '(', 'false', ')', '}', '\\n    ', '>', '\\n      ', '<', 'h1', '>', '{', 'score', '}', '</', 'h1', '>', '\\n      ', '<', 'button', ' ', 'onClick', '=', '{', '(', ')', ' ', '=>', ' ', 'setScore', '(', 'score', ' + ', '1', ')', '}', '>', '\\n        Add one\\n      ', '</', 'button', '>', '\\n    ', '</', 'div', '>', '\\n  ', ')', ';', '\\n', '}', '\\n\\n', 'Show more', '\\n', 'When you tick or clear the checkbox, the counter state does not get reset. Whether ', 'isFancy', ' is ', 'true', ' or ', 'false', ', you always have a ', '<Counter />', ' as the first child of the ', 'div', ' returned from the root ', 'App', ' component:', '\\n', 'Updating the ', 'App', ' state does not reset the ', 'Counter', ' because ', 'Counter', ' stays in the same position', '\\n', 'It’s the same component at the same position, so from React’s perspective, it’s the same counter.', '\\n', 'Pitfall', 'Remember that ', 'it’s the position in the UI tree—not in the JSX markup—that matters to React!', ' This component has two ', 'return', ' clauses with different ', '<Counter />', ' JSX tags inside and outside the ', 'if', ':', 'App.js', 'App.js', ' Reset', 'Fork', 'import', ' ', '{', ' ', 'useState', ' ', '}', ' ', 'from', ' ', \"'react'\", ';', '\\n\\n', 'export', ' ', 'default', ' ', 'function', ' ', 'App', '(', ')', ' ', '{', '\\n  ', 'const', ' ', '[', 'isFancy', ',', ' ', 'setIsFancy', ']', ' = ', 'useState', '(', 'false', ')', ';', '\\n  ', 'if', ' ', '(', 'isFancy', ')', ' ', '{', '\\n    ', 'return', ' ', '(', '\\n      ', '<', 'div', '>', '\\n        ', '<', 'Counter', ' ', 'isFancy', '=', '{', 'true', '}', ' ', '/>', '\\n        ', '<', 'label', '>', '\\n          ', '<', 'input', '\\n            ', 'type', '=', '\"checkbox\"', '\\n            ', 'checked', '=', '{', 'isFancy', '}', '\\n            ', 'onChange', '=', '{', 'e', ' ', '=>', ' ', '{', '\\n              ', 'setIsFancy', '(', 'e', '.', 'target', '.', 'checked', ')', '\\n            ', '}', '}', '\\n          ', '/>', '\\n          Use fancy styling\\n        ', '</', 'label', '>', '\\n      ', '</', 'div', '>', '\\n    ', ')', ';', '\\n  ', '}', '\\n  ', 'return', ' ', '(', '\\n    ', '<', 'div', '>', '\\n      ', '<', 'Counter', ' ', 'isFancy', '=', '{', 'false', '}', ' ', '/>', '\\n      ', '<', 'label', '>', '\\n        ', '<', 'input', '\\n          ', 'type', '=', '\"checkbox\"', '\\n          ', 'checked', '=', '{', 'isFancy', '}', '\\n          ', 'onChange', '=', '{', 'e', ' ', '=>', ' ', '{', '\\n            ', 'setIsFancy', '(', 'e', '.', 'target', '.', 'checked', ')', '\\n          ', '}', '}', '\\n        ', '/>', '\\n        Use fancy styling\\n      ', '</', 'label', '>', '\\n    ', '</', 'div', '>', '\\n  ', ')', ';', '\\n', '}', '\\n\\n', 'function', ' ', 'Counter', '(', '{', ' ', 'isFancy', ' ', '}', ')', ' ', '{', '\\n  ', 'const', ' ', '[', 'score', ',', ' ', 'setScore', ']', ' = ', 'useState', '(', '0', ')', ';', '\\n  ', 'const', ' ', '[', 'hover', ',', ' ', 'setHover', ']', ' = ', 'useState', '(', 'false', ')', ';', '\\n\\n  ', 'let', ' ', 'className', ' = ', \"'counter'\", ';', '\\n  ', 'if', ' ', '(', 'hover', ')', ' ', '{', '\\n    ', 'className', ' += ', \"' hover'\", ';', '\\n  ', '}', '\\n  ', 'if', ' ', '(', 'isFancy', ')', ' ', '{', '\\n    ', 'className', ' += ', \"' fancy'\", ';', '\\n  ', '}', '\\n\\n  ', 'return', ' ', '(', '\\n    ', '<', 'div', '\\n      ', 'className', '=', '{', 'className', '}', '\\n      ', 'onPointerEnter', '=', '{', '(', ')', ' ', '=>', ' ', 'setHover', '(', 'true', ')', '}', '\\n      ', 'onPointerLeave', '=', '{', '(', ')', ' ', '=>', ' ', 'setHover', '(', 'false', ')', '}', '\\n    ', '>', '\\n      ', '<', 'h1', '>', '{', 'score', '}', '</', 'h1', '>', '\\n      ', '<', 'button', ' ', 'onClick', '=', '{', '(', ')', ' ', '=>', ' ', 'setScore', '(', 'score', ' + ', '1', ')', '}', '>', '\\n        Add one\\n      ', '</', 'button', '>', '\\n    ', '</', 'div', '>', '\\n  ', ')', ';', '\\n', '}', '\\n\\n', 'Show more', 'You might expect the state to reset when you tick checkbox, but it doesn’t! This is because ', 'both of these ', '<Counter />', ' tags are rendered at the same position.', ' React doesn’t know where you place the conditions in your function. All it “sees” is the tree you return.', 'In both cases, the ', 'App', ' component returns a ', '<div>', ' with ', '<Counter />', ' as a first child. To React, these two counters have the same “address”: the first child of the first child of the root. This is how React matches them up between the previous and next renders, regardless of how you structure your logic.', '\\n', 'Different components at the same position reset state ', '\\n', 'In this example, ticking the checkbox will replace ', '<Counter>', ' with a ', '<p>', ':', '\\n', 'App.js', 'App.js', ' Reset', 'Fork', 'import', ' ', '{', ' ', 'useState', ' ', '}', ' ', 'from', ' ', \"'react'\", ';', '\\n\\n', 'export', ' ', 'default', ' ', 'function', ' ', 'App', '(', ')', ' ', '{', '\\n  ', 'const', ' ', '[', 'isPaused', ',', ' ', 'setIsPaused', ']', ' = ', 'useState', '(', 'false', ')', ';', '\\n  ', 'return', ' ', '(', '\\n    ', '<', 'div', '>', '\\n      ', '{', 'isPaused', ' ? ', '(', '\\n        ', '<', 'p', '>', 'See you later!', '</', 'p', '>', ' \\n      ', ')', ' : ', '(', '\\n        ', '<', 'Counter', ' ', '/>', ' \\n      ', ')', '}', '\\n      ', '<', 'label', '>', '\\n        ', '<', 'input', '\\n          ', 'type', '=', '\"checkbox\"', '\\n          ', 'checked', '=', '{', 'isPaused', '}', '\\n          ', 'onChange', '=', '{', 'e', ' ', '=>', ' ', '{', '\\n            ', 'setIsPaused', '(', 'e', '.', 'target', '.', 'checked', ')', '\\n          ', '}', '}', '\\n        ', '/>', '\\n        Take a break\\n      ', '</', 'label', '>', '\\n    ', '</', 'div', '>', '\\n  ', ')', ';', '\\n', '}', '\\n\\n', 'function', ' ', 'Counter', '(', ')', ' ', '{', '\\n  ', 'const', ' ', '[', 'score', ',', ' ', 'setScore', ']', ' = ', 'useState', '(', '0', ')', ';', '\\n  ', 'const', ' ', '[', 'hover', ',', ' ', 'setHover', ']', ' = ', 'useState', '(', 'false', ')', ';', '\\n\\n  ', 'let', ' ', 'className', ' = ', \"'counter'\", ';', '\\n  ', 'if', ' ', '(', 'hover', ')', ' ', '{', '\\n    ', 'className', ' += ', \"' hover'\", ';', '\\n  ', '}', '\\n\\n  ', 'return', ' ', '(', '\\n    ', '<', 'div', '\\n      ', 'className', '=', '{', 'className', '}', '\\n      ', 'onPointerEnter', '=', '{', '(', ')', ' ', '=>', ' ', 'setHover', '(', 'true', ')', '}', '\\n      ', 'onPointerLeave', '=', '{', '(', ')', ' ', '=>', ' ', 'setHover', '(', 'false', ')', '}', '\\n    ', '>', '\\n      ', '<', 'h1', '>', '{', 'score', '}', '</', 'h1', '>', '\\n      ', '<', 'button', ' ', 'onClick', '=', '{', '(', ')', ' ', '=>', ' ', 'setScore', '(', 'score', ' + ', '1', ')', '}', '>', '\\n        Add one\\n      ', '</', 'button', '>', '\\n    ', '</', 'div', '>', '\\n  ', ')', ';', '\\n', '}', '\\n\\n', 'Show more', '\\n', 'Here, you switch between ', 'different', ' component types at the same position. Initially, the first child of the ', '<div>', ' contained a ', 'Counter', '. But when you swapped in a ', 'p', ', React removed the ', 'Counter', ' from the UI tree and destroyed its state.', '\\n', 'When ', 'Counter', ' changes to ', 'p', ', the ', 'Counter', ' is deleted and the ', 'p', ' is added', '\\n', 'When switching back, the ', 'p', ' is deleted and the ', 'Counter', ' is added', '\\n', 'Also, ', 'when you render a different component in the same position, it resets the state of its entire subtree.', ' To see how this works, increment the counter and then tick the checkbox:', '\\n', 'App.js', 'App.js', ' Reset', 'Fork', 'import', ' ', '{', ' ', 'useState', ' ', '}', ' ', 'from', ' ', \"'react'\", ';', '\\n\\n', 'export', ' ', 'default', ' ', 'function', ' ', 'App', '(', ')', ' ', '{', '\\n  ', 'const', ' ', '[', 'isFancy', ',', ' ', 'setIsFancy', ']', ' = ', 'useState', '(', 'false', ')', ';', '\\n  ', 'return', ' ', '(', '\\n    ', '<', 'div', '>', '\\n      ', '{', 'isFancy', ' ? ', '(', '\\n        ', '<', 'div', '>', '\\n          ', '<', 'Counter', ' ', 'isFancy', '=', '{', 'true', '}', ' ', '/>', ' \\n        ', '</', 'div', '>', '\\n      ', ')', ' : ', '(', '\\n        ', '<', 'section', '>', '\\n          ', '<', 'Counter', ' ', 'isFancy', '=', '{', 'false', '}', ' ', '/>', '\\n        ', '</', 'section', '>', '\\n      ', ')', '}', '\\n      ', '<', 'label', '>', '\\n        ', '<', 'input', '\\n          ', 'type', '=', '\"checkbox\"', '\\n          ', 'checked', '=', '{', 'isFancy', '}', '\\n          ', 'onChange', '=', '{', 'e', ' ', '=>', ' ', '{', '\\n            ', 'setIsFancy', '(', 'e', '.', 'target', '.', 'checked', ')', '\\n          ', '}', '}', '\\n        ', '/>', '\\n        Use fancy styling\\n      ', '</', 'label', '>', '\\n    ', '</', 'div', '>', '\\n  ', ')', ';', '\\n', '}', '\\n\\n', 'function', ' ', 'Counter', '(', '{', ' ', 'isFancy', ' ', '}', ')', ' ', '{', '\\n  ', 'const', ' ', '[', 'score', ',', ' ', 'setScore', ']', ' = ', 'useState', '(', '0', ')', ';', '\\n  ', 'const', ' ', '[', 'hover', ',', ' ', 'setHover', ']', ' = ', 'useState', '(', 'false', ')', ';', '\\n\\n  ', 'let', ' ', 'className', ' = ', \"'counter'\", ';', '\\n  ', 'if', ' ', '(', 'hover', ')', ' ', '{', '\\n    ', 'className', ' += ', \"' hover'\", ';', '\\n  ', '}', '\\n  ', 'if', ' ', '(', 'isFancy', ')', ' ', '{', '\\n    ', 'className', ' += ', \"' fancy'\", ';', '\\n  ', '}', '\\n\\n  ', 'return', ' ', '(', '\\n    ', '<', 'div', '\\n      ', 'className', '=', '{', 'className', '}', '\\n      ', 'onPointerEnter', '=', '{', '(', ')', ' ', '=>', ' ', 'setHover', '(', 'true', ')', '}', '\\n      ', 'onPointerLeave', '=', '{', '(', ')', ' ', '=>', ' ', 'setHover', '(', 'false', ')', '}', '\\n    ', '>', '\\n      ', '<', 'h1', '>', '{', 'score', '}', '</', 'h1', '>', '\\n      ', '<', 'button', ' ', 'onClick', '=', '{', '(', ')', ' ', '=>', ' ', 'setScore', '(', 'score', ' + ', '1', ')', '}', '>', '\\n        Add one\\n      ', '</', 'button', '>', '\\n    ', '</', 'div', '>', '\\n  ', ')', ';', '\\n', '}', '\\n\\n', 'Show more', '\\n', 'The counter state gets reset when you click the checkbox. Although you render a ', 'Counter', ', the first child of the ', 'div', ' changes from a ', 'div', ' to a ', 'section', '. When the child ', 'div', ' was removed from the DOM, the whole tree below it (including the ', 'Counter', ' and its state) was destroyed as well.', '\\n', 'When ', 'section', ' changes to ', 'div', ', the ', 'section', ' is deleted and the new ', 'div', ' is added', '\\n', 'When switching back, the ', 'div', ' is deleted and the new ', 'section', ' is added', '\\n', 'As a rule of thumb, ', 'if you want to preserve the state between re-renders, the structure of your tree needs to “match up”', ' from one render to another. If the structure is different, the state gets destroyed because React destroys state when it removes a component from the tree.', '\\n', 'Pitfall', 'This is why you should not nest component function definitions.', 'Here, the ', 'MyTextField', ' component function is defined ', 'inside', ' ', 'MyComponent', ':', 'App.js', 'App.js', ' Reset', 'Fork', 'import', ' ', '{', ' ', 'useState', ' ', '}', ' ', 'from', ' ', \"'react'\", ';', '\\n\\n', 'export', ' ', 'default', ' ', 'function', ' ', 'MyComponent', '(', ')', ' ', '{', '\\n  ', 'const', ' ', '[', 'counter', ',', ' ', 'setCounter', ']', ' = ', 'useState', '(', '0', ')', ';', '\\n\\n  ', 'function', ' ', 'MyTextField', '(', ')', ' ', '{', '\\n    ', 'const', ' ', '[', 'text', ',', ' ', 'setText', ']', ' = ', 'useState', '(', \"''\", ')', ';', '\\n\\n    ', 'return', ' ', '(', '\\n      ', '<', 'input', '\\n        ', 'value', '=', '{', 'text', '}', '\\n        ', 'onChange', '=', '{', 'e', ' ', '=>', ' ', 'setText', '(', 'e', '.', 'target', '.', 'value', ')', '}', '\\n      ', '/>', '\\n    ', ')', ';', '\\n  ', '}', '\\n\\n  ', 'return', ' ', '(', '\\n    ', '<', '>', '\\n      ', '<', 'MyTextField', ' ', '/>', '\\n      ', '<', 'button', ' ', 'onClick', '=', '{', '(', ')', ' ', '=>', ' ', '{', '\\n        ', 'setCounter', '(', 'counter', ' + ', '1', ')', '\\n      ', '}', '}', '>', 'Clicked ', '{', 'counter', '}', ' times', '</', 'button', '>', '\\n    ', '</', '>', '\\n  ', ')', ';', '\\n', '}', '\\n\\n', 'Show more', 'Every time you click the button, the input state disappears! This is because a ', 'different', ' ', 'MyTextField', ' function is created for every render of ', 'MyComponent', '. You’re rendering a ', 'different', ' component in the same position, so React resets all state below. This leads to bugs and performance problems. To avoid this problem, ', 'always declare component functions at the top level, and don’t nest their definitions.', '\\n', 'Resetting state at the same position ', '\\n', 'By default, React preserves state of a component while it stays at the same position. Usually, this is exactly what you want, so it makes sense as the default behavior. But sometimes, you may want to reset a component’s state. Consider this app that lets two players keep track of their scores during each turn:', '\\n', 'App.js', 'App.js', ' Reset', 'Fork', 'import', ' ', '{', ' ', 'useState', ' ', '}', ' ', 'from', ' ', \"'react'\", ';', '\\n\\n', 'export', ' ', 'default', ' ', 'function', ' ', 'Scoreboard', '(', ')', ' ', '{', '\\n  ', 'const', ' ', '[', 'isPlayerA', ',', ' ', 'setIsPlayerA', ']', ' = ', 'useState', '(', 'true', ')', ';', '\\n  ', 'return', ' ', '(', '\\n    ', '<', 'div', '>', '\\n      ', '{', 'isPlayerA', ' ? ', '(', '\\n        ', '<', 'Counter', ' ', 'person', '=', '\"Taylor\"', ' ', '/>', '\\n      ', ')', ' : ', '(', '\\n        ', '<', 'Counter', ' ', 'person', '=', '\"Sarah\"', ' ', '/>', '\\n      ', ')', '}', '\\n      ', '<', 'button', ' ', 'onClick', '=', '{', '(', ')', ' ', '=>', ' ', '{', '\\n        ', 'setIsPlayerA', '(', '!', 'isPlayerA', ')', ';', '\\n      ', '}', '}', '>', '\\n        Next player!\\n      ', '</', 'button', '>', '\\n    ', '</', 'div', '>', '\\n  ', ')', ';', '\\n', '}', '\\n\\n', 'function', ' ', 'Counter', '(', '{', ' ', 'person', ' ', '}', ')', ' ', '{', '\\n  ', 'const', ' ', '[', 'score', ',', ' ', 'setScore', ']', ' = ', 'useState', '(', '0', ')', ';', '\\n  ', 'const', ' ', '[', 'hover', ',', ' ', 'setHover', ']', ' = ', 'useState', '(', 'false', ')', ';', '\\n\\n  ', 'let', ' ', 'className', ' = ', \"'counter'\", ';', '\\n  ', 'if', ' ', '(', 'hover', ')', ' ', '{', '\\n    ', 'className', ' += ', \"' hover'\", ';', '\\n  ', '}', '\\n\\n  ', 'return', ' ', '(', '\\n    ', '<', 'div', '\\n      ', 'className', '=', '{', 'className', '}', '\\n      ', 'onPointerEnter', '=', '{', '(', ')', ' ', '=>', ' ', 'setHover', '(', 'true', ')', '}', '\\n      ', 'onPointerLeave', '=', '{', '(', ')', ' ', '=>', ' ', 'setHover', '(', 'false', ')', '}', '\\n    ', '>', '\\n      ', '<', 'h1', '>', '{', 'person', '}', \"'s score: \", '{', 'score', '}', '</', 'h1', '>', '\\n      ', '<', 'button', ' ', 'onClick', '=', '{', '(', ')', ' ', '=>', ' ', 'setScore', '(', 'score', ' + ', '1', ')', '}', '>', '\\n        Add one\\n      ', '</', 'button', '>', '\\n    ', '</', 'div', '>', '\\n  ', ')', ';', '\\n', '}', '\\n\\n', 'Show more', '\\n', 'Currently, when you change the player, the score is preserved. The two ', 'Counter', 's appear in the same position, so React sees them as ', 'the same', ' ', 'Counter', ' whose ', 'person', ' prop has changed.', '\\n', 'But conceptually, in this app they should be two separate counters. They might appear in the same place in the UI, but one is a counter for Taylor, and another is a counter for Sarah.', '\\n', 'There are two ways to reset state when switching between them:', '\\n', '\\n', 'Render components in different positions', '\\n', 'Give each component an explicit identity with ', 'key', '\\n', '\\n', 'Option 1: Rendering a component in different positions ', '\\n', 'If you want these two ', 'Counter', 's to be independent, you can render them in two different positions:', '\\n', 'App.js', 'App.js', ' Reset', 'Fork', 'import', ' ', '{', ' ', 'useState', ' ', '}', ' ', 'from', ' ', \"'react'\", ';', '\\n\\n', 'export', ' ', 'default', ' ', 'function', ' ', 'Scoreboard', '(', ')', ' ', '{', '\\n  ', 'const', ' ', '[', 'isPlayerA', ',', ' ', 'setIsPlayerA', ']', ' = ', 'useState', '(', 'true', ')', ';', '\\n  ', 'return', ' ', '(', '\\n    ', '<', 'div', '>', '\\n      ', '{', 'isPlayerA', ' &&\\n        ', '<', 'Counter', ' ', 'person', '=', '\"Taylor\"', ' ', '/>', '\\n      ', '}', '\\n      ', '{', '!', 'isPlayerA', ' &&\\n        ', '<', 'Counter', ' ', 'person', '=', '\"Sarah\"', ' ', '/>', '\\n      ', '}', '\\n      ', '<', 'button', ' ', 'onClick', '=', '{', '(', ')', ' ', '=>', ' ', '{', '\\n        ', 'setIsPlayerA', '(', '!', 'isPlayerA', ')', ';', '\\n      ', '}', '}', '>', '\\n        Next player!\\n      ', '</', 'button', '>', '\\n    ', '</', 'div', '>', '\\n  ', ')', ';', '\\n', '}', '\\n\\n', 'function', ' ', 'Counter', '(', '{', ' ', 'person', ' ', '}', ')', ' ', '{', '\\n  ', 'const', ' ', '[', 'score', ',', ' ', 'setScore', ']', ' = ', 'useState', '(', '0', ')', ';', '\\n  ', 'const', ' ', '[', 'hover', ',', ' ', 'setHover', ']', ' = ', 'useState', '(', 'false', ')', ';', '\\n\\n  ', 'let', ' ', 'className', ' = ', \"'counter'\", ';', '\\n  ', 'if', ' ', '(', 'hover', ')', ' ', '{', '\\n    ', 'className', ' += ', \"' hover'\", ';', '\\n  ', '}', '\\n\\n  ', 'return', ' ', '(', '\\n    ', '<', 'div', '\\n      ', 'className', '=', '{', 'className', '}', '\\n      ', 'onPointerEnter', '=', '{', '(', ')', ' ', '=>', ' ', 'setHover', '(', 'true', ')', '}', '\\n      ', 'onPointerLeave', '=', '{', '(', ')', ' ', '=>', ' ', 'setHover', '(', 'false', ')', '}', '\\n    ', '>', '\\n      ', '<', 'h1', '>', '{', 'person', '}', \"'s score: \", '{', 'score', '}', '</', 'h1', '>', '\\n      ', '<', 'button', ' ', 'onClick', '=', '{', '(', ')', ' ', '=>', ' ', 'setScore', '(', 'score', ' + ', '1', ')', '}', '>', '\\n        Add one\\n      ', '</', 'button', '>', '\\n    ', '</', 'div', '>', '\\n  ', ')', ';', '\\n', '}', '\\n\\n', 'Show more', '\\n', '\\n', 'Initially, ', 'isPlayerA', ' is ', 'true', '. So the first position contains ', 'Counter', ' state, and the second one is empty.', '\\n', 'When you click the “Next player” button the first position clears but the second one now contains a ', 'Counter', '.', '\\n', '\\n', 'Initial state', 'Clicking “next”', 'Clicking “next” again', '\\n', 'Each ', 'Counter', '’s state gets destroyed each time it’s removed from the DOM. This is why they reset every time you click the button.', '\\n', 'This solution is convenient when you only have a few independent components rendered in the same place. In this example, you only have two, so it’s not a hassle to render both separately in the JSX.', '\\n', 'Option 2: Resetting state with a key ', '\\n', 'There is also another, more generic, way to reset a component’s state.', '\\n', 'You might have seen ', 'key', 's when ', 'rendering lists.', ' Keys aren’t just for lists! You can use keys to make React distinguish between any components. By default, React uses order within the parent (“first counter”, “second counter”) to discern between components. But keys let you tell React that this is not just a ', 'first', ' counter, or a ', 'second', ' counter, but a specific counter—for example, ', 'Taylor’s', ' counter. This way, React will know ', 'Taylor’s', ' counter wherever it appears in the tree!', '\\n', 'In this example, the two ', '<Counter />', 's don’t share state even though they appear in the same place in JSX:', '\\n', 'App.js', 'App.js', ' Reset', 'Fork', 'import', ' ', '{', ' ', 'useState', ' ', '}', ' ', 'from', ' ', \"'react'\", ';', '\\n\\n', 'export', ' ', 'default', ' ', 'function', ' ', 'Scoreboard', '(', ')', ' ', '{', '\\n  ', 'const', ' ', '[', 'isPlayerA', ',', ' ', 'setIsPlayerA', ']', ' = ', 'useState', '(', 'true', ')', ';', '\\n  ', 'return', ' ', '(', '\\n    ', '<', 'div', '>', '\\n      ', '{', 'isPlayerA', ' ? ', '(', '\\n        ', '<', 'Counter', ' ', 'key', '=', '\"Taylor\"', ' ', 'person', '=', '\"Taylor\"', ' ', '/>', '\\n      ', ')', ' : ', '(', '\\n        ', '<', 'Counter', ' ', 'key', '=', '\"Sarah\"', ' ', 'person', '=', '\"Sarah\"', ' ', '/>', '\\n      ', ')', '}', '\\n      ', '<', 'button', ' ', 'onClick', '=', '{', '(', ')', ' ', '=>', ' ', '{', '\\n        ', 'setIsPlayerA', '(', '!', 'isPlayerA', ')', ';', '\\n      ', '}', '}', '>', '\\n        Next player!\\n      ', '</', 'button', '>', '\\n    ', '</', 'div', '>', '\\n  ', ')', ';', '\\n', '}', '\\n\\n', 'function', ' ', 'Counter', '(', '{', ' ', 'person', ' ', '}', ')', ' ', '{', '\\n  ', 'const', ' ', '[', 'score', ',', ' ', 'setScore', ']', ' = ', 'useState', '(', '0', ')', ';', '\\n  ', 'const', ' ', '[', 'hover', ',', ' ', 'setHover', ']', ' = ', 'useState', '(', 'false', ')', ';', '\\n\\n  ', 'let', ' ', 'className', ' = ', \"'counter'\", ';', '\\n  ', 'if', ' ', '(', 'hover', ')', ' ', '{', '\\n    ', 'className', ' += ', \"' hover'\", ';', '\\n  ', '}', '\\n\\n  ', 'return', ' ', '(', '\\n    ', '<', 'div', '\\n      ', 'className', '=', '{', 'className', '}', '\\n      ', 'onPointerEnter', '=', '{', '(', ')', ' ', '=>', ' ', 'setHover', '(', 'true', ')', '}', '\\n      ', 'onPointerLeave', '=', '{', '(', ')', ' ', '=>', ' ', 'setHover', '(', 'false', ')', '}', '\\n    ', '>', '\\n      ', '<', 'h1', '>', '{', 'person', '}', \"'s score: \", '{', 'score', '}', '</', 'h1', '>', '\\n      ', '<', 'button', ' ', 'onClick', '=', '{', '(', ')', ' ', '=>', ' ', 'setScore', '(', 'score', ' + ', '1', ')', '}', '>', '\\n        Add one\\n      ', '</', 'button', '>', '\\n    ', '</', 'div', '>', '\\n  ', ')', ';', '\\n', '}', '\\n\\n', 'Show more', '\\n', 'Switching between Taylor and Sarah does not preserve the state. This is because ', 'you gave them different ', 'key', 's:', '\\n', '{', 'isPlayerA', ' ? ', '(', '  ', '<', 'Counter', ' ', 'key', '=', '\"Taylor\"', ' ', 'person', '=', '\"Taylor\"', ' ', '/>', ')', ' : ', '(', '  ', '<', 'Counter', ' ', 'key', '=', '\"Sarah\"', ' ', 'person', '=', '\"Sarah\"', ' ', '/>', ')', '}', '\\n', 'Specifying a ', 'key', ' tells React to use the ', 'key', ' itself as part of the position, instead of their order within the parent. This is why, even though you render them in the same place in JSX, React sees them as two different counters, and so they will never share state. Every time a counter appears on the screen, its state is created. Every time it is removed, its state is destroyed. Toggling between them resets their state over and over.', '\\n', 'Note', 'Remember that keys are not globally unique. They only specify the position ', 'within the parent', '.', '\\n', 'Resetting a form with a key ', '\\n', 'Resetting state with a key is particularly useful when dealing with forms.', '\\n', 'In this chat app, the ', '<Chat>', ' component contains the text input state:', '\\n', 'App.js', 'ContactList.js', 'Chat.js', 'App.js', ' Reset', 'Fork', 'import', ' ', '{', ' ', 'useState', ' ', '}', ' ', 'from', ' ', \"'react'\", ';', '\\n', 'import', ' ', 'Chat', ' ', 'from', ' ', \"'./Chat.js'\", ';', '\\n', 'import', ' ', 'ContactList', ' ', 'from', ' ', \"'./ContactList.js'\", ';', '\\n\\n', 'export', ' ', 'default', ' ', 'function', ' ', 'Messenger', '(', ')', ' ', '{', '\\n  ', 'const', ' ', '[', 'to', ',', ' ', 'setTo', ']', ' = ', 'useState', '(', 'contacts', '[', '0', ']', ')', ';', '\\n  ', 'return', ' ', '(', '\\n    ', '<', 'div', '>', '\\n      ', '<', 'ContactList', '\\n        ', 'contacts', '=', '{', 'contacts', '}', '\\n        ', 'selectedContact', '=', '{', 'to', '}', '\\n        ', 'onSelect', '=', '{', 'contact', ' ', '=>', ' ', 'setTo', '(', 'contact', ')', '}', '\\n      ', '/>', '\\n      ', '<', 'Chat', ' ', 'contact', '=', '{', 'to', '}', ' ', '/>', '\\n    ', '</', 'div', '>', '\\n  ', ')', '\\n', '}', '\\n\\n', 'const', ' ', 'contacts', ' = ', '[', '\\n  ', '{', ' ', 'id', ':', ' ', '0', ',', ' ', 'name', ':', ' ', \"'Taylor'\", ',', ' ', 'email', ':', ' ', \"'taylor@mail.com'\", ' ', '}', ',', '\\n  ', '{', ' ', 'id', ':', ' ', '1', ',', ' ', 'name', ':', ' ', \"'Alice'\", ',', ' ', 'email', ':', ' ', \"'alice@mail.com'\", ' ', '}', ',', '\\n  ', '{', ' ', 'id', ':', ' ', '2', ',', ' ', 'name', ':', ' ', \"'Bob'\", ',', ' ', 'email', ':', ' ', \"'bob@mail.com'\", ' ', '}', '\\n', ']', ';', '\\n\\n', 'Show more', '\\n', 'Try entering something into the input, and then press “Alice” or “Bob” to choose a different recipient. You will notice that the input state is preserved because the ', '<Chat>', ' is rendered at the same position in the tree.', '\\n', 'In many apps, this may be the desired behavior, but not in a chat app!', ' You don’t want to let the user send a message they already typed to a wrong person due to an accidental click. To fix it, add a ', 'key', ':', '\\n', '<', 'Chat', ' ', 'key', '=', '{', 'to', '.', 'id', '}', ' ', 'contact', '=', '{', 'to', '}', ' ', '/>', '\\n', 'This ensures that when you select a different recipient, the ', 'Chat', ' component will be recreated from scratch, including any state in the tree below it. React will also re-create the DOM elements instead of reusing them.', '\\n', 'Now switching the recipient always clears the text field:', '\\n', 'App.js', 'ContactList.js', 'Chat.js', 'App.js', ' Reset', 'Fork', 'import', ' ', '{', ' ', 'useState', ' ', '}', ' ', 'from', ' ', \"'react'\", ';', '\\n', 'import', ' ', 'Chat', ' ', 'from', ' ', \"'./Chat.js'\", ';', '\\n', 'import', ' ', 'ContactList', ' ', 'from', ' ', \"'./ContactList.js'\", ';', '\\n\\n', 'export', ' ', 'default', ' ', 'function', ' ', 'Messenger', '(', ')', ' ', '{', '\\n  ', 'const', ' ', '[', 'to', ',', ' ', 'setTo', ']', ' = ', 'useState', '(', 'contacts', '[', '0', ']', ')', ';', '\\n  ', 'return', ' ', '(', '\\n    ', '<', 'div', '>', '\\n      ', '<', 'ContactList', '\\n        ', 'contacts', '=', '{', 'contacts', '}', '\\n        ', 'selectedContact', '=', '{', 'to', '}', '\\n        ', 'onSelect', '=', '{', 'contact', ' ', '=>', ' ', 'setTo', '(', 'contact', ')', '}', '\\n      ', '/>', '\\n      ', '<', 'Chat', ' ', 'key', '=', '{', 'to', '.', 'id', '}', ' ', 'contact', '=', '{', 'to', '}', ' ', '/>', '\\n    ', '</', 'div', '>', '\\n  ', ')', '\\n', '}', '\\n\\n', 'const', ' ', 'contacts', ' = ', '[', '\\n  ', '{', ' ', 'id', ':', ' ', '0', ',', ' ', 'name', ':', ' ', \"'Taylor'\", ',', ' ', 'email', ':', ' ', \"'taylor@mail.com'\", ' ', '}', ',', '\\n  ', '{', ' ', 'id', ':', ' ', '1', ',', ' ', 'name', ':', ' ', \"'Alice'\", ',', ' ', 'email', ':', ' ', \"'alice@mail.com'\", ' ', '}', ',', '\\n  ', '{', ' ', 'id', ':', ' ', '2', ',', ' ', 'name', ':', ' ', \"'Bob'\", ',', ' ', 'email', ':', ' ', \"'bob@mail.com'\", ' ', '}', '\\n', ']', ';', '\\n\\n', 'Show more', '\\n', 'Deep Dive', 'Preserving state for removed components ', 'Show Details', 'In a real chat app, you’d probably want to recover the input state when the user selects the previous recipient again. There are a few ways to keep the state “alive” for a component that’s no longer visible:', '\\n', 'You could render ', 'all', ' chats instead of just the current one, but hide all the others with CSS. The chats would not get removed from the tree, so their local state would be preserved. This solution works great for simple UIs. But it can get very slow if the hidden trees are large and contain a lot of DOM nodes.', '\\n', 'You could ', 'lift the state up', ' and hold the pending message for each recipient in the parent component. This way, when the child components get removed, it doesn’t matter, because it’s the parent that keeps the important information. This is the most common solution.', '\\n', 'You might also use a different source in addition to React state. For example, you probably want a message draft to persist even if the user accidentally closes the page. To implement this, you could have the ', 'Chat', ' component initialize its state by reading from the ', 'localStorage', ', and save the drafts there too.', '\\n', 'No matter which strategy you pick, a chat ', 'with Alice', ' is conceptually distinct from a chat ', 'with Bob', ', so it makes sense to give a ', 'key', ' to the ', '<Chat>', ' tree based on the current recipient.', '\\n', 'Recap', '\\n', 'React keeps state for as long as the same component is rendered at the same position.', '\\n', 'State is not kept in JSX tags. It’s associated with the tree position in which you put that JSX.', '\\n', 'You can force a subtree to reset its state by giving it a different key.', '\\n', 'Don’t nest component definitions, or you’ll reset state by accident.', '\\n', '\\n', 'Try out some challenges', '1', '. ', 'Fix disappearing input text ', '2', '. ', 'Swap two form fields ', '3', '. ', 'Reset a detail form ', '4', '. ', 'Clear an image while it’s loading ', '5', '. ', 'Fix misplaced state in the list ', 'Challenge', ' ', '1', ' of', ' ', '5', ': ', 'Fix disappearing input text ', 'This example shows a message when you press the button. However, pressing the button also accidentally resets the input. Why does this happen? Fix it so that pressing the button does not reset the input text.', 'App.js', 'App.js', ' Reset', 'Fork', 'import', ' ', '{', ' ', 'useState', ' ', '}', ' ', 'from', ' ', \"'react'\", ';', '\\n\\n', 'export', ' ', 'default', ' ', 'function', ' ', 'App', '(', ')', ' ', '{', '\\n  ', 'const', ' ', '[', 'showHint', ',', ' ', 'setShowHint', ']', ' = ', 'useState', '(', 'false', ')', ';', '\\n  ', 'if', ' ', '(', 'showHint', ')', ' ', '{', '\\n    ', 'return', ' ', '(', '\\n      ', '<', 'div', '>', '\\n        ', '<', 'p', '>', '<', 'i', '>', 'Hint: Your favorite city?', '</', 'i', '>', '</', 'p', '>', '\\n        ', '<', 'Form', ' ', '/>', '\\n        ', '<', 'button', ' ', 'onClick', '=', '{', '(', ')', ' ', '=>', ' ', '{', '\\n          ', 'setShowHint', '(', 'false', ')', ';', '\\n        ', '}', '}', '>', 'Hide hint', '</', 'button', '>', '\\n      ', '</', 'div', '>', '\\n    ', ')', ';', '\\n  ', '}', '\\n  ', 'return', ' ', '(', '\\n    ', '<', 'div', '>', '\\n      ', '<', 'Form', ' ', '/>', '\\n      ', '<', 'button', ' ', 'onClick', '=', '{', '(', ')', ' ', '=>', ' ', '{', '\\n        ', 'setShowHint', '(', 'true', ')', ';', '\\n      ', '}', '}', '>', 'Show hint', '</', 'button', '>', '\\n    ', '</', 'div', '>', '\\n  ', ')', ';', '\\n', '}', '\\n\\n', 'function', ' ', 'Form', '(', ')', ' ', '{', '\\n  ', 'const', ' ', '[', 'text', ',', ' ', 'setText', ']', ' = ', 'useState', '(', \"''\", ')', ';', '\\n  ', 'return', ' ', '(', '\\n    ', '<', 'textarea', '\\n      ', 'value', '=', '{', 'text', '}', '\\n      ', 'onChange', '=', '{', 'e', ' ', '=>', ' ', 'setText', '(', 'e', '.', 'target', '.', 'value', ')', '}', '\\n    ', '/>', '\\n  ', ')', ';', '\\n', '}', '\\n\\n', 'Show more', ' ', 'Show solution', 'Next ', 'Challenge', 'Previous', 'Sharing State Between Components', 'Next', 'Extracting State Logic into a Reducer', 'How do you like these docs?', 'Take our survey!', '©', '2024', 'Learn React', 'Quick Start', 'Installation', 'Describing the UI', 'Adding Interactivity', 'Managing State', 'Escape Hatches', 'API Reference', 'React APIs', 'React DOM APIs', 'Community', 'Code of Conduct', 'Meet the Team', 'Docs Contributors', 'Acknowledgements', 'More', 'Blog', 'React Native', 'Privacy', 'Terms', 'On this page', 'Overview', 'State is tied to a position in the render tree ', 'Same component at the same position preserves state ', 'Different components at the same position reset state ', 'Resetting state at the same position ', 'Option 1: Rendering a component in different positions ', 'Option 2: Resetting state with a key ', 'Resetting a form with a key ', 'Recap', 'Challenges', "}