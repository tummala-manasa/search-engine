{"id": 135, "url": "https://react.dev/learn/describing-the-ui", "title": "Describing the UI", "content": "'Describing the UI – React', 'Stream React Conf on May 15-16.', 'Learn more.', 'React', 'Search', '⌘', 'Ctrl', 'K', 'Learn', 'Reference', 'Community', 'Blog', 'GET STARTED', 'Quick Start', ' ', 'Tutorial: Tic-Tac-Toe', ' ', 'Thinking in React', ' ', 'Installation', ' ', 'Start a New React Project', ' ', 'Add React to an Existing Project', ' ', 'Editor Setup', ' ', 'Using TypeScript', ' ', 'React Developer Tools', ' ', 'LEARN REACT', 'Describing the UI', ' ', 'Your First Component', ' ', 'Importing and Exporting Components', ' ', 'Writing Markup with JSX', ' ', 'JavaScript in JSX with Curly Braces', ' ', 'Passing Props to a Component', ' ', 'Conditional Rendering', ' ', 'Rendering Lists', ' ', 'Keeping Components Pure', ' ', 'Your UI as a Tree', ' ', 'Adding Interactivity', ' ', 'Responding to Events', ' ', \"State: A Component's Memory\", ' ', 'Render and Commit', ' ', 'State as a Snapshot', ' ', 'Queueing a Series of State Updates', ' ', 'Updating Objects in State', ' ', 'Updating Arrays in State', ' ', 'Managing State', ' ', 'Reacting to Input with State', ' ', 'Choosing the State Structure', ' ', 'Sharing State Between Components', ' ', 'Preserving and Resetting State', ' ', 'Extracting State Logic into a Reducer', ' ', 'Passing Data Deeply with Context', ' ', 'Scaling Up with Reducer and Context', ' ', 'Escape Hatches', ' ', 'Referencing Values with Refs', ' ', 'Manipulating the DOM with Refs', ' ', 'Synchronizing with Effects', ' ', 'You Might Not Need an Effect', ' ', 'Lifecycle of Reactive Effects', ' ', 'Separating Events from Effects', ' ', 'Removing Effect Dependencies', ' ', 'Reusing Logic with Custom Hooks', ' ', 'Is this page useful?', 'Learn React', 'Describing the UI', 'React is a JavaScript library for rendering user interfaces (UI). UI is built from small units like buttons, text, and images. React lets you combine them into reusable, nestable ', 'components.', ' From web sites to phone apps, everything on the screen can be broken down into components. In this chapter, you’ll learn to create, customize, and conditionally display React components.', '\\n', 'In this chapter', '\\n', 'How to write your first React component', '\\n', 'When and how to create multi-component files', '\\n', 'How to add markup to JavaScript with JSX', '\\n', 'How to use curly braces with JSX to access JavaScript functionality from your components', '\\n', 'How to configure components with props', '\\n', 'How to conditionally render components', '\\n', 'How to render multiple components at a time', '\\n', 'How to avoid confusing bugs by keeping components pure', '\\n', 'Why understanding your UI as trees is useful', '\\n', '\\n', 'Your first component ', '\\n', 'React applications are built from isolated pieces of UI called ', 'components', '. A React component is a JavaScript function that you can sprinkle with markup. Components can be as small as a button, or as large as an entire page. Here is a ', 'Gallery', ' component rendering three ', 'Profile', ' components:', '\\n', 'App.js', 'App.js', ' Reset', 'Fork', 'function', ' ', 'Profile', '(', ')', ' ', '{', '\\n  ', 'return', ' ', '(', '\\n    ', '<', 'img', '\\n      ', 'src', '=', '\"https://i.imgur.com/MK3eW3As.jpg\"', '\\n      ', 'alt', '=', '\"Katherine Johnson\"', '\\n    ', '/>', '\\n  ', ')', ';', '\\n', '}', '\\n\\n', 'export', ' ', 'default', ' ', 'function', ' ', 'Gallery', '(', ')', ' ', '{', '\\n  ', 'return', ' ', '(', '\\n    ', '<', 'section', '>', '\\n      ', '<', 'h1', '>', 'Amazing scientists', '</', 'h1', '>', '\\n      ', '<', 'Profile', ' ', '/>', '\\n      ', '<', 'Profile', ' ', '/>', '\\n      ', '<', 'Profile', ' ', '/>', '\\n    ', '</', 'section', '>', '\\n  ', ')', ';', '\\n', '}', '\\n\\n', 'Show more', '\\n', 'Ready to learn this topic?', 'Read ', 'Your First Component', ' to learn how to declare and use React components.', 'Read More', '\\n', 'Importing and exporting components ', '\\n', 'You can declare many components in one file, but large files can get difficult to navigate. To solve this, you can ', 'export', ' a component into its own file, and then ', 'import', ' that component from another file:', '\\n', 'Gallery.js', 'Profile.js', 'Gallery.js', ' Reset', 'Fork', 'import', ' ', 'Profile', ' ', 'from', ' ', \"'./Profile.js'\", ';', '\\n\\n', 'export', ' ', 'default', ' ', 'function', ' ', 'Gallery', '(', ')', ' ', '{', '\\n  ', 'return', ' ', '(', '\\n    ', '<', 'section', '>', '\\n      ', '<', 'h1', '>', 'Amazing scientists', '</', 'h1', '>', '\\n      ', '<', 'Profile', ' ', '/>', '\\n      ', '<', 'Profile', ' ', '/>', '\\n      ', '<', 'Profile', ' ', '/>', '\\n    ', '</', 'section', '>', '\\n  ', ')', ';', '\\n', '}', '\\n\\n', '\\n', 'Ready to learn this topic?', 'Read ', 'Importing and Exporting Components', ' to learn how to split components into their own files.', 'Read More', '\\n', 'Writing markup with JSX ', '\\n', 'Each React component is a JavaScript function that may contain some markup that React renders into the browser. React components use a syntax extension called JSX to represent that markup. JSX looks a lot like HTML, but it is a bit stricter and can display dynamic information.', '\\n', 'If we paste existing HTML markup into a React component, it won’t always work:', '\\n', 'App.js', 'App.js', ' Reset', 'Fork', 'export', ' ', 'default', ' ', 'function', ' ', 'TodoList', '(', ')', ' ', '{', '\\n  ', 'return', ' ', '(', '\\n    ', \"// This doesn't quite work!\", '\\n    ', '<', 'h1', '>', \"Hedy Lamarr's Todos\", '</', 'h1', '>', '\\n    <', 'img\\n      ', 'src', '=', '\"https://i.imgur.com/yXOvdOSs.jpg\"', '\\n      ', 'alt', '=', '\"Hedy Lamarr\"', '\\n      ', 'class', '=', '\"photo\"', '\\n    >\\n    ', '<', 'ul', '>', '\\n      ', '<', 'li', '>', 'Invent new traffic lights\\n      ', '<', 'li', '>', 'Rehearse a movie scene\\n      ', '<', 'li', '>', 'Improve spectrum technology\\n    ', '</', 'ul', '>', '\\n\\n', 'Show more', '\\n', 'If you have existing HTML like this, you can fix it using a ', 'converter', ':', '\\n', 'App.js', 'App.js', ' Reset', 'Fork', 'export', ' ', 'default', ' ', 'function', ' ', 'TodoList', '(', ')', ' ', '{', '\\n  ', 'return', ' ', '(', '\\n    ', '<', '>', '\\n      ', '<', 'h1', '>', \"Hedy Lamarr's Todos\", '</', 'h1', '>', '\\n      ', '<', 'img', '\\n        ', 'src', '=', '\"https://i.imgur.com/yXOvdOSs.jpg\"', '\\n        ', 'alt', '=', '\"Hedy Lamarr\"', '\\n        ', 'className', '=', '\"photo\"', '\\n      ', '/>', '\\n      ', '<', 'ul', '>', '\\n        ', '<', 'li', '>', 'Invent new traffic lights', '</', 'li', '>', '\\n        ', '<', 'li', '>', 'Rehearse a movie scene', '</', 'li', '>', '\\n        ', '<', 'li', '>', 'Improve spectrum technology', '</', 'li', '>', '\\n      ', '</', 'ul', '>', '\\n    ', '</', '>', '\\n  ', ')', ';', '\\n', '}', '\\n\\n', 'Show more', '\\n', 'Ready to learn this topic?', 'Read ', 'Writing Markup with JSX', ' to learn how to write valid JSX.', 'Read More', '\\n', 'JavaScript in JSX with curly braces ', '\\n', 'JSX lets you write HTML-like markup inside a JavaScript file, keeping rendering logic and content in the same place. Sometimes you will want to add a little JavaScript logic or reference a dynamic property inside that markup. In this situation, you can use curly braces in your JSX to “open a window” to JavaScript:', '\\n', 'App.js', 'App.js', ' Reset', 'Fork', 'const', ' ', 'person', ' = ', '{', '\\n  ', 'name', ':', ' ', \"'Gregorio Y. Zara'\", ',', '\\n  ', 'theme', ':', ' ', '{', '\\n    ', 'backgroundColor', ':', ' ', \"'black'\", ',', '\\n    ', 'color', ':', ' ', \"'pink'\", '\\n  ', '}', '\\n', '}', ';', '\\n\\n', 'export', ' ', 'default', ' ', 'function', ' ', 'TodoList', '(', ')', ' ', '{', '\\n  ', 'return', ' ', '(', '\\n    ', '<', 'div', ' ', 'style', '=', '{', 'person', '.', 'theme', '}', '>', '\\n      ', '<', 'h1', '>', '{', 'person', '.', 'name', '}', \"'s Todos\", '</', 'h1', '>', '\\n      ', '<', 'img', '\\n        ', 'className', '=', '\"avatar\"', '\\n        ', 'src', '=', '\"https://i.imgur.com/7vQD0fPs.jpg\"', '\\n        ', 'alt', '=', '\"Gregorio Y. Zara\"', '\\n      ', '/>', '\\n      ', '<', 'ul', '>', '\\n        ', '<', 'li', '>', 'Improve the videophone', '</', 'li', '>', '\\n        ', '<', 'li', '>', 'Prepare aeronautics lectures', '</', 'li', '>', '\\n        ', '<', 'li', '>', 'Work on the alcohol-fuelled engine', '</', 'li', '>', '\\n      ', '</', 'ul', '>', '\\n    ', '</', 'div', '>', '\\n  ', ')', ';', '\\n', '}', '\\n\\n', 'Show more', '\\n', 'Ready to learn this topic?', 'Read ', 'JavaScript in JSX with Curly Braces', ' to learn how to access JavaScript data from JSX.', 'Read More', '\\n', 'Passing props to a component ', '\\n', 'React components use ', 'props', ' to communicate with each other. Every parent component can pass some information to its child components by giving them props. Props might remind you of HTML attributes, but you can pass any JavaScript value through them, including objects, arrays, functions, and even JSX!', '\\n', 'App.js', 'utils.js', 'App.js', ' Reset', 'Fork', 'import', ' ', '{', ' ', 'getImageUrl', ' ', '}', ' ', 'from', ' ', \"'./utils.js'\", '\\n\\n', 'export', ' ', 'default', ' ', 'function', ' ', 'Profile', '(', ')', ' ', '{', '\\n  ', 'return', ' ', '(', '\\n    ', '<', 'Card', '>', '\\n      ', '<', 'Avatar', '\\n        ', 'size', '=', '{', '100', '}', '\\n        ', 'person', '=', '{', '{', '\\n          ', 'name', ':', ' ', \"'Katsuko Saruhashi'\", ',', '\\n          ', 'imageId', ':', ' ', \"'YfeOqp2'\", '\\n        ', '}', '}', '\\n      ', '/>', '\\n    ', '</', 'Card', '>', '\\n  ', ')', ';', '\\n', '}', '\\n\\n', 'function', ' ', 'Avatar', '(', '{', ' ', 'person', ',', ' ', 'size', ' ', '}', ')', ' ', '{', '\\n  ', 'return', ' ', '(', '\\n    ', '<', 'img', '\\n      ', 'className', '=', '\"avatar\"', '\\n      ', 'src', '=', '{', 'getImageUrl', '(', 'person', ')', '}', '\\n      ', 'alt', '=', '{', 'person', '.', 'name', '}', '\\n      ', 'width', '=', '{', 'size', '}', '\\n      ', 'height', '=', '{', 'size', '}', '\\n    ', '/>', '\\n  ', ')', ';', '\\n', '}', '\\n\\n', 'function', ' ', 'Card', '(', '{', ' ', 'children', ' ', '}', ')', ' ', '{', '\\n  ', 'return', ' ', '(', '\\n    ', '<', 'div', ' ', 'className', '=', '\"card\"', '>', '\\n      ', '{', 'children', '}', '\\n    ', '</', 'div', '>', '\\n  ', ')', ';', '\\n', '}', '\\n\\n', 'Show more', '\\n', 'Ready to learn this topic?', 'Read ', 'Passing Props to a Component', ' to learn how to pass and read props.', 'Read More', '\\n', 'Conditional rendering ', '\\n', 'Your components will often need to display different things depending on different conditions. In React, you can conditionally render JSX using JavaScript syntax like ', 'if', ' statements, ', '&&', ', and ', '? :', ' operators.', '\\n', 'In this example, the JavaScript ', '&&', ' operator is used to conditionally render a checkmark:', '\\n', 'App.js', 'App.js', ' Reset', 'Fork', 'function', ' ', 'Item', '(', '{', ' ', 'name', ',', ' ', 'isPacked', ' ', '}', ')', ' ', '{', '\\n  ', 'return', ' ', '(', '\\n    ', '<', 'li', ' ', 'className', '=', '\"item\"', '>', '\\n      ', '{', 'name', '}', ' ', '{', 'isPacked', ' && ', \"'✔'\", '}', '\\n    ', '</', 'li', '>', '\\n  ', ')', ';', '\\n', '}', '\\n\\n', 'export', ' ', 'default', ' ', 'function', ' ', 'PackingList', '(', ')', ' ', '{', '\\n  ', 'return', ' ', '(', '\\n    ', '<', 'section', '>', '\\n      ', '<', 'h1', '>', \"Sally Ride's Packing List\", '</', 'h1', '>', '\\n      ', '<', 'ul', '>', '\\n        ', '<', 'Item', '\\n          ', 'isPacked', '=', '{', 'true', '}', '\\n          ', 'name', '=', '\"Space suit\"', '\\n        ', '/>', '\\n        ', '<', 'Item', '\\n          ', 'isPacked', '=', '{', 'true', '}', '\\n          ', 'name', '=', '\"Helmet with a golden leaf\"', '\\n        ', '/>', '\\n        ', '<', 'Item', '\\n          ', 'isPacked', '=', '{', 'false', '}', '\\n          ', 'name', '=', '\"Photo of Tam\"', '\\n        ', '/>', '\\n      ', '</', 'ul', '>', '\\n    ', '</', 'section', '>', '\\n  ', ')', ';', '\\n', '}', '\\n\\n', 'Show more', '\\n', 'Ready to learn this topic?', 'Read ', 'Conditional Rendering', ' to learn the different ways to render content conditionally.', 'Read More', '\\n', 'Rendering lists ', '\\n', 'You will often want to display multiple similar components from a collection of data. You can use JavaScript’s ', 'filter()', ' and ', 'map()', ' with React to filter and transform your array of data into an array of components.', '\\n', 'For each array item, you will need to specify a ', 'key', '. Usually, you will want to use an ID from the database as a ', 'key', '. Keys let React keep track of each item’s place in the list even if the list changes.', '\\n', 'App.js', 'data.js', 'utils.js', 'App.js', ' Reset', 'Fork', 'import', ' ', '{', ' ', 'people', ' ', '}', ' ', 'from', ' ', \"'./data.js'\", ';', '\\n', 'import', ' ', '{', ' ', 'getImageUrl', ' ', '}', ' ', 'from', ' ', \"'./utils.js'\", ';', '\\n\\n', 'export', ' ', 'default', ' ', 'function', ' ', 'List', '(', ')', ' ', '{', '\\n  ', 'const', ' ', 'listItems', ' = ', 'people', '.', 'map', '(', 'person', ' ', '=>', '\\n    ', '<', 'li', ' ', 'key', '=', '{', 'person', '.', 'id', '}', '>', '\\n      ', '<', 'img', '\\n        ', 'src', '=', '{', 'getImageUrl', '(', 'person', ')', '}', '\\n        ', 'alt', '=', '{', 'person', '.', 'name', '}', '\\n      ', '/>', '\\n      ', '<', 'p', '>', '\\n        ', '<', 'b', '>', '{', 'person', '.', 'name', '}', ':', '</', 'b', '>', '\\n        ', '{', \"' '\", ' + ', 'person', '.', 'profession', ' + ', \"' '\", '}', '\\n        known for ', '{', 'person', '.', 'accomplishment', '}', '\\n      ', '</', 'p', '>', '\\n    ', '</', 'li', '>', '\\n  ', ')', ';', '\\n  ', 'return', ' ', '(', '\\n    ', '<', 'article', '>', '\\n      ', '<', 'h1', '>', 'Scientists', '</', 'h1', '>', '\\n      ', '<', 'ul', '>', '{', 'listItems', '}', '</', 'ul', '>', '\\n    ', '</', 'article', '>', '\\n  ', ')', ';', '\\n', '}', '\\n\\n', 'Show more', '\\n', 'Ready to learn this topic?', 'Read ', 'Rendering Lists', ' to learn how to render a list of components, and how to choose a key.', 'Read More', '\\n', 'Keeping components pure ', '\\n', 'Some JavaScript functions are ', 'pure.', ' A pure function:', '\\n', '\\n', 'Minds its own business.', ' It does not change any objects or variables that existed before it was called.', '\\n', 'Same inputs, same output.', ' Given the same inputs, a pure function should always return the same result.', '\\n', '\\n', 'By strictly only writing your components as pure functions, you can avoid an entire class of baffling bugs and unpredictable behavior as your codebase grows. Here is an example of an impure component:', '\\n', 'App.js', 'App.js', ' Reset', 'Fork', 'let', ' ', 'guest', ' = ', '0', ';', '\\n\\n', 'function', ' ', 'Cup', '(', ')', ' ', '{', '\\n  ', '// Bad: changing a preexisting variable!', '\\n  ', 'guest', ' = ', 'guest', ' + ', '1', ';', '\\n  ', 'return', ' ', '<', 'h2', '>', 'Tea cup for guest #', '{', 'guest', '}', '</', 'h2', '>', ';', '\\n', '}', '\\n\\n', 'export', ' ', 'default', ' ', 'function', ' ', 'TeaSet', '(', ')', ' ', '{', '\\n  ', 'return', ' ', '(', '\\n    ', '<', '>', '\\n      ', '<', 'Cup', ' ', '/>', '\\n      ', '<', 'Cup', ' ', '/>', '\\n      ', '<', 'Cup', ' ', '/>', '\\n    ', '</', '>', '\\n  ', ')', ';', '\\n', '}', '\\n\\n', 'Show more', '\\n', 'You can make this component pure by passing a prop instead of modifying a preexisting variable:', '\\n', 'App.js', 'App.js', ' Reset', 'Fork', 'function', ' ', 'Cup', '(', '{', ' ', 'guest', ' ', '}', ')', ' ', '{', '\\n  ', 'return', ' ', '<', 'h2', '>', 'Tea cup for guest #', '{', 'guest', '}', '</', 'h2', '>', ';', '\\n', '}', '\\n\\n', 'export', ' ', 'default', ' ', 'function', ' ', 'TeaSet', '(', ')', ' ', '{', '\\n  ', 'return', ' ', '(', '\\n    ', '<', '>', '\\n      ', '<', 'Cup', ' ', 'guest', '=', '{', '1', '}', ' ', '/>', '\\n      ', '<', 'Cup', ' ', 'guest', '=', '{', '2', '}', ' ', '/>', '\\n      ', '<', 'Cup', ' ', 'guest', '=', '{', '3', '}', ' ', '/>', '\\n    ', '</', '>', '\\n  ', ')', ';', '\\n', '}', '\\n\\n', '\\n', 'Ready to learn this topic?', 'Read ', 'Keeping Components Pure', ' to learn how to write components as pure, predictable functions.', 'Read More', '\\n', 'Your UI as a tree ', '\\n', 'React uses trees to model the relationships between components and modules.', '\\n', 'A React render tree is a representation of the parent and child relationship between components.', '\\n', 'An example React render tree.', '\\n', 'Components near the top of the tree, near the root component, are considered top-level components. Components with no child components are leaf components. This categorization of components is useful for understanding data flow and rendering performance.', '\\n', 'Modelling the relationship between JavaScript modules is another useful way to understand your app. We refer to it as a module dependency tree.', '\\n', 'An example module dependency tree.', '\\n', 'A dependency tree is often used by build tools to bundle all the relevant JavaScript code for the client to download and render. A large bundle size regresses user experience for React apps. Understanding the module dependency tree is helpful to debug such issues.', '\\n', 'Ready to learn this topic?', 'Read ', 'Your UI as a Tree', ' to learn how to create a render and module dependency trees for a React app and how they’re useful mental models for improving user experience and performance.', 'Read More', '\\n', 'What’s next? ', '\\n', 'Head over to ', 'Your First Component', ' to start reading this chapter page by page!', '\\n', 'Or, if you’re already familiar with these topics, why not read about ', 'Adding Interactivity', '?', 'Next', 'Your First Component', 'How do you like these docs?', 'Take our survey!', '©', '2024', 'Learn React', 'Quick Start', 'Installation', 'Describing the UI', 'Adding Interactivity', 'Managing State', 'Escape Hatches', 'API Reference', 'React APIs', 'React DOM APIs', 'Community', 'Code of Conduct', 'Meet the Team', 'Docs Contributors', 'Acknowledgements', 'More', 'Blog', 'React Native', 'Privacy', 'Terms', 'On this page', 'Overview', 'Your first component ', 'Importing and exporting components ', 'Writing markup with JSX ', 'JavaScript in JSX with curly braces ', 'Passing props to a component ', 'Conditional rendering ', 'Rendering lists ', 'Keeping components pure ', 'Your UI as a tree ', 'What’s next? ', "}