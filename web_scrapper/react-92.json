{"id": 92, "url": "https://react.dev/reference/react/Fragment", "title": "<Fragment> (<>...</>)", "content": "'<Fragment> (<>...</>) – React', 'Stream React Conf on May 15-16.', 'Learn more.', 'React', 'Search', '⌘', 'Ctrl', 'K', 'Learn', 'Reference', 'Community', 'Blog', 'react@18.2.0', 'Overview', ' ', 'Hooks', ' ', 'use', ' ', ' - This feature is available in the latest Canary', 'useCallback', ' ', 'useContext', ' ', 'useDebugValue', ' ', 'useDeferredValue', ' ', 'useEffect', ' ', 'useId', ' ', 'useImperativeHandle', ' ', 'useInsertionEffect', ' ', 'useLayoutEffect', ' ', 'useMemo', ' ', 'useOptimistic', ' ', ' - This feature is available in the latest Canary', 'useReducer', ' ', 'useRef', ' ', 'useState', ' ', 'useSyncExternalStore', ' ', 'useTransition', ' ', 'Components', ' ', '<Fragment> (<>)', ' ', '<Profiler>', ' ', '<StrictMode>', ' ', '<Suspense>', ' ', 'APIs', ' ', 'cache', ' ', ' - This feature is available in the latest Canary', 'createContext', ' ', 'forwardRef', ' ', 'lazy', ' ', 'memo', ' ', 'startTransition', ' ', 'experimental_taintObjectReference', ' ', ' - This feature is available in the latest Canary', 'experimental_taintUniqueValue', ' ', ' - This feature is available in the latest Canary', 'Directives', ' ', ' - This feature is available in the latest Canary', \"'use client'\", ' ', ' - This feature is available in the latest Canary', \"'use server'\", ' ', ' - This feature is available in the latest Canary', 'react-dom@18.2.0', 'Hooks', ' ', 'useFormState', ' ', ' - This feature is available in the latest Canary', 'useFormStatus', ' ', ' - This feature is available in the latest Canary', 'Components', ' ', 'Common (e.g. <div>)', ' ', '<form>', ' ', ' - This feature is available in the latest Canary', '<input>', ' ', '<option>', ' ', '<progress>', ' ', '<select>', ' ', '<textarea>', ' ', '<link>', ' ', ' - This feature is available in the latest Canary', '<meta>', ' ', ' - This feature is available in the latest Canary', '<script>', ' ', ' - This feature is available in the latest Canary', '<style>', ' ', ' - This feature is available in the latest Canary', '<title>', ' ', ' - This feature is available in the latest Canary', 'APIs', ' ', 'createPortal', ' ', 'flushSync', ' ', 'findDOMNode', ' ', 'hydrate', ' ', 'preconnect', ' ', ' - This feature is available in the latest Canary', 'prefetchDNS', ' ', ' - This feature is available in the latest Canary', 'preinit', ' ', ' - This feature is available in the latest Canary', 'preinitModule', ' ', ' - This feature is available in the latest Canary', 'preload', ' ', ' - This feature is available in the latest Canary', 'preloadModule', ' ', ' - This feature is available in the latest Canary', 'render', ' ', 'unmountComponentAtNode', ' ', 'Client APIs', ' ', 'createRoot', ' ', 'hydrateRoot', ' ', 'Server APIs', ' ', 'renderToNodeStream', ' ', 'renderToPipeableStream', ' ', 'renderToReadableStream', ' ', 'renderToStaticMarkup', ' ', 'renderToStaticNodeStream', ' ', 'renderToString', ' ', 'Rules of React', 'Overview', ' ', 'Components and Hooks must be pure', ' ', 'React calls Components and Hooks', ' ', 'Rules of Hooks', ' ', 'Legacy APIs', 'Legacy React APIs', ' ', 'Children', ' ', 'cloneElement', ' ', 'Component', ' ', 'createElement', ' ', 'createFactory', ' ', 'createRef', ' ', 'isValidElement', ' ', 'PureComponent', ' ', 'Is this page useful?', 'API Reference', 'Components', '<Fragment> (<>...</>)', '<Fragment>', ', often used via ', '<>...</>', ' syntax, lets you group elements without a wrapper node.', '<', '>', '  ', '<', 'OneChild', ' ', '/>', '  ', '<', 'AnotherChild', ' ', '/>', '</', '>', '\\n', 'Reference ', '<Fragment>', ' ', 'Usage ', 'Returning multiple elements ', 'Assigning multiple elements to a variable ', 'Grouping elements with text ', 'Rendering a list of Fragments ', '\\n', '\\n', 'Reference ', '\\n', '<Fragment>', ' ', '\\n', 'Wrap elements in ', '<Fragment>', ' to group them together in situations where you need a single element. Grouping elements in ', 'Fragment', ' has no effect on the resulting DOM; it is the same as if the elements were not grouped. The empty JSX tag ', '<></>', ' is shorthand for ', '<Fragment></Fragment>', ' in most cases.', '\\n', 'Props ', '\\n', '\\n', 'optional', ' ', 'key', ': Fragments declared with the explicit ', '<Fragment>', ' syntax may have ', 'keys.', '\\n', '\\n', 'Caveats ', '\\n', '\\n', '\\n', 'If you want to pass ', 'key', ' to a Fragment, you can’t use the ', '<>...</>', ' syntax. You have to explicitly import ', 'Fragment', ' from ', \"'react'\", ' and render ', '<Fragment key={yourKey}>...</Fragment>', '.', '\\n', '\\n', '\\n', 'React does not ', 'reset state', ' when you go from rendering ', '<><Child /></>', ' to ', '[<Child />]', ' or back, or when you go from rendering ', '<><Child /></>', ' to ', '<Child />', ' and back. This only works a single level deep: for example, going from ', '<><><Child /></></>', ' to ', '<Child />', ' resets the state. See the precise semantics ', 'here.', '\\n', '\\n', '\\n', '\\n', 'Usage ', '\\n', 'Returning multiple elements ', '\\n', 'Use ', 'Fragment', ', or the equivalent ', '<>...</>', ' syntax, to group multiple elements together. You can use it to put multiple elements in any place where a single element can go. For example, a component can only return one element, but by using a Fragment you can group multiple elements together and then return them as a group:', '\\n', 'function', ' ', 'Post', '(', ')', ' ', '{', '  ', 'return', ' ', '(', '    ', '<', '>', '      ', '<', 'PostTitle', ' ', '/>', '      ', '<', 'PostBody', ' ', '/>', '    ', '</', '>', '  ', ')', ';', '}', '\\n', 'Fragments are useful because grouping elements with a Fragment has no effect on layout or styles, unlike if you wrapped the elements in another container like a DOM element. If you inspect this example with the browser tools, you’ll see that all ', '<h1>', ' and ', '<article>', ' DOM nodes appear as siblings without wrappers around them:', '\\n', 'App.js', 'App.js', ' Reset', 'Fork', 'export', ' ', 'default', ' ', 'function', ' ', 'Blog', '(', ')', ' ', '{', '\\n  ', 'return', ' ', '(', '\\n    ', '<', '>', '\\n      ', '<', 'Post', ' ', 'title', '=', '\"An update\"', ' ', 'body', '=', '\"It\\'s been a while since I posted...\"', ' ', '/>', '\\n      ', '<', 'Post', ' ', 'title', '=', '\"My new blog\"', ' ', 'body', '=', '\"I am starting a new blog!\"', ' ', '/>', '\\n    ', '</', '>', '\\n  ', ')', '\\n', '}', '\\n\\n', 'function', ' ', 'Post', '(', '{', ' ', 'title', ',', ' ', 'body', ' ', '}', ')', ' ', '{', '\\n  ', 'return', ' ', '(', '\\n    ', '<', '>', '\\n      ', '<', 'PostTitle', ' ', 'title', '=', '{', 'title', '}', ' ', '/>', '\\n      ', '<', 'PostBody', ' ', 'body', '=', '{', 'body', '}', ' ', '/>', '\\n    ', '</', '>', '\\n  ', ')', ';', '\\n', '}', '\\n\\n', 'function', ' ', 'PostTitle', '(', '{', ' ', 'title', ' ', '}', ')', ' ', '{', '\\n  ', 'return', ' ', '<', 'h1', '>', '{', 'title', '}', '</', 'h1', '>', '\\n', '}', '\\n\\n', 'function', ' ', 'PostBody', '(', '{', ' ', 'body', ' ', '}', ')', ' ', '{', '\\n  ', 'return', ' ', '(', '\\n    ', '<', 'article', '>', '\\n      ', '<', 'p', '>', '{', 'body', '}', '</', 'p', '>', '\\n    ', '</', 'article', '>', '\\n  ', ')', ';', '\\n', '}', '\\n\\n', 'Show more', '\\n', 'Deep Dive', 'How to write a Fragment without the special syntax? ', 'Show Details', 'The example above is equivalent to importing ', 'Fragment', ' from React:', 'import', ' ', '{', ' ', 'Fragment', ' ', '}', ' ', 'from', ' ', \"'react'\", ';', 'function', ' ', 'Post', '(', ')', ' ', '{', '  ', 'return', ' ', '(', '    ', '<', 'Fragment', '>', '      ', '<', 'PostTitle', ' ', '/>', '      ', '<', 'PostBody', ' ', '/>', '    ', '</', 'Fragment', '>', '  ', ')', ';', '}', 'Usually you won’t need this unless you need to ', 'pass a ', 'key', ' to your ', 'Fragment', '.', '\\n', '\\n', 'Assigning multiple elements to a variable ', '\\n', 'Like any other element, you can assign Fragment elements to variables, pass them as props, and so on:', '\\n', 'function', ' ', 'CloseDialog', '(', ')', ' ', '{', '  ', 'const', ' ', 'buttons', ' = ', '(', '    ', '<', '>', '      ', '<', 'OKButton', ' ', '/>', '      ', '<', 'CancelButton', ' ', '/>', '    ', '</', '>', '  ', ')', ';', '  ', 'return', ' ', '(', '    ', '<', 'AlertDialog', ' ', 'buttons', '=', '{', 'buttons', '}', '>', '      Are you sure you want to leave this page?', '    ', '</', 'AlertDialog', '>', '  ', ')', ';', '}', '\\n', '\\n', 'Grouping elements with text ', '\\n', 'You can use ', 'Fragment', ' to group text together with components:', '\\n', 'function', ' ', 'DateRangePicker', '(', '{', ' ', 'start', ',', ' ', 'end', ' ', '}', ')', ' ', '{', '  ', 'return', ' ', '(', '    ', '<', '>', '      From', '      ', '<', 'DatePicker', ' ', 'date', '=', '{', 'start', '}', ' ', '/>', '      to', '      ', '<', 'DatePicker', ' ', 'date', '=', '{', 'end', '}', ' ', '/>', '    ', '</', '>', '  ', ')', ';', '}', '\\n', '\\n', 'Rendering a list of Fragments ', '\\n', 'Here’s a situation where you need to write ', 'Fragment', ' explicitly instead of using the ', '<></>', ' syntax. When you ', 'render multiple elements in a loop', ', you need to assign a ', 'key', ' to each element. If the elements within the loop are Fragments, you need to use the normal JSX element syntax in order to provide the ', 'key', ' attribute:', '\\n', 'function', ' ', 'Blog', '(', ')', ' ', '{', '  ', 'return', ' ', 'posts', '.', 'map', '(', 'post', ' ', '=>', '    ', '<', 'Fragment', ' ', 'key', '=', '{', 'post', '.', 'id', '}', '>', '      ', '<', 'PostTitle', ' ', 'title', '=', '{', 'post', '.', 'title', '}', ' ', '/>', '      ', '<', 'PostBody', ' ', 'body', '=', '{', 'post', '.', 'body', '}', ' ', '/>', '    ', '</', 'Fragment', '>', '  ', ')', ';', '}', '\\n', 'You can inspect the DOM to verify that there are no wrapper elements around the Fragment children:', '\\n', 'App.js', 'App.js', ' Reset', 'Fork', 'import', ' ', '{', ' ', 'Fragment', ' ', '}', ' ', 'from', ' ', \"'react'\", ';', '\\n\\n', 'const', ' ', 'posts', ' = ', '[', '\\n  ', '{', ' ', 'id', ':', ' ', '1', ',', ' ', 'title', ':', ' ', \"'An update'\", ',', ' ', 'body', ':', ' ', '\"It\\'s been a while since I posted...\"', ' ', '}', ',', '\\n  ', '{', ' ', 'id', ':', ' ', '2', ',', ' ', 'title', ':', ' ', \"'My new blog'\", ',', ' ', 'body', ':', ' ', \"'I am starting a new blog!'\", ' ', '}', '\\n', ']', ';', '\\n\\n', 'export', ' ', 'default', ' ', 'function', ' ', 'Blog', '(', ')', ' ', '{', '\\n  ', 'return', ' ', 'posts', '.', 'map', '(', 'post', ' ', '=>', '\\n    ', '<', 'Fragment', ' ', 'key', '=', '{', 'post', '.', 'id', '}', '>', '\\n      ', '<', 'PostTitle', ' ', 'title', '=', '{', 'post', '.', 'title', '}', ' ', '/>', '\\n      ', '<', 'PostBody', ' ', 'body', '=', '{', 'post', '.', 'body', '}', ' ', '/>', '\\n    ', '</', 'Fragment', '>', '\\n  ', ')', ';', '\\n', '}', '\\n\\n', 'function', ' ', 'PostTitle', '(', '{', ' ', 'title', ' ', '}', ')', ' ', '{', '\\n  ', 'return', ' ', '<', 'h1', '>', '{', 'title', '}', '</', 'h1', '>', '\\n', '}', '\\n\\n', 'function', ' ', 'PostBody', '(', '{', ' ', 'body', ' ', '}', ')', ' ', '{', '\\n  ', 'return', ' ', '(', '\\n    ', '<', 'article', '>', '\\n      ', '<', 'p', '>', '{', 'body', '}', '</', 'p', '>', '\\n    ', '</', 'article', '>', '\\n  ', ')', ';', '\\n', '}', '\\n\\n', 'Show more', 'Previous', 'Components', 'Next', '<Profiler>', 'How do you like these docs?', 'Take our survey!', '©', '2024', 'Learn React', 'Quick Start', 'Installation', 'Describing the UI', 'Adding Interactivity', 'Managing State', 'Escape Hatches', 'API Reference', 'React APIs', 'React DOM APIs', 'Community', 'Code of Conduct', 'Meet the Team', 'Docs Contributors', 'Acknowledgements', 'More', 'Blog', 'React Native', 'Privacy', 'Terms', 'On this page', 'Overview', 'Reference ', '<Fragment>', ' ', 'Usage ', 'Returning multiple elements ', 'Assigning multiple elements to a variable ', 'Grouping elements with text ', 'Rendering a list of Fragments ', "}