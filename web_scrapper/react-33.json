{"id": 33, "url": "https://react.dev/reference/react/cloneElement", "title": "cloneElement", "content": "'cloneElement – React', 'Stream React Conf on May 15-16.', 'Learn more.', 'React', 'Search', '⌘', 'Ctrl', 'K', 'Learn', 'Reference', 'Community', 'Blog', 'react@18.2.0', 'Overview', ' ', 'Hooks', ' ', 'use', ' ', ' - This feature is available in the latest Canary', 'useCallback', ' ', 'useContext', ' ', 'useDebugValue', ' ', 'useDeferredValue', ' ', 'useEffect', ' ', 'useId', ' ', 'useImperativeHandle', ' ', 'useInsertionEffect', ' ', 'useLayoutEffect', ' ', 'useMemo', ' ', 'useOptimistic', ' ', ' - This feature is available in the latest Canary', 'useReducer', ' ', 'useRef', ' ', 'useState', ' ', 'useSyncExternalStore', ' ', 'useTransition', ' ', 'Components', ' ', '<Fragment> (<>)', ' ', '<Profiler>', ' ', '<StrictMode>', ' ', '<Suspense>', ' ', 'APIs', ' ', 'cache', ' ', ' - This feature is available in the latest Canary', 'createContext', ' ', 'forwardRef', ' ', 'lazy', ' ', 'memo', ' ', 'startTransition', ' ', 'experimental_taintObjectReference', ' ', ' - This feature is available in the latest Canary', 'experimental_taintUniqueValue', ' ', ' - This feature is available in the latest Canary', 'Directives', ' ', ' - This feature is available in the latest Canary', \"'use client'\", ' ', ' - This feature is available in the latest Canary', \"'use server'\", ' ', ' - This feature is available in the latest Canary', 'react-dom@18.2.0', 'Hooks', ' ', 'useFormState', ' ', ' - This feature is available in the latest Canary', 'useFormStatus', ' ', ' - This feature is available in the latest Canary', 'Components', ' ', 'Common (e.g. <div>)', ' ', '<form>', ' ', ' - This feature is available in the latest Canary', '<input>', ' ', '<option>', ' ', '<progress>', ' ', '<select>', ' ', '<textarea>', ' ', '<link>', ' ', ' - This feature is available in the latest Canary', '<meta>', ' ', ' - This feature is available in the latest Canary', '<script>', ' ', ' - This feature is available in the latest Canary', '<style>', ' ', ' - This feature is available in the latest Canary', '<title>', ' ', ' - This feature is available in the latest Canary', 'APIs', ' ', 'createPortal', ' ', 'flushSync', ' ', 'findDOMNode', ' ', 'hydrate', ' ', 'preconnect', ' ', ' - This feature is available in the latest Canary', 'prefetchDNS', ' ', ' - This feature is available in the latest Canary', 'preinit', ' ', ' - This feature is available in the latest Canary', 'preinitModule', ' ', ' - This feature is available in the latest Canary', 'preload', ' ', ' - This feature is available in the latest Canary', 'preloadModule', ' ', ' - This feature is available in the latest Canary', 'render', ' ', 'unmountComponentAtNode', ' ', 'Client APIs', ' ', 'createRoot', ' ', 'hydrateRoot', ' ', 'Server APIs', ' ', 'renderToNodeStream', ' ', 'renderToPipeableStream', ' ', 'renderToReadableStream', ' ', 'renderToStaticMarkup', ' ', 'renderToStaticNodeStream', ' ', 'renderToString', ' ', 'Rules of React', 'Overview', ' ', 'Components and Hooks must be pure', ' ', 'React calls Components and Hooks', ' ', 'Rules of Hooks', ' ', 'Legacy APIs', 'Legacy React APIs', ' ', 'Children', ' ', 'cloneElement', ' ', 'Component', ' ', 'createElement', ' ', 'createFactory', ' ', 'createRef', ' ', 'isValidElement', ' ', 'PureComponent', ' ', 'Is this page useful?', 'API Reference', 'Legacy React APIs', 'cloneElement', 'Pitfall', 'Using ', 'cloneElement', ' is uncommon and can lead to fragile code. ', 'See common alternatives.', '\\n', 'cloneElement', ' lets you create a new React element using another element as a starting point.', 'const', ' ', 'clonedElement', ' = ', 'cloneElement', '(', 'element', ',', ' ', 'props', ',', ' ', '...', 'children', ')', '\\n', 'Reference ', 'cloneElement(element, props, ...children)', ' ', 'Usage ', 'Overriding props of an element ', 'Alternatives ', 'Passing data with a render prop ', 'Passing data through context ', 'Extracting logic into a custom Hook ', '\\n', '\\n', 'Reference ', '\\n', 'cloneElement(element, props, ...children)', ' ', '\\n', 'Call ', 'cloneElement', ' to create a React element based on the ', 'element', ', but with different ', 'props', ' and ', 'children', ':', '\\n', 'import', ' ', '{', ' ', 'cloneElement', ' ', '}', ' ', 'from', ' ', \"'react'\", ';', '// ...', 'const', ' ', 'clonedElement', ' = ', 'cloneElement', '(', '  ', '<', 'Row', ' ', 'title', '=', '\"Cabbage\"', '>', '    Hello', '  ', '</', 'Row', '>', ',', '  ', '{', ' ', 'isHighlighted', ':', ' ', 'true', ' ', '}', ',', '  ', \"'Goodbye'\", ')', ';', 'console', '.', 'log', '(', 'clonedElement', ')', ';', ' ', '// <Row title=\"Cabbage\" isHighlighted={true}>Goodbye</Row>', '\\n', 'See more examples below.', '\\n', 'Parameters ', '\\n', '\\n', '\\n', 'element', ': The ', 'element', ' argument must be a valid React element. For example, it could be a JSX node like ', '<Something />', ', the result of calling ', 'createElement', ', or the result of another ', 'cloneElement', ' call.', '\\n', '\\n', '\\n', 'props', ': The ', 'props', ' argument must either be an object or ', 'null', '. If you pass ', 'null', ', the cloned element will retain all of the original ', 'element.props', '. Otherwise, for every prop in the ', 'props', ' object, the returned element will “prefer” the value from ', 'props', ' over the value from ', 'element.props', '. The rest of the props will be filled from the original ', 'element.props', '. If you pass ', 'props.key', ' or ', 'props.ref', ', they will replace the original ones.', '\\n', '\\n', '\\n', 'optional', ' ', '...children', ': Zero or more child nodes. They can be any React nodes, including React elements, strings, numbers, ', 'portals', ', empty nodes (', 'null', ', ', 'undefined', ', ', 'true', ', and ', 'false', '), and arrays of React nodes. If you don’t pass any ', '...children', ' arguments, the original ', 'element.props.children', ' will be preserved.', '\\n', '\\n', '\\n', 'Returns ', '\\n', 'cloneElement', ' returns a React element object with a few properties:', '\\n', '\\n', 'type', ': Same as ', 'element.type', '.', '\\n', 'props', ': The result of shallowly merging ', 'element.props', ' with the overriding ', 'props', ' you have passed.', '\\n', 'ref', ': The original ', 'element.ref', ', unless it was overridden by ', 'props.ref', '.', '\\n', 'key', ': The original ', 'element.key', ', unless it was overridden by ', 'props.key', '.', '\\n', '\\n', 'Usually, you’ll return the element from your component or make it a child of another element. Although you may read the element’s properties, it’s best to treat every element as opaque after it’s created, and only render it.', '\\n', 'Caveats ', '\\n', '\\n', '\\n', 'Cloning an element ', 'does not modify the original element.', '\\n', '\\n', '\\n', 'You should only ', 'pass children as multiple arguments to ', 'cloneElement', ' if they are all statically known,', ' like ', 'cloneElement(element, null, child1, child2, child3)', '. If your children are dynamic, pass the entire array as the third argument: ', 'cloneElement(element, null, listItems)', '. This ensures that React will ', 'warn you about missing ', 'key', 's', ' for any dynamic lists. For static lists this is not necessary because they never reorder.', '\\n', '\\n', '\\n', 'cloneElement', ' makes it harder to trace the data flow, so ', 'try the ', 'alternatives', ' instead.', '\\n', '\\n', '\\n', '\\n', 'Usage ', '\\n', 'Overriding props of an element ', '\\n', 'To override the props of some ', 'React element', ', pass it to ', 'cloneElement', ' with the ', 'props you want to override', ':', '\\n', 'import', ' ', '{', ' ', 'cloneElement', ' ', '}', ' ', 'from', ' ', \"'react'\", ';', '// ...', 'const', ' ', 'clonedElement', ' = ', 'cloneElement', '(', '  ', '<Row title=\"Cabbage\" />', ',', '  ', '{ isHighlighted: true }', ')', ';', '\\n', 'Here, the resulting ', 'cloned element', ' will be ', '<Row title=\"Cabbage\" isHighlighted={true} />', '.', '\\n', 'Let’s walk through an example to see when it’s useful.', '\\n', 'Imagine a ', 'List', ' component that renders its ', 'children', ' as a list of selectable rows with a “Next” button that changes which row is selected. The ', 'List', ' component needs to render the selected ', 'Row', ' differently, so it clones every ', '<Row>', ' child that it has received, and adds an extra ', 'isHighlighted: true', ' or ', 'isHighlighted: false', ' prop:', '\\n', 'export', ' ', 'default', ' ', 'function', ' ', 'List', '(', '{', ' ', 'children', ' ', '}', ')', ' ', '{', '  ', 'const', ' ', '[', 'selectedIndex', ',', ' ', 'setSelectedIndex', ']', ' = ', 'useState', '(', '0', ')', ';', '  ', 'return', ' ', '(', '    ', '<', 'div', ' ', 'className', '=', '\"List\"', '>', '      ', '{', 'Children', '.', 'map', '(', 'children', ',', ' ', '(', 'child', ',', ' ', 'index', ')', ' ', '=>', '        ', 'cloneElement', '(', 'child', ',', ' ', '{', '          ', 'isHighlighted', ':', ' ', 'index', ' === ', 'selectedIndex', ' ', '        ', '}', ')', '      ', ')', '}', '\\n', 'Let’s say the original JSX received by ', 'List', ' looks like this:', '\\n', '<', 'List', '>', '  ', '<', 'Row', ' ', 'title', '=', '\"Cabbage\"', ' ', '/>', '  ', '<', 'Row', ' ', 'title', '=', '\"Garlic\"', ' ', '/>', '  ', '<', 'Row', ' ', 'title', '=', '\"Apple\"', ' ', '/>', '</', 'List', '>', '\\n', 'By cloning its children, the ', 'List', ' can pass extra information to every ', 'Row', ' inside. The result looks like this:', '\\n', '<', 'List', '>', '  ', '<', 'Row', '    ', 'title', '=', '\"Cabbage\"', '    ', 'isHighlighted', '=', '{', 'true', '}', ' ', '  ', '/>', '  ', '<', 'Row', '    ', 'title', '=', '\"Garlic\"', '    ', 'isHighlighted', '=', '{', 'false', '}', ' ', '  ', '/>', '  ', '<', 'Row', '    ', 'title', '=', '\"Apple\"', '    ', 'isHighlighted', '=', '{', 'false', '}', ' ', '  ', '/>', '</', 'List', '>', '\\n', 'Notice how pressing “Next” updates the state of the ', 'List', ', and highlights a different row:', '\\n', 'App.js', 'List.js', 'Row.js', 'data.js', 'List.js', ' Reset', 'Fork', 'import', ' ', '{', ' ', 'Children', ',', ' ', 'cloneElement', ',', ' ', 'useState', ' ', '}', ' ', 'from', ' ', \"'react'\", ';', '\\n\\n', 'export', ' ', 'default', ' ', 'function', ' ', 'List', '(', '{', ' ', 'children', ' ', '}', ')', ' ', '{', '\\n  ', 'const', ' ', '[', 'selectedIndex', ',', ' ', 'setSelectedIndex', ']', ' = ', 'useState', '(', '0', ')', ';', '\\n  ', 'return', ' ', '(', '\\n    ', '<', 'div', ' ', 'className', '=', '\"List\"', '>', '\\n      ', '{', 'Children', '.', 'map', '(', 'children', ',', ' ', '(', 'child', ',', ' ', 'index', ')', ' ', '=>', '\\n        ', 'cloneElement', '(', 'child', ',', ' ', '{', '\\n          ', 'isHighlighted', ':', ' ', 'index', ' === ', 'selectedIndex', ' \\n        ', '}', ')', '\\n      ', ')', '}', '\\n      ', '<', 'hr', ' ', '/>', '\\n      ', '<', 'button', ' ', 'onClick', '=', '{', '(', ')', ' ', '=>', ' ', '{', '\\n        ', 'setSelectedIndex', '(', 'i', ' ', '=>', '\\n          ', '(', 'i', ' + ', '1', ')', ' % ', 'Children', '.', 'count', '(', 'children', ')', '\\n        ', ')', ';', '\\n      ', '}', '}', '>', '\\n        Next\\n      ', '</', 'button', '>', '\\n    ', '</', 'div', '>', '\\n  ', ')', ';', '\\n', '}', '\\n\\n', 'Show more', '\\n', 'To summarize, the ', 'List', ' cloned the ', '<Row />', ' elements it received and added an extra prop to them.', '\\n', 'Pitfall', 'Cloning children makes it hard to tell how the data flows through your app. Try one of the ', 'alternatives.', '\\n', '\\n', 'Alternatives ', '\\n', 'Passing data with a render prop ', '\\n', 'Instead of using ', 'cloneElement', ', consider accepting a ', 'render prop', ' like ', 'renderItem', '. Here, ', 'List', ' receives ', 'renderItem', ' as a prop. ', 'List', ' calls ', 'renderItem', ' for every item and passes ', 'isHighlighted', ' as an argument:', '\\n', 'export', ' ', 'default', ' ', 'function', ' ', 'List', '(', '{', ' ', 'items', ',', ' ', 'renderItem', ' ', '}', ')', ' ', '{', '  ', 'const', ' ', '[', 'selectedIndex', ',', ' ', 'setSelectedIndex', ']', ' = ', 'useState', '(', '0', ')', ';', '  ', 'return', ' ', '(', '    ', '<', 'div', ' ', 'className', '=', '\"List\"', '>', '      ', '{', 'items', '.', 'map', '(', '(', 'item', ',', ' ', 'index', ')', ' ', '=>', ' ', '{', '        ', 'const', ' ', 'isHighlighted', ' = ', 'index', ' === ', 'selectedIndex', ';', '        ', 'return', ' ', 'renderItem', '(', 'item', ',', ' ', 'isHighlighted', ')', ';', '      ', '}', ')', '}', '\\n', 'The ', 'renderItem', ' prop is called a “render prop” because it’s a prop that specifies how to render something. For example, you can pass a ', 'renderItem', ' implementation that renders a ', '<Row>', ' with the given ', 'isHighlighted', ' value:', '\\n', '<', 'List', '  ', 'items', '=', '{', 'products', '}', '  ', 'renderItem', '=', '{', '(', 'product', ',', ' ', 'isHighlighted', ')', ' ', '=>', '    ', '<', 'Row', '      ', 'key', '=', '{', 'product', '.', 'id', '}', '      ', 'title', '=', '{', 'product', '.', 'title', '}', '      ', 'isHighlighted', '=', '{', 'isHighlighted', '}', '    ', '/>', '  ', '}', '/>', '\\n', 'The end result is the same as with ', 'cloneElement', ':', '\\n', '<', 'List', '>', '  ', '<', 'Row', '    ', 'title', '=', '\"Cabbage\"', '    ', 'isHighlighted', '=', '{', 'true', '}', ' ', '  ', '/>', '  ', '<', 'Row', '    ', 'title', '=', '\"Garlic\"', '    ', 'isHighlighted', '=', '{', 'false', '}', ' ', '  ', '/>', '  ', '<', 'Row', '    ', 'title', '=', '\"Apple\"', '    ', 'isHighlighted', '=', '{', 'false', '}', ' ', '  ', '/>', '</', 'List', '>', '\\n', 'However, you can clearly trace where the ', 'isHighlighted', ' value is coming from.', '\\n', 'App.js', 'List.js', 'Row.js', 'data.js', 'List.js', ' Reset', 'Fork', 'import', ' ', '{', ' ', 'useState', ' ', '}', ' ', 'from', ' ', \"'react'\", ';', '\\n\\n', 'export', ' ', 'default', ' ', 'function', ' ', 'List', '(', '{', ' ', 'items', ',', ' ', 'renderItem', ' ', '}', ')', ' ', '{', '\\n  ', 'const', ' ', '[', 'selectedIndex', ',', ' ', 'setSelectedIndex', ']', ' = ', 'useState', '(', '0', ')', ';', '\\n  ', 'return', ' ', '(', '\\n    ', '<', 'div', ' ', 'className', '=', '\"List\"', '>', '\\n      ', '{', 'items', '.', 'map', '(', '(', 'item', ',', ' ', 'index', ')', ' ', '=>', ' ', '{', '\\n        ', 'const', ' ', 'isHighlighted', ' = ', 'index', ' === ', 'selectedIndex', ';', '\\n        ', 'return', ' ', 'renderItem', '(', 'item', ',', ' ', 'isHighlighted', ')', ';', '\\n      ', '}', ')', '}', '\\n      ', '<', 'hr', ' ', '/>', '\\n      ', '<', 'button', ' ', 'onClick', '=', '{', '(', ')', ' ', '=>', ' ', '{', '\\n        ', 'setSelectedIndex', '(', 'i', ' ', '=>', '\\n          ', '(', 'i', ' + ', '1', ')', ' % ', 'items', '.', 'length', '\\n        ', ')', ';', '\\n      ', '}', '}', '>', '\\n        Next\\n      ', '</', 'button', '>', '\\n    ', '</', 'div', '>', '\\n  ', ')', ';', '\\n', '}', '\\n\\n', 'Show more', '\\n', 'This pattern is preferred to ', 'cloneElement', ' because it is more explicit.', '\\n', '\\n', 'Passing data through context ', '\\n', 'Another alternative to ', 'cloneElement', ' is to ', 'pass data through context.', '\\n', 'For example, you can call ', 'createContext', ' to define a ', 'HighlightContext', ':', '\\n', 'export', ' ', 'const', ' ', 'HighlightContext', ' = ', 'createContext', '(', 'false', ')', ';', '\\n', 'Your ', 'List', ' component can wrap every item it renders into a ', 'HighlightContext', ' provider:', '\\n', 'export', ' ', 'default', ' ', 'function', ' ', 'List', '(', '{', ' ', 'items', ',', ' ', 'renderItem', ' ', '}', ')', ' ', '{', '  ', 'const', ' ', '[', 'selectedIndex', ',', ' ', 'setSelectedIndex', ']', ' = ', 'useState', '(', '0', ')', ';', '  ', 'return', ' ', '(', '    ', '<', 'div', ' ', 'className', '=', '\"List\"', '>', '      ', '{', 'items', '.', 'map', '(', '(', 'item', ',', ' ', 'index', ')', ' ', '=>', ' ', '{', '        ', 'const', ' ', 'isHighlighted', ' = ', 'index', ' === ', 'selectedIndex', ';', '        ', 'return', ' ', '(', '          ', '<', 'HighlightContext', '.', 'Provider', ' ', 'key', '=', '{', 'item', '.', 'id', '}', ' ', 'value', '=', '{', 'isHighlighted', '}', '>', '            ', '{', 'renderItem', '(', 'item', ')', '}', '          ', '</', 'HighlightContext', '.', 'Provider', '>', '        ', ')', ';', '      ', '}', ')', '}', '\\n', 'With this approach, ', 'Row', ' does not need to receive an ', 'isHighlighted', ' prop at all. Instead, it reads the context:', '\\n', 'export', ' ', 'default', ' ', 'function', ' ', 'Row', '(', '{', ' ', 'title', ' ', '}', ')', ' ', '{', '  ', 'const', ' ', 'isHighlighted', ' = ', 'useContext', '(', 'HighlightContext', ')', ';', '  ', '// ...', '\\n', 'This allows the calling component to not know or worry about passing ', 'isHighlighted', ' to ', '<Row>', ':', '\\n', '<', 'List', '  ', 'items', '=', '{', 'products', '}', '  ', 'renderItem', '=', '{', 'product', ' ', '=>', '    ', '<', 'Row', ' ', 'title', '=', '{', 'product', '.', 'title', '}', ' ', '/>', '  ', '}', '/>', '\\n', 'Instead, ', 'List', ' and ', 'Row', ' coordinate the highlighting logic through context.', '\\n', 'App.js', 'List.js', 'Row.js', 'HighlightContext.js', 'data.js', 'List.js', ' Reset', 'Fork', 'import', ' ', '{', ' ', 'useState', ' ', '}', ' ', 'from', ' ', \"'react'\", ';', '\\n', 'import', ' ', '{', ' ', 'HighlightContext', ' ', '}', ' ', 'from', ' ', \"'./HighlightContext.js'\", ';', '\\n\\n', 'export', ' ', 'default', ' ', 'function', ' ', 'List', '(', '{', ' ', 'items', ',', ' ', 'renderItem', ' ', '}', ')', ' ', '{', '\\n  ', 'const', ' ', '[', 'selectedIndex', ',', ' ', 'setSelectedIndex', ']', ' = ', 'useState', '(', '0', ')', ';', '\\n  ', 'return', ' ', '(', '\\n    ', '<', 'div', ' ', 'className', '=', '\"List\"', '>', '\\n      ', '{', 'items', '.', 'map', '(', '(', 'item', ',', ' ', 'index', ')', ' ', '=>', ' ', '{', '\\n        ', 'const', ' ', 'isHighlighted', ' = ', 'index', ' === ', 'selectedIndex', ';', '\\n        ', 'return', ' ', '(', '\\n          ', '<', 'HighlightContext', '.', 'Provider', '\\n            ', 'key', '=', '{', 'item', '.', 'id', '}', '\\n            ', 'value', '=', '{', 'isHighlighted', '}', '\\n          ', '>', '\\n            ', '{', 'renderItem', '(', 'item', ')', '}', '\\n          ', '</', 'HighlightContext', '.', 'Provider', '>', '\\n        ', ')', ';', '\\n      ', '}', ')', '}', '\\n      ', '<', 'hr', ' ', '/>', '\\n      ', '<', 'button', ' ', 'onClick', '=', '{', '(', ')', ' ', '=>', ' ', '{', '\\n        ', 'setSelectedIndex', '(', 'i', ' ', '=>', '\\n          ', '(', 'i', ' + ', '1', ')', ' % ', 'items', '.', 'length', '\\n        ', ')', ';', '\\n      ', '}', '}', '>', '\\n        Next\\n      ', '</', 'button', '>', '\\n    ', '</', 'div', '>', '\\n  ', ')', ';', '\\n', '}', '\\n\\n', 'Show more', '\\n', 'Learn more about passing data through context.', '\\n', '\\n', 'Extracting logic into a custom Hook ', '\\n', 'Another approach you can try is to extract the “non-visual” logic into your own Hook, and use the information returned by your Hook to decide what to render. For example, you could write a ', 'useList', ' custom Hook like this:', '\\n', 'import', ' ', '{', ' ', 'useState', ' ', '}', ' ', 'from', ' ', \"'react'\", ';', 'export', ' ', 'default', ' ', 'function', ' ', 'useList', '(', 'items', ')', ' ', '{', '  ', 'const', ' ', '[', 'selectedIndex', ',', ' ', 'setSelectedIndex', ']', ' = ', 'useState', '(', '0', ')', ';', '  ', 'function', ' ', 'onNext', '(', ')', ' ', '{', '    ', 'setSelectedIndex', '(', 'i', ' ', '=>', '      ', '(', 'i', ' + ', '1', ')', ' % ', 'items', '.', 'length', '    ', ')', ';', '  ', '}', '  ', 'const', ' ', 'selected', ' = ', 'items', '[', 'selectedIndex', ']', ';', '  ', 'return', ' ', '[', 'selected', ',', ' ', 'onNext', ']', ';', '}', '\\n', 'Then you could use it like this:', '\\n', 'export', ' ', 'default', ' ', 'function', ' ', 'App', '(', ')', ' ', '{', '  ', 'const', ' ', '[', 'selected', ',', ' ', 'onNext', ']', ' = ', 'useList', '(', 'products', ')', ';', '  ', 'return', ' ', '(', '    ', '<', 'div', ' ', 'className', '=', '\"List\"', '>', '      ', '{', 'products', '.', 'map', '(', 'product', ' ', '=>', '        ', '<', 'Row', '          ', 'key', '=', '{', 'product', '.', 'id', '}', '          ', 'title', '=', '{', 'product', '.', 'title', '}', '          ', 'isHighlighted', '=', '{', 'selected', ' === ', 'product', '}', '        ', '/>', '      ', ')', '}', '      ', '<', 'hr', ' ', '/>', '      ', '<', 'button', ' ', 'onClick', '=', '{', 'onNext', '}', '>', '        Next', '      ', '</', 'button', '>', '    ', '</', 'div', '>', '  ', ')', ';', '}', '\\n', 'The data flow is explicit, but the state is inside the ', 'useList', ' custom Hook that you can use from any component:', '\\n', 'App.js', 'useList.js', 'Row.js', 'data.js', 'App.js', ' Reset', 'Fork', 'import', ' ', 'Row', ' ', 'from', ' ', \"'./Row.js'\", ';', '\\n', 'import', ' ', 'useList', ' ', 'from', ' ', \"'./useList.js'\", ';', '\\n', 'import', ' ', '{', ' ', 'products', ' ', '}', ' ', 'from', ' ', \"'./data.js'\", ';', '\\n\\n', 'export', ' ', 'default', ' ', 'function', ' ', 'App', '(', ')', ' ', '{', '\\n  ', 'const', ' ', '[', 'selected', ',', ' ', 'onNext', ']', ' = ', 'useList', '(', 'products', ')', ';', '\\n  ', 'return', ' ', '(', '\\n    ', '<', 'div', ' ', 'className', '=', '\"List\"', '>', '\\n      ', '{', 'products', '.', 'map', '(', 'product', ' ', '=>', '\\n        ', '<', 'Row', '\\n          ', 'key', '=', '{', 'product', '.', 'id', '}', '\\n          ', 'title', '=', '{', 'product', '.', 'title', '}', '\\n          ', 'isHighlighted', '=', '{', 'selected', ' === ', 'product', '}', '\\n        ', '/>', '\\n      ', ')', '}', '\\n      ', '<', 'hr', ' ', '/>', '\\n      ', '<', 'button', ' ', 'onClick', '=', '{', 'onNext', '}', '>', '\\n        Next\\n      ', '</', 'button', '>', '\\n    ', '</', 'div', '>', '\\n  ', ')', ';', '\\n', '}', '\\n\\n', 'Show more', '\\n', 'This approach is particularly useful if you want to reuse this logic between different components.', 'Previous', 'Children', 'Next', 'Component', 'How do you like these docs?', 'Take our survey!', '©', '2024', 'Learn React', 'Quick Start', 'Installation', 'Describing the UI', 'Adding Interactivity', 'Managing State', 'Escape Hatches', 'API Reference', 'React APIs', 'React DOM APIs', 'Community', 'Code of Conduct', 'Meet the Team', 'Docs Contributors', 'Acknowledgements', 'More', 'Blog', 'React Native', 'Privacy', 'Terms', 'On this page', 'Overview', 'Reference ', 'cloneElement(element, props, ...children)', ' ', 'Usage ', 'Overriding props of an element ', 'Alternatives ', 'Passing data with a render prop ', 'Passing data through context ', 'Extracting logic into a custom Hook ', "}