{"id": 74, "url": "https://react.dev/reference/react-dom/components/input", "title": "<input>", "content": "'<input> – React', 'Stream React Conf on May 15-16.', 'Learn more.', 'React', 'Search', '⌘', 'Ctrl', 'K', 'Learn', 'Reference', 'Community', 'Blog', 'react@18.2.0', 'Overview', ' ', 'Hooks', ' ', 'use', ' ', ' - This feature is available in the latest Canary', 'useCallback', ' ', 'useContext', ' ', 'useDebugValue', ' ', 'useDeferredValue', ' ', 'useEffect', ' ', 'useId', ' ', 'useImperativeHandle', ' ', 'useInsertionEffect', ' ', 'useLayoutEffect', ' ', 'useMemo', ' ', 'useOptimistic', ' ', ' - This feature is available in the latest Canary', 'useReducer', ' ', 'useRef', ' ', 'useState', ' ', 'useSyncExternalStore', ' ', 'useTransition', ' ', 'Components', ' ', '<Fragment> (<>)', ' ', '<Profiler>', ' ', '<StrictMode>', ' ', '<Suspense>', ' ', 'APIs', ' ', 'cache', ' ', ' - This feature is available in the latest Canary', 'createContext', ' ', 'forwardRef', ' ', 'lazy', ' ', 'memo', ' ', 'startTransition', ' ', 'experimental_taintObjectReference', ' ', ' - This feature is available in the latest Canary', 'experimental_taintUniqueValue', ' ', ' - This feature is available in the latest Canary', 'Directives', ' ', ' - This feature is available in the latest Canary', \"'use client'\", ' ', ' - This feature is available in the latest Canary', \"'use server'\", ' ', ' - This feature is available in the latest Canary', 'react-dom@18.2.0', 'Hooks', ' ', 'useFormState', ' ', ' - This feature is available in the latest Canary', 'useFormStatus', ' ', ' - This feature is available in the latest Canary', 'Components', ' ', 'Common (e.g. <div>)', ' ', '<form>', ' ', ' - This feature is available in the latest Canary', '<input>', ' ', '<option>', ' ', '<progress>', ' ', '<select>', ' ', '<textarea>', ' ', '<link>', ' ', ' - This feature is available in the latest Canary', '<meta>', ' ', ' - This feature is available in the latest Canary', '<script>', ' ', ' - This feature is available in the latest Canary', '<style>', ' ', ' - This feature is available in the latest Canary', '<title>', ' ', ' - This feature is available in the latest Canary', 'APIs', ' ', 'createPortal', ' ', 'flushSync', ' ', 'findDOMNode', ' ', 'hydrate', ' ', 'preconnect', ' ', ' - This feature is available in the latest Canary', 'prefetchDNS', ' ', ' - This feature is available in the latest Canary', 'preinit', ' ', ' - This feature is available in the latest Canary', 'preinitModule', ' ', ' - This feature is available in the latest Canary', 'preload', ' ', ' - This feature is available in the latest Canary', 'preloadModule', ' ', ' - This feature is available in the latest Canary', 'render', ' ', 'unmountComponentAtNode', ' ', 'Client APIs', ' ', 'createRoot', ' ', 'hydrateRoot', ' ', 'Server APIs', ' ', 'renderToNodeStream', ' ', 'renderToPipeableStream', ' ', 'renderToReadableStream', ' ', 'renderToStaticMarkup', ' ', 'renderToStaticNodeStream', ' ', 'renderToString', ' ', 'Rules of React', 'Overview', ' ', 'Components and Hooks must be pure', ' ', 'React calls Components and Hooks', ' ', 'Rules of Hooks', ' ', 'Legacy APIs', 'Legacy React APIs', ' ', 'Children', ' ', 'cloneElement', ' ', 'Component', ' ', 'createElement', ' ', 'createFactory', ' ', 'createRef', ' ', 'isValidElement', ' ', 'PureComponent', ' ', 'Is this page useful?', 'API Reference', 'Components', '<input>', 'The ', 'built-in browser ', '<input>', ' component', ' lets you render different kinds of form inputs.', '<', 'input', ' ', '/>', '\\n', 'Reference ', '<input>', ' ', 'Usage ', 'Displaying inputs of different types ', 'Providing a label for an input ', 'Providing an initial value for an input ', 'Reading the input values when submitting a form ', 'Controlling an input with a state variable ', 'Optimizing re-rendering on every keystroke ', 'Troubleshooting ', 'My text input doesn’t update when I type into it ', 'My checkbox doesn’t update when I click on it ', 'My input caret jumps to the beginning on every keystroke ', 'I’m getting an error: “A component is changing an uncontrolled input to be controlled” ', '\\n', '\\n', 'Reference ', '\\n', '<input>', ' ', '\\n', 'To display an input, render the ', 'built-in browser ', '<input>', ' component.', '\\n', '<', 'input', ' ', 'name', '=', '\"myInput\"', ' ', '/>', '\\n', 'See more examples below.', '\\n', 'Props ', '\\n', '<input>', ' supports all ', 'common element props.', '\\n', 'Canary', 'React’s extensions to the ', 'formAction', ' prop are currently only available in React’s Canary and experimental channels. In stable releases of React, ', 'formAction', ' works only as a ', 'built-in browser HTML component', '. Learn more about ', 'React’s release channels here', '.', '\\n', 'formAction', ': A string or function. Overrides the parent ', '<form action>', ' for ', 'type=\"submit\"', ' and ', 'type=\"image\"', '. When a URL is passed to ', 'action', ' the form will behave like a standard HTML form. When a function is passed to ', 'formAction', ' the function will handle the form submission. See ', '<form action>', '.', '\\n', 'You can ', 'make an input controlled', ' by passing one of these props:', '\\n', '\\n', 'checked', ': A boolean. For a checkbox input or a radio button, controls whether it is selected.', '\\n', 'value', ': A string. For a text input, controls its text. (For a radio button, specifies its form data.)', '\\n', '\\n', 'When you pass either of them, you must also pass an ', 'onChange', ' handler that updates the passed value.', '\\n', 'These ', '<input>', ' props are only relevant for uncontrolled inputs:', '\\n', '\\n', 'defaultChecked', ': A boolean. Specifies ', 'the initial value', ' for ', 'type=\"checkbox\"', ' and ', 'type=\"radio\"', ' inputs.', '\\n', 'defaultValue', ': A string. Specifies ', 'the initial value', ' for a text input.', '\\n', '\\n', 'These ', '<input>', ' props are relevant both for uncontrolled and controlled inputs:', '\\n', '\\n', 'accept', ': A string. Specifies which filetypes are accepted by a ', 'type=\"file\"', ' input.', '\\n', 'alt', ': A string. Specifies the alternative image text for a ', 'type=\"image\"', ' input.', '\\n', 'capture', ': A string. Specifies the media (microphone, video, or camera) captured by a ', 'type=\"file\"', ' input.', '\\n', 'autoComplete', ': A string. Specifies one of the possible ', 'autocomplete behaviors.', '\\n', 'autoFocus', ': A boolean. If ', 'true', ', React will focus the element on mount.', '\\n', 'dirname', ': A string. Specifies the form field name for the element’s directionality.', '\\n', 'disabled', ': A boolean. If ', 'true', ', the input will not be interactive and will appear dimmed.', '\\n', 'children', ': ', '<input>', ' does not accept children.', '\\n', 'form', ': A string. Specifies the ', 'id', ' of the ', '<form>', ' this input belongs to. If omitted, it’s the closest parent form.', '\\n', 'formAction', ': A string. Overrides the parent ', '<form action>', ' for ', 'type=\"submit\"', ' and ', 'type=\"image\"', '.', '\\n', 'formEnctype', ': A string. Overrides the parent ', '<form enctype>', ' for ', 'type=\"submit\"', ' and ', 'type=\"image\"', '.', '\\n', 'formMethod', ': A string. Overrides the parent ', '<form method>', ' for ', 'type=\"submit\"', ' and ', 'type=\"image\"', '.', '\\n', 'formNoValidate', ': A string. Overrides the parent ', '<form noValidate>', ' for ', 'type=\"submit\"', ' and ', 'type=\"image\"', '.', '\\n', 'formTarget', ': A string. Overrides the parent ', '<form target>', ' for ', 'type=\"submit\"', ' and ', 'type=\"image\"', '.', '\\n', 'height', ': A string. Specifies the image height for ', 'type=\"image\"', '.', '\\n', 'list', ': A string. Specifies the ', 'id', ' of the ', '<datalist>', ' with the autocomplete options.', '\\n', 'max', ': A number. Specifies the maximum value of numerical and datetime inputs.', '\\n', 'maxLength', ': A number. Specifies the maximum length of text and other inputs.', '\\n', 'min', ': A number. Specifies the minimum value of numerical and datetime inputs.', '\\n', 'minLength', ': A number. Specifies the minimum length of text and other inputs.', '\\n', 'multiple', ': A boolean. Specifies whether multiple values are allowed for ', '<type=\"file\"', ' and ', 'type=\"email\"', '.', '\\n', 'name', ': A string. Specifies the name for this input that’s ', 'submitted with the form.', '\\n', 'onChange', ': An ', 'Event', ' handler', ' function. Required for ', 'controlled inputs.', ' Fires immediately when the input’s value is changed by the user (for example, it fires on every keystroke). Behaves like the browser ', 'input', ' event.', '\\n', 'onChangeCapture', ': A version of ', 'onChange', ' that fires in the ', 'capture phase.', '\\n', 'onInput', ': An ', 'Event', ' handler', ' function. Fires immediately when the value is changed by the user. For historical reasons, in React it is idiomatic to use ', 'onChange', ' instead which works similarly.', '\\n', 'onInputCapture', ': A version of ', 'onInput', ' that fires in the ', 'capture phase.', '\\n', 'onInvalid', ': An ', 'Event', ' handler', ' function. Fires if an input fails validation on form submit. Unlike the built-in ', 'invalid', ' event, the React ', 'onInvalid', ' event bubbles.', '\\n', 'onInvalidCapture', ': A version of ', 'onInvalid', ' that fires in the ', 'capture phase.', '\\n', 'onSelect', ': An ', 'Event', ' handler', ' function. Fires after the selection inside the ', '<input>', ' changes. React extends the ', 'onSelect', ' event to also fire for empty selection and on edits (which may affect the selection).', '\\n', 'onSelectCapture', ': A version of ', 'onSelect', ' that fires in the ', 'capture phase.', '\\n', 'pattern', ': A string. Specifies the pattern that the ', 'value', ' must match.', '\\n', 'placeholder', ': A string. Displayed in a dimmed color when the input value is empty.', '\\n', 'readOnly', ': A boolean. If ', 'true', ', the input is not editable by the user.', '\\n', 'required', ': A boolean. If ', 'true', ', the value must be provided for the form to submit.', '\\n', 'size', ': A number. Similar to setting width, but the unit depends on the control.', '\\n', 'src', ': A string. Specifies the image source for a ', 'type=\"image\"', ' input.', '\\n', 'step', ': A positive number or an ', \"'any'\", ' string. Specifies the distance between valid values.', '\\n', 'type', ': A string. One of the ', 'input types.', '\\n', 'width', ':  A string. Specifies the image width for a ', 'type=\"image\"', ' input.', '\\n', '\\n', 'Caveats ', '\\n', '\\n', 'Checkboxes need ', 'checked', ' (or ', 'defaultChecked', '), not ', 'value', ' (or ', 'defaultValue', ').', '\\n', 'If a text input receives a string ', 'value', ' prop, it will be ', 'treated as controlled.', '\\n', 'If a checkbox or a radio button receives a boolean ', 'checked', ' prop, it will be ', 'treated as controlled.', '\\n', 'An input can’t be both controlled and uncontrolled at the same time.', '\\n', 'An input cannot switch between being controlled or uncontrolled over its lifetime.', '\\n', 'Every controlled input needs an ', 'onChange', ' event handler that synchronously updates its backing value.', '\\n', '\\n', '\\n', 'Usage ', '\\n', 'Displaying inputs of different types ', '\\n', 'To display an input, render an ', '<input>', ' component. By default, it will be a text input. You can pass ', 'type=\"checkbox\"', ' for a checkbox, ', 'type=\"radio\"', ' for a radio button, ', 'or one of the other input types.', '\\n', 'App.js', 'App.js', ' Reset', 'Fork', 'export', ' ', 'default', ' ', 'function', ' ', 'MyForm', '(', ')', ' ', '{', '\\n  ', 'return', ' ', '(', '\\n    ', '<', '>', '\\n      ', '<', 'label', '>', '\\n        Text input: ', '<', 'input', ' ', 'name', '=', '\"myInput\"', ' ', '/>', '\\n      ', '</', 'label', '>', '\\n      ', '<', 'hr', ' ', '/>', '\\n      ', '<', 'label', '>', '\\n        Checkbox: ', '<', 'input', ' ', 'type', '=', '\"checkbox\"', ' ', 'name', '=', '\"myCheckbox\"', ' ', '/>', '\\n      ', '</', 'label', '>', '\\n      ', '<', 'hr', ' ', '/>', '\\n      ', '<', 'p', '>', '\\n        Radio buttons:\\n        ', '<', 'label', '>', '\\n          ', '<', 'input', ' ', 'type', '=', '\"radio\"', ' ', 'name', '=', '\"myRadio\"', ' ', 'value', '=', '\"option1\"', ' ', '/>', '\\n          Option 1\\n        ', '</', 'label', '>', '\\n        ', '<', 'label', '>', '\\n          ', '<', 'input', ' ', 'type', '=', '\"radio\"', ' ', 'name', '=', '\"myRadio\"', ' ', 'value', '=', '\"option2\"', ' ', '/>', '\\n          Option 2\\n        ', '</', 'label', '>', '\\n        ', '<', 'label', '>', '\\n          ', '<', 'input', ' ', 'type', '=', '\"radio\"', ' ', 'name', '=', '\"myRadio\"', ' ', 'value', '=', '\"option3\"', ' ', '/>', '\\n          Option 3\\n        ', '</', 'label', '>', '\\n      ', '</', 'p', '>', '\\n    ', '</', '>', '\\n  ', ')', ';', '\\n', '}', '\\n\\n', 'Show more', '\\n', '\\n', 'Providing a label for an input ', '\\n', 'Typically, you will place every ', '<input>', ' inside a ', '<label>', ' tag. This tells the browser that this label is associated with that input. When the user clicks the label, the browser will automatically focus the input. It’s also essential for accessibility: a screen reader will announce the label caption when the user focuses the associated input.', '\\n', 'If you can’t nest ', '<input>', ' into a ', '<label>', ', associate them by passing the same ID to ', '<input id>', ' and ', '<label htmlFor>', '.', ' To avoid conflicts between multiple instances of one component, generate such an ID with ', 'useId', '.', '\\n', 'App.js', 'App.js', ' Reset', 'Fork', 'import', ' ', '{', ' ', 'useId', ' ', '}', ' ', 'from', ' ', \"'react'\", ';', '\\n\\n', 'export', ' ', 'default', ' ', 'function', ' ', 'Form', '(', ')', ' ', '{', '\\n  ', 'const', ' ', 'ageInputId', ' = ', 'useId', '(', ')', ';', '\\n  ', 'return', ' ', '(', '\\n    ', '<', '>', '\\n      ', '<', 'label', '>', '\\n        Your first name:\\n        ', '<', 'input', ' ', 'name', '=', '\"firstName\"', ' ', '/>', '\\n      ', '</', 'label', '>', '\\n      ', '<', 'hr', ' ', '/>', '\\n      ', '<', 'label', ' ', 'htmlFor', '=', '{', 'ageInputId', '}', '>', 'Your age:', '</', 'label', '>', '\\n      ', '<', 'input', ' ', 'id', '=', '{', 'ageInputId', '}', ' ', 'name', '=', '\"age\"', ' ', 'type', '=', '\"number\"', ' ', '/>', '\\n    ', '</', '>', '\\n  ', ')', ';', '\\n', '}', '\\n\\n', 'Show more', '\\n', '\\n', 'Providing an initial value for an input ', '\\n', 'You can optionally specify the initial value for any input. Pass it as the ', 'defaultValue', ' string for text inputs. Checkboxes and radio buttons should specify the initial value with the ', 'defaultChecked', ' boolean instead.', '\\n', 'App.js', 'App.js', ' Reset', 'Fork', 'export', ' ', 'default', ' ', 'function', ' ', 'MyForm', '(', ')', ' ', '{', '\\n  ', 'return', ' ', '(', '\\n    ', '<', '>', '\\n      ', '<', 'label', '>', '\\n        Text input: ', '<', 'input', ' ', 'name', '=', '\"myInput\"', ' ', 'defaultValue', '=', '\"Some initial value\"', ' ', '/>', '\\n      ', '</', 'label', '>', '\\n      ', '<', 'hr', ' ', '/>', '\\n      ', '<', 'label', '>', '\\n        Checkbox: ', '<', 'input', ' ', 'type', '=', '\"checkbox\"', ' ', 'name', '=', '\"myCheckbox\"', ' ', 'defaultChecked', '=', '{', 'true', '}', ' ', '/>', '\\n      ', '</', 'label', '>', '\\n      ', '<', 'hr', ' ', '/>', '\\n      ', '<', 'p', '>', '\\n        Radio buttons:\\n        ', '<', 'label', '>', '\\n          ', '<', 'input', ' ', 'type', '=', '\"radio\"', ' ', 'name', '=', '\"myRadio\"', ' ', 'value', '=', '\"option1\"', ' ', '/>', '\\n          Option 1\\n        ', '</', 'label', '>', '\\n        ', '<', 'label', '>', '\\n          ', '<', 'input', '\\n            ', 'type', '=', '\"radio\"', '\\n            ', 'name', '=', '\"myRadio\"', '\\n            ', 'value', '=', '\"option2\"', '\\n            ', 'defaultChecked', '=', '{', 'true', '}', ' \\n          ', '/>', '\\n          Option 2\\n        ', '</', 'label', '>', '\\n        ', '<', 'label', '>', '\\n          ', '<', 'input', ' ', 'type', '=', '\"radio\"', ' ', 'name', '=', '\"myRadio\"', ' ', 'value', '=', '\"option3\"', ' ', '/>', '\\n          Option 3\\n        ', '</', 'label', '>', '\\n      ', '</', 'p', '>', '\\n    ', '</', '>', '\\n  ', ')', ';', '\\n', '}', '\\n\\n', 'Show more', '\\n', '\\n', 'Reading the input values when submitting a form ', '\\n', 'Add a ', '<form>', ' around your inputs with a ', '<button type=\"submit\">', ' inside. It will call your ', '<form onSubmit>', ' event handler. By default, the browser will send the form data to the current URL and refresh the page. You can override that behavior by calling ', 'e.preventDefault()', '. Read the form data with ', 'new FormData(e.target)', '.', '\\n', 'App.js', 'App.js', ' Reset', 'Fork', 'export', ' ', 'default', ' ', 'function', ' ', 'MyForm', '(', ')', ' ', '{', '\\n  ', 'function', ' ', 'handleSubmit', '(', 'e', ')', ' ', '{', '\\n    ', '// Prevent the browser from reloading the page', '\\n    ', 'e', '.', 'preventDefault', '(', ')', ';', '\\n\\n    ', '// Read the form data', '\\n    ', 'const', ' ', 'form', ' = ', 'e', '.', 'target', ';', '\\n    ', 'const', ' ', 'formData', ' = ', 'new', ' ', 'FormData', '(', 'form', ')', ';', '\\n\\n    ', '// You can pass formData as a fetch body directly:', '\\n    ', 'fetch', '(', \"'/some-api'\", ',', ' ', '{', ' ', 'method', ':', ' ', 'form', '.', 'method', ',', ' ', 'body', ':', ' ', 'formData', ' ', '}', ')', ';', '\\n\\n    ', '// Or you can work with it as a plain object:', '\\n    ', 'const', ' ', 'formJson', ' = ', 'Object', '.', 'fromEntries', '(', 'formData', '.', 'entries', '(', ')', ')', ';', '\\n    ', 'console', '.', 'log', '(', 'formJson', ')', ';', '\\n  ', '}', '\\n\\n  ', 'return', ' ', '(', '\\n    ', '<', 'form', ' ', 'method', '=', '\"post\"', ' ', 'onSubmit', '=', '{', 'handleSubmit', '}', '>', '\\n      ', '<', 'label', '>', '\\n        Text input: ', '<', 'input', ' ', 'name', '=', '\"myInput\"', ' ', 'defaultValue', '=', '\"Some initial value\"', ' ', '/>', '\\n      ', '</', 'label', '>', '\\n      ', '<', 'hr', ' ', '/>', '\\n      ', '<', 'label', '>', '\\n        Checkbox: ', '<', 'input', ' ', 'type', '=', '\"checkbox\"', ' ', 'name', '=', '\"myCheckbox\"', ' ', 'defaultChecked', '=', '{', 'true', '}', ' ', '/>', '\\n      ', '</', 'label', '>', '\\n      ', '<', 'hr', ' ', '/>', '\\n      ', '<', 'p', '>', '\\n        Radio buttons:\\n        ', '<', 'label', '>', '<', 'input', ' ', 'type', '=', '\"radio\"', ' ', 'name', '=', '\"myRadio\"', ' ', 'value', '=', '\"option1\"', ' ', '/>', ' Option 1', '</', 'label', '>', '\\n        ', '<', 'label', '>', '<', 'input', ' ', 'type', '=', '\"radio\"', ' ', 'name', '=', '\"myRadio\"', ' ', 'value', '=', '\"option2\"', ' ', 'defaultChecked', '=', '{', 'true', '}', ' ', '/>', ' Option 2', '</', 'label', '>', '\\n        ', '<', 'label', '>', '<', 'input', ' ', 'type', '=', '\"radio\"', ' ', 'name', '=', '\"myRadio\"', ' ', 'value', '=', '\"option3\"', ' ', '/>', ' Option 3', '</', 'label', '>', '\\n      ', '</', 'p', '>', '\\n      ', '<', 'hr', ' ', '/>', '\\n      ', '<', 'button', ' ', 'type', '=', '\"reset\"', '>', 'Reset form', '</', 'button', '>', '\\n      ', '<', 'button', ' ', 'type', '=', '\"submit\"', '>', 'Submit form', '</', 'button', '>', '\\n    ', '</', 'form', '>', '\\n  ', ')', ';', '\\n', '}', '\\n\\n', 'Show more', '\\n', 'Note', 'Give a ', 'name', ' to every ', '<input>', ', for example ', '<input name=\"firstName\" defaultValue=\"Taylor\" />', '. The ', 'name', ' you specified will be used as a key in the form data, for example ', '{ firstName: \"Taylor\" }', '.', '\\n', 'Pitfall', 'By default, ', 'any', ' ', '<button>', ' inside a ', '<form>', ' will submit it. This can be surprising! If you have your own custom ', 'Button', ' React component, consider returning ', '<button type=\"button\">', ' instead of ', '<button>', '. Then, to be explicit, use ', '<button type=\"submit\">', ' for buttons that ', 'are', ' supposed to submit the form.', '\\n', '\\n', 'Controlling an input with a state variable ', '\\n', 'An input like ', '<input />', ' is ', 'uncontrolled.', ' Even if you ', 'pass an initial value', ' like ', '<input defaultValue=\"Initial text\" />', ', your JSX only specifies the initial value. It does not control what the value should be right now.', '\\n', 'To render a ', 'controlled', ' input, pass the ', 'value', ' prop to it (or ', 'checked', ' for checkboxes and radios).', ' React will force the input to always have the ', 'value', ' you passed. Usually, you would do this by declaring a ', 'state variable:', '\\n', 'function', ' ', 'Form', '(', ')', ' ', '{', '  ', 'const', ' ', '[', 'firstName', ',', ' ', 'setFirstName', ']', ' = ', 'useState', '(', \"''\", ')', ';', ' ', '// Declare a state variable...', '  ', '// ...', '  ', 'return', ' ', '(', '    ', '<', 'input', '      ', 'value', '=', '{', 'firstName', '}', ' ', \"// ...force the input's value to match the state variable...\", '      ', 'onChange', '=', '{', 'e', ' ', '=>', ' ', 'setFirstName', '(', 'e', '.', 'target', '.', 'value', ')', '}', ' ', '// ... and update the state variable on any edits!', '    ', '/>', '  ', ')', ';', '}', '\\n', 'A controlled input makes sense if you needed state anyway—for example, to re-render your UI on every edit:', '\\n', 'function', ' ', 'Form', '(', ')', ' ', '{', '  ', 'const', ' ', '[', 'firstName', ',', ' ', 'setFirstName', ']', ' = ', 'useState', '(', \"''\", ')', ';', '  ', 'return', ' ', '(', '    ', '<', '>', '      ', '<', 'label', '>', '        First name:', '        ', '<', 'input', ' ', 'value', '=', '{', 'firstName', '}', ' ', 'onChange', '=', '{', 'e', ' ', '=>', ' ', 'setFirstName', '(', 'e', '.', 'target', '.', 'value', ')', '}', ' ', '/>', '      ', '</', 'label', '>', '      ', '{', 'firstName', ' !== ', \"''\", ' && ', '<', 'p', '>', 'Your name is ', '{', 'firstName', '}', '.', '</', 'p', '>', '}', '      ...', '\\n', 'It’s also useful if you want to offer multiple ways to adjust the input state (for example, by clicking a button):', '\\n', 'function', ' ', 'Form', '(', ')', ' ', '{', '  ', '// ...', '  ', 'const', ' ', '[', 'age', ',', ' ', 'setAge', ']', ' = ', 'useState', '(', \"''\", ')', ';', '  ', 'const', ' ', 'ageAsNumber', ' = ', 'Number', '(', 'age', ')', ';', '  ', 'return', ' ', '(', '    ', '<', '>', '      ', '<', 'label', '>', '        Age:', '        ', '<', 'input', '          ', 'value', '=', '{', 'age', '}', '          ', 'onChange', '=', '{', 'e', ' ', '=>', ' ', 'setAge', '(', 'e', '.', 'target', '.', 'value', ')', '}', '          ', 'type', '=', '\"number\"', '        ', '/>', '        ', '<', 'button', ' ', 'onClick', '=', '{', '(', ')', ' ', '=>', ' ', 'setAge', '(', 'ageAsNumber', ' + ', '10', ')', '}', '>', '          Add 10 years', '        ', '</', 'button', '>', '\\n', 'The ', 'value', ' you pass to controlled components should not be ', 'undefined', ' or ', 'null', '. If you need the initial value to be empty (such as with the ', 'firstName', ' field below), initialize your state variable to an empty string (', \"''\", ').', '\\n', 'App.js', 'App.js', ' Reset', 'Fork', 'import', ' ', '{', ' ', 'useState', ' ', '}', ' ', 'from', ' ', \"'react'\", ';', '\\n\\n', 'export', ' ', 'default', ' ', 'function', ' ', 'Form', '(', ')', ' ', '{', '\\n  ', 'const', ' ', '[', 'firstName', ',', ' ', 'setFirstName', ']', ' = ', 'useState', '(', \"''\", ')', ';', '\\n  ', 'const', ' ', '[', 'age', ',', ' ', 'setAge', ']', ' = ', 'useState', '(', \"'20'\", ')', ';', '\\n  ', 'const', ' ', 'ageAsNumber', ' = ', 'Number', '(', 'age', ')', ';', '\\n  ', 'return', ' ', '(', '\\n    ', '<', '>', '\\n      ', '<', 'label', '>', '\\n        First name:\\n        ', '<', 'input', '\\n          ', 'value', '=', '{', 'firstName', '}', '\\n          ', 'onChange', '=', '{', 'e', ' ', '=>', ' ', 'setFirstName', '(', 'e', '.', 'target', '.', 'value', ')', '}', '\\n        ', '/>', '\\n      ', '</', 'label', '>', '\\n      ', '<', 'label', '>', '\\n        Age:\\n        ', '<', 'input', '\\n          ', 'value', '=', '{', 'age', '}', '\\n          ', 'onChange', '=', '{', 'e', ' ', '=>', ' ', 'setAge', '(', 'e', '.', 'target', '.', 'value', ')', '}', '\\n          ', 'type', '=', '\"number\"', '\\n        ', '/>', '\\n        ', '<', 'button', ' ', 'onClick', '=', '{', '(', ')', ' ', '=>', ' ', 'setAge', '(', 'ageAsNumber', ' + ', '10', ')', '}', '>', '\\n          Add 10 years\\n        ', '</', 'button', '>', '\\n      ', '</', 'label', '>', '\\n      ', '{', 'firstName', ' !== ', \"''\", ' &&\\n        ', '<', 'p', '>', 'Your name is ', '{', 'firstName', '}', '.', '</', 'p', '>', '\\n      ', '}', '\\n      ', '{', 'ageAsNumber', ' > ', '0', ' &&\\n        ', '<', 'p', '>', 'Your age is ', '{', 'ageAsNumber', '}', '.', '</', 'p', '>', '\\n      ', '}', '\\n    ', '</', '>', '\\n  ', ')', ';', '\\n', '}', '\\n\\n', 'Show more', '\\n', 'Pitfall', 'If you pass ', 'value', ' without ', 'onChange', ', it will be impossible to type into the input.', ' When you control an input by passing some ', 'value', ' to it, you ', 'force', ' it to always have the value you passed. So if you pass a state variable as a ', 'value', ' but forget to update that state variable synchronously during the ', 'onChange', ' event handler, React will revert the input after every keystroke back to the ', 'value', ' that you specified.', '\\n', '\\n', 'Optimizing re-rendering on every keystroke ', '\\n', 'When you use a controlled input, you set the state on every keystroke. If the component containing your state re-renders a large tree, this can get slow. There’s a few ways you can optimize re-rendering performance.', '\\n', 'For example, suppose you start with a form that re-renders all page content on every keystroke:', '\\n', 'function', ' ', 'App', '(', ')', ' ', '{', '  ', 'const', ' ', '[', 'firstName', ',', ' ', 'setFirstName', ']', ' = ', 'useState', '(', \"''\", ')', ';', '  ', 'return', ' ', '(', '    ', '<', '>', '      ', '<', 'form', '>', '        ', '<', 'input', ' ', 'value', '=', '{', 'firstName', '}', ' ', 'onChange', '=', '{', 'e', ' ', '=>', ' ', 'setFirstName', '(', 'e', '.', 'target', '.', 'value', ')', '}', ' ', '/>', '      ', '</', 'form', '>', '      ', '<', 'PageContent', ' ', '/>', '    ', '</', '>', '  ', ')', ';', '}', '\\n', 'Since ', '<PageContent />', ' doesn’t rely on the input state, you can move the input state into its own component:', '\\n', 'function', ' ', 'App', '(', ')', ' ', '{', '  ', 'return', ' ', '(', '    ', '<', '>', '      ', '<', 'SignupForm', ' ', '/>', '      ', '<', 'PageContent', ' ', '/>', '    ', '</', '>', '  ', ')', ';', '}', 'function', ' ', 'SignupForm', '(', ')', ' ', '{', '  ', 'const', ' ', '[', 'firstName', ',', ' ', 'setFirstName', ']', ' = ', 'useState', '(', \"''\", ')', ';', '  ', 'return', ' ', '(', '    ', '<', 'form', '>', '      ', '<', 'input', ' ', 'value', '=', '{', 'firstName', '}', ' ', 'onChange', '=', '{', 'e', ' ', '=>', ' ', 'setFirstName', '(', 'e', '.', 'target', '.', 'value', ')', '}', ' ', '/>', '    ', '</', 'form', '>', '  ', ')', ';', '}', '\\n', 'This significantly improves performance because now only ', 'SignupForm', ' re-renders on every keystroke.', '\\n', 'If there is no way to avoid re-rendering (for example, if ', 'PageContent', ' depends on the search input’s value), ', 'useDeferredValue', ' lets you keep the controlled input responsive even in the middle of a large re-render.', '\\n', '\\n', 'Troubleshooting ', '\\n', 'My text input doesn’t update when I type into it ', '\\n', 'If you render an input with ', 'value', ' but no ', 'onChange', ', you will see an error in the console:', '\\n', '// 🔴 Bug: controlled text input with no onChange handler', '<', 'input', ' ', 'value', '=', '{', 'something', '}', ' ', '/>', '\\n', 'Console', 'You provided a ', 'value', ' prop to a form field without an ', 'onChange', ' handler. This will render a read-only field. If the field should be mutable use ', 'defaultValue', '. Otherwise, set either ', 'onChange', ' or ', 'readOnly', '.', '\\n', 'As the error message suggests, if you only wanted to ', 'specify the ', 'initial', ' value,', ' pass ', 'defaultValue', ' instead:', '\\n', '// ✅ Good: uncontrolled input with an initial value', '<', 'input', ' ', 'defaultValue', '=', '{', 'something', '}', ' ', '/>', '\\n', 'If you want ', 'to control this input with a state variable,', ' specify an ', 'onChange', ' handler:', '\\n', '// ✅ Good: controlled input with onChange', '<', 'input', ' ', 'value', '=', '{', 'something', '}', ' ', 'onChange', '=', '{', 'e', ' ', '=>', ' ', 'setSomething', '(', 'e', '.', 'target', '.', 'value', ')', '}', ' ', '/>', '\\n', 'If the value is intentionally read-only, add a ', 'readOnly', ' prop to suppress the error:', '\\n', '// ✅ Good: readonly controlled input without on change', '<', 'input', ' ', 'value', '=', '{', 'something', '}', ' ', 'readOnly', '=', '{', 'true', '}', ' ', '/>', '\\n', '\\n', 'My checkbox doesn’t update when I click on it ', '\\n', 'If you render a checkbox with ', 'checked', ' but no ', 'onChange', ', you will see an error in the console:', '\\n', '// 🔴 Bug: controlled checkbox with no onChange handler', '<', 'input', ' ', 'type', '=', '\"checkbox\"', ' ', 'checked', '=', '{', 'something', '}', ' ', '/>', '\\n', 'Console', 'You provided a ', 'checked', ' prop to a form field without an ', 'onChange', ' handler. This will render a read-only field. If the field should be mutable use ', 'defaultChecked', '. Otherwise, set either ', 'onChange', ' or ', 'readOnly', '.', '\\n', 'As the error message suggests, if you only wanted to ', 'specify the ', 'initial', ' value,', ' pass ', 'defaultChecked', ' instead:', '\\n', '// ✅ Good: uncontrolled checkbox with an initial value', '<', 'input', ' ', 'type', '=', '\"checkbox\"', ' ', 'defaultChecked', '=', '{', 'something', '}', ' ', '/>', '\\n', 'If you want ', 'to control this checkbox with a state variable,', ' specify an ', 'onChange', ' handler:', '\\n', '// ✅ Good: controlled checkbox with onChange', '<', 'input', ' ', 'type', '=', '\"checkbox\"', ' ', 'checked', '=', '{', 'something', '}', ' ', 'onChange', '=', '{', 'e', ' ', '=>', ' ', 'setSomething', '(', 'e', '.', 'target', '.', 'checked', ')', '}', ' ', '/>', '\\n', 'Pitfall', 'You need to read ', 'e.target.checked', ' rather than ', 'e.target.value', ' for checkboxes.', '\\n', 'If the checkbox is intentionally read-only, add a ', 'readOnly', ' prop to suppress the error:', '\\n', '// ✅ Good: readonly controlled input without on change', '<', 'input', ' ', 'type', '=', '\"checkbox\"', ' ', 'checked', '=', '{', 'something', '}', ' ', 'readOnly', '=', '{', 'true', '}', ' ', '/>', '\\n', '\\n', 'My input caret jumps to the beginning on every keystroke ', '\\n', 'If you ', 'control an input,', ' you must update its state variable to the input’s value from the DOM during ', 'onChange', '.', '\\n', 'You can’t update it to something other than ', 'e.target.value', ' (or ', 'e.target.checked', ' for checkboxes):', '\\n', 'function', ' ', 'handleChange', '(', 'e', ')', ' ', '{', '  ', '// 🔴 Bug: updating an input to something other than e.target.value', '  ', 'setFirstName', '(', 'e', '.', 'target', '.', 'value', '.', 'toUpperCase', '(', ')', ')', ';', '}', '\\n', 'You also can’t update it asynchronously:', '\\n', 'function', ' ', 'handleChange', '(', 'e', ')', ' ', '{', '  ', '// 🔴 Bug: updating an input asynchronously', '  ', 'setTimeout', '(', '(', ')', ' ', '=>', ' ', '{', '    ', 'setFirstName', '(', 'e', '.', 'target', '.', 'value', ')', ';', '  ', '}', ',', ' ', '100', ')', ';', '}', '\\n', 'To fix your code, update it synchronously to ', 'e.target.value', ':', '\\n', 'function', ' ', 'handleChange', '(', 'e', ')', ' ', '{', '  ', '// ✅ Updating a controlled input to e.target.value synchronously', '  ', 'setFirstName', '(', 'e', '.', 'target', '.', 'value', ')', ';', '}', '\\n', 'If this doesn’t fix the problem, it’s possible that the input gets removed and re-added from the DOM on every keystroke. This can happen if you’re accidentally ', 'resetting state', ' on every re-render, for example if the input or one of its parents always receives a different ', 'key', ' attribute, or if you nest component function definitions (which is not supported and causes the “inner” component to always be considered a different tree).', '\\n', '\\n', 'I’m getting an error: “A component is changing an uncontrolled input to be controlled” ', '\\n', 'If you provide a ', 'value', ' to the component, it must remain a string throughout its lifetime.', '\\n', 'You cannot pass ', 'value={undefined}', ' first and later pass ', 'value=\"some string\"', ' because React won’t know whether you want the component to be uncontrolled or controlled. A controlled component should always receive a string ', 'value', ', not ', 'null', ' or ', 'undefined', '.', '\\n', 'If your ', 'value', ' is coming from an API or a state variable, it might be initialized to ', 'null', ' or ', 'undefined', '. In that case, either set it to an empty string (', \"''\", ') initially, or pass ', \"value={someValue ?? ''}\", ' to ensure ', 'value', ' is a string.', '\\n', 'Similarly, if you pass ', 'checked', ' to a checkbox, ensure it’s always a boolean.', 'Previous', '<form>', 'Next', '<option>', 'How do you like these docs?', 'Take our survey!', '©', '2024', 'Learn React', 'Quick Start', 'Installation', 'Describing the UI', 'Adding Interactivity', 'Managing State', 'Escape Hatches', 'API Reference', 'React APIs', 'React DOM APIs', 'Community', 'Code of Conduct', 'Meet the Team', 'Docs Contributors', 'Acknowledgements', 'More', 'Blog', 'React Native', 'Privacy', 'Terms', 'On this page', 'Overview', 'Reference ', '<input>', ' ', 'Usage ', 'Displaying inputs of different types ', 'Providing a label for an input ', 'Providing an initial value for an input ', 'Reading the input values when submitting a form ', 'Controlling an input with a state variable ', 'Optimizing re-rendering on every keystroke ', 'Troubleshooting ', 'My text input doesn’t update when I type into it ', 'My checkbox doesn’t update when I click on it ', 'My input caret jumps to the beginning on every keystroke ', 'I’m getting an error: “A component is changing an uncontrolled input to be controlled” ', "}