{"id": 108, "url": "https://react.dev/reference/react/useContext", "title": "useContext", "content": "'useContext – React', 'Stream React Conf on May 15-16.', 'Learn more.', 'React', 'Search', '⌘', 'Ctrl', 'K', 'Learn', 'Reference', 'Community', 'Blog', 'react@18.2.0', 'Overview', ' ', 'Hooks', ' ', 'use', ' ', ' - This feature is available in the latest Canary', 'useCallback', ' ', 'useContext', ' ', 'useDebugValue', ' ', 'useDeferredValue', ' ', 'useEffect', ' ', 'useId', ' ', 'useImperativeHandle', ' ', 'useInsertionEffect', ' ', 'useLayoutEffect', ' ', 'useMemo', ' ', 'useOptimistic', ' ', ' - This feature is available in the latest Canary', 'useReducer', ' ', 'useRef', ' ', 'useState', ' ', 'useSyncExternalStore', ' ', 'useTransition', ' ', 'Components', ' ', '<Fragment> (<>)', ' ', '<Profiler>', ' ', '<StrictMode>', ' ', '<Suspense>', ' ', 'APIs', ' ', 'cache', ' ', ' - This feature is available in the latest Canary', 'createContext', ' ', 'forwardRef', ' ', 'lazy', ' ', 'memo', ' ', 'startTransition', ' ', 'experimental_taintObjectReference', ' ', ' - This feature is available in the latest Canary', 'experimental_taintUniqueValue', ' ', ' - This feature is available in the latest Canary', 'Directives', ' ', ' - This feature is available in the latest Canary', \"'use client'\", ' ', ' - This feature is available in the latest Canary', \"'use server'\", ' ', ' - This feature is available in the latest Canary', 'react-dom@18.2.0', 'Hooks', ' ', 'useFormState', ' ', ' - This feature is available in the latest Canary', 'useFormStatus', ' ', ' - This feature is available in the latest Canary', 'Components', ' ', 'Common (e.g. <div>)', ' ', '<form>', ' ', ' - This feature is available in the latest Canary', '<input>', ' ', '<option>', ' ', '<progress>', ' ', '<select>', ' ', '<textarea>', ' ', '<link>', ' ', ' - This feature is available in the latest Canary', '<meta>', ' ', ' - This feature is available in the latest Canary', '<script>', ' ', ' - This feature is available in the latest Canary', '<style>', ' ', ' - This feature is available in the latest Canary', '<title>', ' ', ' - This feature is available in the latest Canary', 'APIs', ' ', 'createPortal', ' ', 'flushSync', ' ', 'findDOMNode', ' ', 'hydrate', ' ', 'preconnect', ' ', ' - This feature is available in the latest Canary', 'prefetchDNS', ' ', ' - This feature is available in the latest Canary', 'preinit', ' ', ' - This feature is available in the latest Canary', 'preinitModule', ' ', ' - This feature is available in the latest Canary', 'preload', ' ', ' - This feature is available in the latest Canary', 'preloadModule', ' ', ' - This feature is available in the latest Canary', 'render', ' ', 'unmountComponentAtNode', ' ', 'Client APIs', ' ', 'createRoot', ' ', 'hydrateRoot', ' ', 'Server APIs', ' ', 'renderToNodeStream', ' ', 'renderToPipeableStream', ' ', 'renderToReadableStream', ' ', 'renderToStaticMarkup', ' ', 'renderToStaticNodeStream', ' ', 'renderToString', ' ', 'Rules of React', 'Overview', ' ', 'Components and Hooks must be pure', ' ', 'React calls Components and Hooks', ' ', 'Rules of Hooks', ' ', 'Legacy APIs', 'Legacy React APIs', ' ', 'Children', ' ', 'cloneElement', ' ', 'Component', ' ', 'createElement', ' ', 'createFactory', ' ', 'createRef', ' ', 'isValidElement', ' ', 'PureComponent', ' ', 'Is this page useful?', 'API Reference', 'Hooks', 'useContext', 'useContext', ' is a React Hook that lets you read and subscribe to ', 'context', ' from your component.', 'const', ' ', 'value', ' = ', 'useContext', '(', 'SomeContext', ')', '\\n', 'Reference ', 'useContext(SomeContext)', ' ', 'Usage ', 'Passing data deeply into the tree ', 'Updating data passed via context ', 'Specifying a fallback default value ', 'Overriding context for a part of the tree ', 'Optimizing re-renders when passing objects and functions ', 'Troubleshooting ', 'My component doesn’t see the value from my provider ', 'I am always getting ', 'undefined', ' from my context although the default value is different ', '\\n', '\\n', 'Reference ', '\\n', 'useContext(SomeContext)', ' ', '\\n', 'Call ', 'useContext', ' at the top level of your component to read and subscribe to ', 'context.', '\\n', 'import', ' ', '{', ' ', 'useContext', ' ', '}', ' ', 'from', ' ', \"'react'\", ';', 'function', ' ', 'MyComponent', '(', ')', ' ', '{', '  ', 'const', ' ', 'theme', ' = ', 'useContext', '(', 'ThemeContext', ')', ';', '  ', '// ...', '\\n', 'See more examples below.', '\\n', 'Parameters ', '\\n', '\\n', 'SomeContext', ': The context that you’ve previously created with ', 'createContext', '. The context itself does not hold the information, it only represents the kind of information you can provide or read from components.', '\\n', '\\n', 'Returns ', '\\n', 'useContext', ' returns the context value for the calling component. It is determined as the ', 'value', ' passed to the closest ', 'SomeContext.Provider', ' above the calling component in the tree. If there is no such provider, then the returned value will be the ', 'defaultValue', ' you have passed to ', 'createContext', ' for that context. The returned value is always up-to-date. React automatically re-renders components that read some context if it changes.', '\\n', 'Caveats ', '\\n', '\\n', 'useContext()', ' call in a component is not affected by providers returned from the ', 'same', ' component. The corresponding ', '<Context.Provider>', ' ', 'needs to be ', 'above', ' the component doing the ', 'useContext()', ' call.', '\\n', 'React ', 'automatically re-renders', ' all the children that use a particular context starting from the provider that receives a different ', 'value', '. The previous and the next values are compared with the ', 'Object.is', ' comparison. Skipping re-renders with ', 'memo', ' does not prevent the children receiving fresh context values.', '\\n', 'If your build system produces duplicates modules in the output (which can happen with symlinks), this can break context. Passing something via context only works if ', 'SomeContext', ' that you use to provide context and ', 'SomeContext', ' that you use to read it are ', 'exactly', ' the same object', ', as determined by a ', '===', ' comparison.', '\\n', '\\n', '\\n', 'Usage ', '\\n', 'Passing data deeply into the tree ', '\\n', 'Call ', 'useContext', ' at the top level of your component to read and subscribe to ', 'context.', '\\n', 'import', ' ', '{', ' ', 'useContext', ' ', '}', ' ', 'from', ' ', \"'react'\", ';', 'function', ' ', 'Button', '(', ')', ' ', '{', '  ', 'const', ' ', 'theme', ' = ', 'useContext', '(', 'ThemeContext', ')', ';', '  ', '// ...', '\\n', 'useContext', ' returns the ', 'context value', ' for the ', 'context', ' you passed. To determine the context value, React searches the component tree and finds ', 'the closest context provider above', ' for that particular context.', '\\n', 'To pass context to a ', 'Button', ', wrap it or one of its parent components into the corresponding context provider:', '\\n', 'function', ' ', 'MyPage', '(', ')', ' ', '{', '  ', 'return', ' ', '(', '    ', '<', 'ThemeContext', '.', 'Provider', ' ', 'value', '=', '\"dark\"', '>', '      ', '<', 'Form', ' ', '/>', '    ', '</', 'ThemeContext', '.', 'Provider', '>', '  ', ')', ';', '}', 'function', ' ', 'Form', '(', ')', ' ', '{', '  ', '// ... renders buttons inside ...', '}', '\\n', 'It doesn’t matter how many layers of components there are between the provider and the ', 'Button', '. When a ', 'Button', ' ', 'anywhere', ' inside of ', 'Form', ' calls ', 'useContext(ThemeContext)', ', it will receive ', '\"dark\"', ' as the value.', '\\n', 'Pitfall', 'useContext()', ' always looks for the closest provider ', 'above', ' the component that calls it. It searches upwards and ', 'does not', ' consider providers in the component from which you’re calling ', 'useContext()', '.', '\\n', 'App.js', 'App.js', ' Reset', 'Fork', 'import', ' ', '{', ' ', 'createContext', ',', ' ', 'useContext', ' ', '}', ' ', 'from', ' ', \"'react'\", ';', '\\n\\n', 'const', ' ', 'ThemeContext', ' = ', 'createContext', '(', 'null', ')', ';', '\\n\\n', 'export', ' ', 'default', ' ', 'function', ' ', 'MyApp', '(', ')', ' ', '{', '\\n  ', 'return', ' ', '(', '\\n    ', '<', 'ThemeContext', '.', 'Provider', ' ', 'value', '=', '\"dark\"', '>', '\\n      ', '<', 'Form', ' ', '/>', '\\n    ', '</', 'ThemeContext', '.', 'Provider', '>', '\\n  ', ')', '\\n', '}', '\\n\\n', 'function', ' ', 'Form', '(', ')', ' ', '{', '\\n  ', 'return', ' ', '(', '\\n    ', '<', 'Panel', ' ', 'title', '=', '\"Welcome\"', '>', '\\n      ', '<', 'Button', '>', 'Sign up', '</', 'Button', '>', '\\n      ', '<', 'Button', '>', 'Log in', '</', 'Button', '>', '\\n    ', '</', 'Panel', '>', '\\n  ', ')', ';', '\\n', '}', '\\n\\n', 'function', ' ', 'Panel', '(', '{', ' ', 'title', ',', ' ', 'children', ' ', '}', ')', ' ', '{', '\\n  ', 'const', ' ', 'theme', ' = ', 'useContext', '(', 'ThemeContext', ')', ';', '\\n  ', 'const', ' ', 'className', ' = ', \"'panel-'\", ' + ', 'theme', ';', '\\n  ', 'return', ' ', '(', '\\n    ', '<', 'section', ' ', 'className', '=', '{', 'className', '}', '>', '\\n      ', '<', 'h1', '>', '{', 'title', '}', '</', 'h1', '>', '\\n      ', '{', 'children', '}', '\\n    ', '</', 'section', '>', '\\n  ', ')', '\\n', '}', '\\n\\n', 'function', ' ', 'Button', '(', '{', ' ', 'children', ' ', '}', ')', ' ', '{', '\\n  ', 'const', ' ', 'theme', ' = ', 'useContext', '(', 'ThemeContext', ')', ';', '\\n  ', 'const', ' ', 'className', ' = ', \"'button-'\", ' + ', 'theme', ';', '\\n  ', 'return', ' ', '(', '\\n    ', '<', 'button', ' ', 'className', '=', '{', 'className', '}', '>', '\\n      ', '{', 'children', '}', '\\n    ', '</', 'button', '>', '\\n  ', ')', ';', '\\n', '}', '\\n\\n', 'Show more', '\\n', '\\n', 'Updating data passed via context ', '\\n', 'Often, you’ll want the context to change over time. To update context, combine it with ', 'state.', ' Declare a state variable in the parent component, and pass the current state down as the ', 'context value', ' to the provider.', '\\n', 'function', ' ', 'MyPage', '(', ')', ' ', '{', '  ', 'const', ' ', '[', 'theme', ',', ' ', 'setTheme', ']', ' = ', 'useState', '(', \"'dark'\", ')', ';', '  ', 'return', ' ', '(', '    ', '<', 'ThemeContext', '.', 'Provider', ' ', 'value', '=', '{', 'theme', '}', '>', '      ', '<', 'Form', ' ', '/>', '      ', '<', 'Button', ' ', 'onClick', '=', '{', '(', ')', ' ', '=>', ' ', '{', '        ', 'setTheme', '(', \"'light'\", ')', ';', '      ', '}', '}', '>', '        Switch to light theme', '      ', '</', 'Button', '>', '    ', '</', 'ThemeContext', '.', 'Provider', '>', '  ', ')', ';', '}', '\\n', 'Now any ', 'Button', ' inside of the provider will receive the current ', 'theme', ' value. If you call ', 'setTheme', ' to update the ', 'theme', ' value that you pass to the provider, all ', 'Button', ' components will re-render with the new ', \"'light'\", ' value.', '\\n', 'Examples of updating context', '1', '. ', 'Updating a value via context ', '2', '. ', 'Updating an object via context ', '3', '. ', 'Multiple contexts ', '4', '. ', 'Extracting providers to a component ', '5', '. ', 'Scaling up with context and a reducer ', 'Example', ' ', '1', ' of', ' ', '5', ': ', 'Updating a value via context ', 'In this example, the ', 'MyApp', ' component holds a state variable which is then passed to the ', 'ThemeContext', ' provider. Checking the “Dark mode” checkbox updates the state. Changing the provided value re-renders all the components using that context.', 'App.js', 'App.js', ' Reset', 'Fork', 'import', ' ', '{', ' ', 'createContext', ',', ' ', 'useContext', ',', ' ', 'useState', ' ', '}', ' ', 'from', ' ', \"'react'\", ';', '\\n\\n', 'const', ' ', 'ThemeContext', ' = ', 'createContext', '(', 'null', ')', ';', '\\n\\n', 'export', ' ', 'default', ' ', 'function', ' ', 'MyApp', '(', ')', ' ', '{', '\\n  ', 'const', ' ', '[', 'theme', ',', ' ', 'setTheme', ']', ' = ', 'useState', '(', \"'light'\", ')', ';', '\\n  ', 'return', ' ', '(', '\\n    ', '<', 'ThemeContext', '.', 'Provider', ' ', 'value', '=', '{', 'theme', '}', '>', '\\n      ', '<', 'Form', ' ', '/>', '\\n      ', '<', 'label', '>', '\\n        ', '<', 'input', '\\n          ', 'type', '=', '\"checkbox\"', '\\n          ', 'checked', '=', '{', 'theme', ' === ', \"'dark'\", '}', '\\n          ', 'onChange', '=', '{', '(', 'e', ')', ' ', '=>', ' ', '{', '\\n            ', 'setTheme', '(', 'e', '.', 'target', '.', 'checked', ' ? ', \"'dark'\", ' : ', \"'light'\", ')', '\\n          ', '}', '}', '\\n        ', '/>', '\\n        Use dark mode\\n      ', '</', 'label', '>', '\\n    ', '</', 'ThemeContext', '.', 'Provider', '>', '\\n  ', ')', '\\n', '}', '\\n\\n', 'function', ' ', 'Form', '(', '{', ' ', 'children', ' ', '}', ')', ' ', '{', '\\n  ', 'return', ' ', '(', '\\n    ', '<', 'Panel', ' ', 'title', '=', '\"Welcome\"', '>', '\\n      ', '<', 'Button', '>', 'Sign up', '</', 'Button', '>', '\\n      ', '<', 'Button', '>', 'Log in', '</', 'Button', '>', '\\n    ', '</', 'Panel', '>', '\\n  ', ')', ';', '\\n', '}', '\\n\\n', 'function', ' ', 'Panel', '(', '{', ' ', 'title', ',', ' ', 'children', ' ', '}', ')', ' ', '{', '\\n  ', 'const', ' ', 'theme', ' = ', 'useContext', '(', 'ThemeContext', ')', ';', '\\n  ', 'const', ' ', 'className', ' = ', \"'panel-'\", ' + ', 'theme', ';', '\\n  ', 'return', ' ', '(', '\\n    ', '<', 'section', ' ', 'className', '=', '{', 'className', '}', '>', '\\n      ', '<', 'h1', '>', '{', 'title', '}', '</', 'h1', '>', '\\n      ', '{', 'children', '}', '\\n    ', '</', 'section', '>', '\\n  ', ')', '\\n', '}', '\\n\\n', 'function', ' ', 'Button', '(', '{', ' ', 'children', ' ', '}', ')', ' ', '{', '\\n  ', 'const', ' ', 'theme', ' = ', 'useContext', '(', 'ThemeContext', ')', ';', '\\n  ', 'const', ' ', 'className', ' = ', \"'button-'\", ' + ', 'theme', ';', '\\n  ', 'return', ' ', '(', '\\n    ', '<', 'button', ' ', 'className', '=', '{', 'className', '}', '>', '\\n      ', '{', 'children', '}', '\\n    ', '</', 'button', '>', '\\n  ', ')', ';', '\\n', '}', '\\n\\n', 'Show more', 'Note that ', 'value=\"dark\"', ' passes the ', '\"dark\"', ' string, but ', 'value={theme}', ' passes the value of the JavaScript ', 'theme', ' variable with ', 'JSX curly braces.', ' Curly braces also let you pass context values that aren’t strings.', 'Next ', 'Example', '\\n', '\\n', 'Specifying a fallback default value ', '\\n', 'If React can’t find any providers of that particular ', 'context', ' in the parent tree, the context value returned by ', 'useContext()', ' will be equal to the ', 'default value', ' that you specified when you ', 'created that context', ':', '\\n', 'const', ' ', 'ThemeContext', ' = ', 'createContext', '(', 'null', ')', ';', '\\n', 'The default value ', 'never changes', '. If you want to update context, use it with state as ', 'described above.', '\\n', 'Often, instead of ', 'null', ', there is some more meaningful value you can use as a default, for example:', '\\n', 'const', ' ', 'ThemeContext', ' = ', 'createContext', '(', \"'\", 'light', \"'\", ')', ';', '\\n', 'This way, if you accidentally render some component without a corresponding provider, it won’t break. This also helps your components work well in a test environment without setting up a lot of providers in the tests.', '\\n', 'In the example below, the “Toggle theme” button is always light because it’s ', 'outside any theme context provider', ' and the default context theme value is ', \"'light'\", '. Try editing the default theme to be ', \"'dark'\", '.', '\\n', 'App.js', 'App.js', ' Reset', 'Fork', 'import', ' ', '{', ' ', 'createContext', ',', ' ', 'useContext', ',', ' ', 'useState', ' ', '}', ' ', 'from', ' ', \"'react'\", ';', '\\n\\n', 'const', ' ', 'ThemeContext', ' = ', 'createContext', '(', \"'light'\", ')', ';', '\\n\\n', 'export', ' ', 'default', ' ', 'function', ' ', 'MyApp', '(', ')', ' ', '{', '\\n  ', 'const', ' ', '[', 'theme', ',', ' ', 'setTheme', ']', ' = ', 'useState', '(', \"'light'\", ')', ';', '\\n  ', 'return', ' ', '(', '\\n    ', '<', '>', '\\n      ', '<', 'ThemeContext', '.', 'Provider', ' ', 'value', '=', '{', 'theme', '}', '>', '\\n        ', '<', 'Form', ' ', '/>', '\\n      ', '</', 'ThemeContext', '.', 'Provider', '>', '\\n      ', '<', 'Button', ' ', 'onClick', '=', '{', '(', ')', ' ', '=>', ' ', '{', '\\n        ', 'setTheme', '(', 'theme', ' === ', \"'dark'\", ' ? ', \"'light'\", ' : ', \"'dark'\", ')', ';', '\\n      ', '}', '}', '>', '\\n        Toggle theme\\n      ', '</', 'Button', '>', '\\n    ', '</', '>', '\\n  ', ')', '\\n', '}', '\\n\\n', 'function', ' ', 'Form', '(', '{', ' ', 'children', ' ', '}', ')', ' ', '{', '\\n  ', 'return', ' ', '(', '\\n    ', '<', 'Panel', ' ', 'title', '=', '\"Welcome\"', '>', '\\n      ', '<', 'Button', '>', 'Sign up', '</', 'Button', '>', '\\n      ', '<', 'Button', '>', 'Log in', '</', 'Button', '>', '\\n    ', '</', 'Panel', '>', '\\n  ', ')', ';', '\\n', '}', '\\n\\n', 'function', ' ', 'Panel', '(', '{', ' ', 'title', ',', ' ', 'children', ' ', '}', ')', ' ', '{', '\\n  ', 'const', ' ', 'theme', ' = ', 'useContext', '(', 'ThemeContext', ')', ';', '\\n  ', 'const', ' ', 'className', ' = ', \"'panel-'\", ' + ', 'theme', ';', '\\n  ', 'return', ' ', '(', '\\n    ', '<', 'section', ' ', 'className', '=', '{', 'className', '}', '>', '\\n      ', '<', 'h1', '>', '{', 'title', '}', '</', 'h1', '>', '\\n      ', '{', 'children', '}', '\\n    ', '</', 'section', '>', '\\n  ', ')', '\\n', '}', '\\n\\n', 'function', ' ', 'Button', '(', '{', ' ', 'children', ',', ' ', 'onClick', ' ', '}', ')', ' ', '{', '\\n  ', 'const', ' ', 'theme', ' = ', 'useContext', '(', 'ThemeContext', ')', ';', '\\n  ', 'const', ' ', 'className', ' = ', \"'button-'\", ' + ', 'theme', ';', '\\n  ', 'return', ' ', '(', '\\n    ', '<', 'button', ' ', 'className', '=', '{', 'className', '}', ' ', 'onClick', '=', '{', 'onClick', '}', '>', '\\n      ', '{', 'children', '}', '\\n    ', '</', 'button', '>', '\\n  ', ')', ';', '\\n', '}', '\\n\\n', 'Show more', '\\n', '\\n', 'Overriding context for a part of the tree ', '\\n', 'You can override the context for a part of the tree by wrapping that part in a provider with a different value.', '\\n', '<', 'ThemeContext', '.', 'Provider', ' ', 'value', '=', '\"dark\"', '>', '  ...', '  ', '<', 'ThemeContext', '.', 'Provider', ' ', 'value', '=', '\"light\"', '>', '    ', '<', 'Footer', ' ', '/>', '  ', '</', 'ThemeContext', '.', 'Provider', '>', '  ...', '</', 'ThemeContext', '.', 'Provider', '>', '\\n', 'You can nest and override providers as many times as you need.', '\\n', 'Examples of overriding context', '1', '. ', 'Overriding a theme ', '2', '. ', 'Automatically nested headings ', 'Example', ' ', '1', ' of', ' ', '2', ': ', 'Overriding a theme ', 'Here, the button ', 'inside', ' the ', 'Footer', ' receives a different context value (', '\"light\"', ') than the buttons outside (', '\"dark\"', ').', 'App.js', 'App.js', ' Reset', 'Fork', 'import', ' ', '{', ' ', 'createContext', ',', ' ', 'useContext', ' ', '}', ' ', 'from', ' ', \"'react'\", ';', '\\n\\n', 'const', ' ', 'ThemeContext', ' = ', 'createContext', '(', 'null', ')', ';', '\\n\\n', 'export', ' ', 'default', ' ', 'function', ' ', 'MyApp', '(', ')', ' ', '{', '\\n  ', 'return', ' ', '(', '\\n    ', '<', 'ThemeContext', '.', 'Provider', ' ', 'value', '=', '\"dark\"', '>', '\\n      ', '<', 'Form', ' ', '/>', '\\n    ', '</', 'ThemeContext', '.', 'Provider', '>', '\\n  ', ')', '\\n', '}', '\\n\\n', 'function', ' ', 'Form', '(', ')', ' ', '{', '\\n  ', 'return', ' ', '(', '\\n    ', '<', 'Panel', ' ', 'title', '=', '\"Welcome\"', '>', '\\n      ', '<', 'Button', '>', 'Sign up', '</', 'Button', '>', '\\n      ', '<', 'Button', '>', 'Log in', '</', 'Button', '>', '\\n      ', '<', 'ThemeContext', '.', 'Provider', ' ', 'value', '=', '\"light\"', '>', '\\n        ', '<', 'Footer', ' ', '/>', '\\n      ', '</', 'ThemeContext', '.', 'Provider', '>', '\\n    ', '</', 'Panel', '>', '\\n  ', ')', ';', '\\n', '}', '\\n\\n', 'function', ' ', 'Footer', '(', ')', ' ', '{', '\\n  ', 'return', ' ', '(', '\\n    ', '<', 'footer', '>', '\\n      ', '<', 'Button', '>', 'Settings', '</', 'Button', '>', '\\n    ', '</', 'footer', '>', '\\n  ', ')', ';', '\\n', '}', '\\n\\n', 'function', ' ', 'Panel', '(', '{', ' ', 'title', ',', ' ', 'children', ' ', '}', ')', ' ', '{', '\\n  ', 'const', ' ', 'theme', ' = ', 'useContext', '(', 'ThemeContext', ')', ';', '\\n  ', 'const', ' ', 'className', ' = ', \"'panel-'\", ' + ', 'theme', ';', '\\n  ', 'return', ' ', '(', '\\n    ', '<', 'section', ' ', 'className', '=', '{', 'className', '}', '>', '\\n      ', '{', 'title', ' && ', '<', 'h1', '>', '{', 'title', '}', '</', 'h1', '>', '}', '\\n      ', '{', 'children', '}', '\\n    ', '</', 'section', '>', '\\n  ', ')', '\\n', '}', '\\n\\n', 'function', ' ', 'Button', '(', '{', ' ', 'children', ' ', '}', ')', ' ', '{', '\\n  ', 'const', ' ', 'theme', ' = ', 'useContext', '(', 'ThemeContext', ')', ';', '\\n  ', 'const', ' ', 'className', ' = ', \"'button-'\", ' + ', 'theme', ';', '\\n  ', 'return', ' ', '(', '\\n    ', '<', 'button', ' ', 'className', '=', '{', 'className', '}', '>', '\\n      ', '{', 'children', '}', '\\n    ', '</', 'button', '>', '\\n  ', ')', ';', '\\n', '}', '\\n\\n', 'Show more', 'Next ', 'Example', '\\n', '\\n', 'Optimizing re-renders when passing objects and functions ', '\\n', 'You can pass any values via context, including objects and functions.', '\\n', 'function', ' ', 'MyApp', '(', ')', ' ', '{', '  ', 'const', ' ', '[', 'currentUser', ',', ' ', 'setCurrentUser', ']', ' = ', 'useState', '(', 'null', ')', ';', '  ', 'function', ' ', 'login', '(', 'response', ')', ' ', '{', '    ', 'storeCredentials', '(', 'response', '.', 'credentials', ')', ';', '    ', 'setCurrentUser', '(', 'response', '.', 'user', ')', ';', '  ', '}', '  ', 'return', ' ', '(', '    ', '<', 'AuthContext', '.', 'Provider', ' ', 'value', '=', '{', '{ currentUser, login }', '}', '>', '      ', '<', 'Page', ' ', '/>', '    ', '</', 'AuthContext', '.', 'Provider', '>', '  ', ')', ';', '}', '\\n', 'Here, the ', 'context value', ' is a JavaScript object with two properties, one of which is a function. Whenever ', 'MyApp', ' re-renders (for example, on a route update), this will be a ', 'different', ' object pointing at a ', 'different', ' function, so React will also have to re-render all components deep in the tree that call ', 'useContext(AuthContext)', '.', '\\n', 'In smaller apps, this is not a problem. However, there is no need to re-render them if the underlying data, like ', 'currentUser', ', has not changed. To help React take advantage of that fact, you may wrap the ', 'login', ' function with ', 'useCallback', ' and wrap the object creation into ', 'useMemo', '. This is a performance optimization:', '\\n', 'import', ' ', '{', ' ', 'useCallback', ',', ' ', 'useMemo', ' ', '}', ' ', 'from', ' ', \"'react'\", ';', 'function', ' ', 'MyApp', '(', ')', ' ', '{', '  ', 'const', ' ', '[', 'currentUser', ',', ' ', 'setCurrentUser', ']', ' = ', 'useState', '(', 'null', ')', ';', '  ', 'const', ' ', 'login', ' = ', 'useCallback', '(', '(', 'response', ')', ' ', '=>', ' ', '{', '    ', 'storeCredentials', '(', 'response', '.', 'credentials', ')', ';', '    ', 'setCurrentUser', '(', 'response', '.', 'user', ')', ';', '  ', '}', ',', ' ', '[', ']', ')', ';', '  ', 'const', ' ', 'contextValue', ' = ', 'useMemo', '(', '(', ')', ' ', '=>', ' ', '(', '{', '    ', 'currentUser', ',', '    ', 'login', '  ', '}', ')', ',', ' ', '[', 'currentUser', ',', ' ', 'login', ']', ')', ';', '  ', 'return', ' ', '(', '    ', '<', 'AuthContext', '.', 'Provider', ' ', 'value', '=', '{', 'contextValue', '}', '>', '      ', '<', 'Page', ' ', '/>', '    ', '</', 'AuthContext', '.', 'Provider', '>', '  ', ')', ';', '}', '\\n', 'As a result of this change, even if ', 'MyApp', ' needs to re-render, the components calling ', 'useContext(AuthContext)', ' won’t need to re-render unless ', 'currentUser', ' has changed.', '\\n', 'Read more about ', 'useMemo', ' and ', 'useCallback', '.', '\\n', '\\n', 'Troubleshooting ', '\\n', 'My component doesn’t see the value from my provider ', '\\n', 'There are a few common ways that this can happen:', '\\n', '\\n', 'You’re rendering ', '<SomeContext.Provider>', ' in the same component (or below) as where you’re calling ', 'useContext()', '. Move ', '<SomeContext.Provider>', ' ', 'above and outside', ' the component calling ', 'useContext()', '.', '\\n', 'You may have forgotten to wrap your component with ', '<SomeContext.Provider>', ', or you might have put it in a different part of the tree than you thought. Check whether the hierarchy is right using ', 'React DevTools.', '\\n', 'You might be running into some build issue with your tooling that causes ', 'SomeContext', ' as seen from the providing component and ', 'SomeContext', ' as seen by the reading component to be two different objects. This can happen if you use symlinks, for example. You can verify this by assigning them to globals like ', 'window.SomeContext1', ' and ', 'window.SomeContext2', ' and then checking whether ', 'window.SomeContext1 === window.SomeContext2', ' in the console. If they’re not the same, fix that issue on the build tool level.', '\\n', '\\n', 'I am always getting ', 'undefined', ' from my context although the default value is different ', '\\n', 'You might have a provider without a ', 'value', ' in the tree:', '\\n', \"// 🚩 Doesn't work: no value prop\", '<', 'ThemeContext', '.', 'Provider', '>', '   ', '<', 'Button', ' ', '/>', '</', 'ThemeContext', '.', 'Provider', '>', '\\n', 'If you forget to specify ', 'value', ', it’s like passing ', 'value={undefined}', '.', '\\n', 'You may have also mistakingly used a different prop name by mistake:', '\\n', '// 🚩 Doesn\\'t work: prop should be called \"value\"', '<', 'ThemeContext', '.', 'Provider', ' ', 'theme', '=', '{', 'theme', '}', '>', '   ', '<', 'Button', ' ', '/>', '</', 'ThemeContext', '.', 'Provider', '>', '\\n', 'In both of these cases you should see a warning from React in the console. To fix them, call the prop ', 'value', ':', '\\n', '// ✅ Passing the value prop', '<', 'ThemeContext', '.', 'Provider', ' ', 'value', '=', '{', 'theme', '}', '>', '   ', '<', 'Button', ' ', '/>', '</', 'ThemeContext', '.', 'Provider', '>', '\\n', 'Note that the ', 'default value from your ', 'createContext(defaultValue)', ' call', ' is only used ', 'if there is no matching provider above at all.', ' If there is a ', '<SomeContext.Provider value={undefined}>', ' component somewhere in the parent tree, the component calling ', 'useContext(SomeContext)', ' ', 'will', ' receive ', 'undefined', ' as the context value.', 'Previous', 'useCallback', 'Next', 'useDebugValue', 'How do you like these docs?', 'Take our survey!', '©', '2024', 'Learn React', 'Quick Start', 'Installation', 'Describing the UI', 'Adding Interactivity', 'Managing State', 'Escape Hatches', 'API Reference', 'React APIs', 'React DOM APIs', 'Community', 'Code of Conduct', 'Meet the Team', 'Docs Contributors', 'Acknowledgements', 'More', 'Blog', 'React Native', 'Privacy', 'Terms', 'On this page', 'Overview', 'Reference ', 'useContext(SomeContext)', ' ', 'Usage ', 'Passing data deeply into the tree ', 'Updating data passed via context ', 'Specifying a fallback default value ', 'Overriding context for a part of the tree ', 'Optimizing re-renders when passing objects and functions ', 'Troubleshooting ', 'My component doesn’t see the value from my provider ', 'I am always getting ', 'undefined', ' from my context although the default value is different ', "}